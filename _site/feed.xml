<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jerry's Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 31 Mar 2020 22:21:20 +0900</pubDate>
    <lastBuildDate>Tue, 31 Mar 2020 22:21:20 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Google Coral USB 사용기</title>
        <description>&lt;h1 id=&quot;raspberry-pi-4--google-coral-usb-accelerator&quot;&gt;Raspberry pi 4 &amp;amp; Google Coral USB Accelerator&lt;/h1&gt;

&lt;p&gt;평소에 라즈베리파이 4를 NAS로 사용하고 있었습니다.  &lt;a href=&quot;https://jjerry-k.github.io/living/2018/07/10/Raspberry-Mini-PC/&quot;&gt;이런 느낌으로..&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;하지만…항상 마음 속에는 “흠….라즈베리파이로 딥러닝을 돌려보고 싶다…” 라는 생각을 하고 있었죠.&lt;/p&gt;

&lt;p&gt;평소와 같이 &lt;del&gt;평화로운 중고나라&lt;/del&gt; 를 탐색하고 있었습니다. (모니터가 사고 싶어서 ….)&lt;/p&gt;

&lt;p&gt;근데 . . 갑자기 . . ? 왜 인지 모르겠지만 Google Coral USB Accelerator 를 검색하고 싶더군요.&lt;/p&gt;

&lt;p&gt;그래서 바로 검색을 했고 7마넌(나름 저렴)에 올라와있길래 일요일에 주문을 했습니다.&lt;/p&gt;

&lt;p&gt;그리고 오늘 집에 도착을 했죠.&lt;/p&gt;

&lt;p&gt;이제 사용을 해보려고 합니다.&lt;/p&gt;

&lt;p&gt;준비물을 소개하도록 하죠.&lt;/p&gt;

&lt;h1 id=&quot;준비물&quot;&gt;준비물&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;라즈베리 파이&lt;/li&gt;
  &lt;li&gt;Coral Accelerator&lt;/li&gt;
  &lt;li&gt;Webcam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/coral/01.png&quot; alt=&quot;01.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-1-연결&quot;&gt;Step 1. 연결&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/coral/02.png&quot; alt=&quot;02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/coral/03.png&quot; alt=&quot;03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 연결 후 라즈베리파이를 켜면 위 사진과 같이 USB에 흰색 불이 들어옵니다.&lt;/p&gt;

&lt;h1 id=&quot;step-2-라즈베리파이-세팅&quot;&gt;Step 2. 라즈베리파이 세팅&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://packages.cloud.google.com/apt coral-edgetpu-stable main&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/coral-edgetpu.list

curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libedgetpu1-std

&lt;span class=&quot;c&quot;&gt;# Check Your Platform &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://www.tensorflow.org/lite/guide/python&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;https://dl.google.com/coral/python/tflite_runtime-2.1.0.post1-cp37-cp37m-linux_armv7l.whl

&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

git clone https://github.com/google-coral/examples-camera.git

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;examples-camera

sh download_models.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;download_models.sh&lt;/code&gt;를 실행하시면 다음과 같이  &lt;code class=&quot;highlighter-rouge&quot;&gt;all_models&lt;/code&gt;라는 디렉토리 안에 각 데이터셋 별 labelmap.txt와 학습된 모델의 tflite 파일이 있습니다.&lt;/p&gt;

&lt;p&gt;여기서 밑줄 친 파일을 이용해서 object detection 을 해볼겁니다! 일단 그 다음 세팅으로 넘어가죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/coral/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opencv

sh install_requirements.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;opencv를 이용한 스크립트를 사용하기 위해 필요한 것들을 설치합니다.&lt;/p&gt;

&lt;h1 id=&quot;step-3-스크립트-실행&quot;&gt;Step 3. 스크립트 실행&lt;/h1&gt;

&lt;p&gt;이제 opencv 디렉토리 안에 detect.py를 실행 시켜줄건데요. 옵션이 몇개 있습니다. 한번 살펴보도록 하죠.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: detect.py [-h] [--model MODEL] [--labels LABELS] [--top_k TOP_K]
                 [--camera_idx CAMERA_IDX] [--threshold THRESHOLD]

optional arguments:
  -h, --help            show this help message and exit
  --model MODEL         .tflite model path
  --labels LABELS       label file path
  --top_k TOP_K         number of categories with highest score to display
  --camera_idx CAMERA_IDX
                        Index of which video source to use.
  --threshold THRESHOLD
                        classifier score threshold
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한번 다음과 같이 실행을 해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python detect.py \
--model ../all_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite \
--labels ../all_models/coco_labels.txt \
--top_k 3 \
--threshold 0.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/coral/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;막 빠를 줄 알았는데 Webcam 의 한계라 그런지… FPS가 낮네요..&lt;/p&gt;

&lt;p&gt;추후에 카메라 모듈을 이용해서 해봐야겠습니다.&lt;/p&gt;

&lt;p&gt;그럼 간단한 이용기를 마치겠습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/03/31/coral/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/03/31/coral/</guid>
        
        <category>Tools</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>StarGAN v2 리뷰</title>
        <description>&lt;h1 id=&quot;stargan-v2-diverse-image-synthessis-for-multiple-domains&quot;&gt;StarGAN v2: Diverse Image Synthessis for Multiple Domains&lt;/h1&gt;

&lt;p&gt;Author: Yunjey Choi, Youngjung Uh, Jaejun Yoo, Jung-Woo Ha
Date: Dec 04, 2019
URL: https://arxiv.org/abs/1912.01865&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Image translation 을 잘 하는 Model을 학습하려면 다음 사항을 만족해야함
    &lt;ul&gt;
      &lt;li&gt;Diversity of generated images&lt;/li&gt;
      &lt;li&gt;Scalability over multiple domains&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기존의 방법들은 limited diversity, multiple models(networks)를 다룸.&lt;/li&gt;
  &lt;li&gt;StarGAN v2는 두 조건 모두 만족.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Domain: 시각적으로 구별되는 범주&lt;/li&gt;
  &lt;li&gt;Style: 각 영상이 가지는 독특한 외관적 특성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stargan-v2&quot;&gt;StarGAN v2&lt;/h1&gt;

&lt;h2 id=&quot;proposed-framework&quot;&gt;Proposed framework&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_1.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4개의 Network 로 구성.&lt;/li&gt;
  &lt;li&gt;Generator (&lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Image &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;와 Style code &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;를 입력으로 받아 새로운 영상을 생성.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1703.06868&quot;&gt;adaptive instance normalization (AdaIN)&lt;/a&gt; 사용.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_2.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Mapping network (&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Latent code &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;와 Domain code &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;를 입력으로 받아 Style code &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;생성.&lt;/li&gt;
      &lt;li&gt;Multi Layer Perceptron 구조.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_3.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_3.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Style encoder (&lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Image &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;와 Domain code &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;를 입력으로 받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;에서 Style code &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;를 추출.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Discriminator (&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Image &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;를 입력으로 받아 Domain code &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;와 Real/Fake 분류.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_4.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_4.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;training-objectives&quot;&gt;Training objectives&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Adversarial objective
    &lt;ul&gt;
      &lt;li&gt;GAN 에서 기본적으로 사용되는 Loss&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{adv}=\mathbb{E}_{\mathrm{x},y}[\log{D_y}(\mathrm{x})] + \mathbb{E}_{\mathrm{x}, \tilde{y}, \mathrm{z}}[\log{(1-D_{\tilde{y}}(G(\mathrm{x}, \tilde{\mathrm{s}})))}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Style reconstruction
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G(x, s)&lt;/code&gt; 를 Style encoder &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; 에 넣어 &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; 추출 후 입력 &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;와 비교&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{sty}=\mathbb{E}_{\mathrm{x},\tilde{y}, \mathrm{z}}[\parallel\tilde{\mathrm{s}}-E_{\tilde{y}}(G(\mathrm{x}, \tilde{\mathrm{s}}))\parallel_1]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Style diversification
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;가 다양한 Image를 생성할 수 있도록 Regularization 하는 역할.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;z1, z2&lt;/code&gt; 가 &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;에 의해 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;s1, s2&lt;/code&gt;와 입력 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;의 입력으로 새로운 영상 생성.&lt;/li&gt;
      &lt;li&gt;L1 Norm 계산.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{ds}=\mathbb{E}_{\mathrm{x},\tilde{y}, \mathrm{z}_1, \mathrm{z}_2}[\parallel G(\mathrm{x}, \tilde{\mathrm{s}}_1) - G(\mathrm{x}, \tilde{\mathrm{s}}_2) \parallel_1]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Preserving source characteristics
    &lt;ul&gt;
      &lt;li&gt;Cycle GAN 의 cycle consistency loss.&lt;/li&gt;
      &lt;li&gt;target domain의 style 을 적용한 영상을 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;E(x)&lt;/code&gt;로 추출된 s를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;x'&lt;/code&gt;로 reconstruction 한 후 L1 Norm 계산.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{cyc}=\mathbb{E}_{\mathrm{x}, y, \tilde{y}, \mathrm{z}}[\parallel \mathrm{x} - G(G(\mathrm{x}, \tilde{\mathrm{s}}), \hat{\mathrm{s}})\parallel_1]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Full objective&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_D = -\mathcal{L}_{adv} \\ \mathcal{L}_{F, G, E}=\mathcal{L}_{adv} + \lambda_{sty} \mathcal{L}_{sty} - \lambda_{ds} \mathcal{L}_{ds} + \lambda_{cyc} \mathcal{L}_{cyc}&lt;/script&gt;

    &lt;ul&gt;
      &lt;li&gt;About $\lambda$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Dataset&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;sty&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ds&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;cyc&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CelebA-HQ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;AFHQ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;experiments&quot;&gt;Experiments&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Baselines
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1804.04732&quot;&gt;MUNIT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1808.00948&quot;&gt;DRIT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1903.05628&quot;&gt;MSGAN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1711.09020&quot;&gt;StarGAN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Datasets
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html&quot;&gt;CelebA-HQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/clovaai/stargan-v2/blob/master/download.sh&quot;&gt;AFHQ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluation metrics
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1706.08500&quot;&gt;Frechet inception distance (FID)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1801.03924&quot;&gt;Learned perceptual image patch similarity (LPIPS)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysis-of-individual-components&quot;&gt;Analysis of individual components&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;StarGAN에서 본 연구에서 제안하는 방법들을 하나하나 넣어가면서 성능 실험.&lt;/li&gt;
  &lt;li&gt;정량적 평가를 보면 추가할 때마다 좋아지는 것을 볼 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_5.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_5.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 단계별 생성한 영상의 결과&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_6.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_6.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comparison-on-diverse-image-synthesis&quot;&gt;Comparison on diverse image synthesis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다른 방법들과 비교&lt;/li&gt;
  &lt;li&gt;Latent-guided synthesis ( Latent code 만을 이용하여 생성 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_7.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_8.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_8.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Referenc-guided synthesis ( Style code 를 이용한 생성 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_9.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_10.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_10.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Human evaluation
    &lt;ul&gt;
      &lt;li&gt;방법 별로 100개의 sample 생성 후 사람이 판단.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_11.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_11.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;result&quot;&gt;Result&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;겁나….잘 생성함…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_12.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_13.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/starganv2/Untitled_13.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/03/04/starganv2/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/03/04/starganv2/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>StarGAN v1</title>
        <description>&lt;h1 id=&quot;stargan-unified-generative-adversarial-networks-for-multi-domain-image-to-image-translation&quot;&gt;StarGAN: Unified Generative Adversarial Networks for Multi-Domain Image-to-Image Translation&lt;/h1&gt;

&lt;p&gt;Author: Yunjey Choi, Youngjung Uh, Jaejun Yoo, Jung-Woo Ha
Date: Dec 21, 2019
URL: https://arxiv.org/abs/1711.09020&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Multi domain image translation 이라고 하면 다음 사진과 같이 머리 색, 성별, 연령대 등과 같이 여러 condition 에 대응하는 영상을 생성.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled.png&quot; alt=&quot;/public/img/starganv1/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 image-to-image translation 은 n개의 domain 을 적용할 시에 n*(n-1) 개의 generator가 필요했음.&lt;/li&gt;
  &lt;li&gt;StarGAN은 한 1개의 generator로 n개의 domain 을 적용.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_1.png&quot; alt=&quot;/public/img/starganv1/Untitled_1.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;star-generative-adversarial-networks&quot;&gt;Star Generative Adversarial Networks&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_2.png&quot; alt=&quot;/public/img/starganv1/Untitled_2.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;loss-functions&quot;&gt;Loss functions&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Adversarial Loss&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{adv} = \mathbb{E}_x [\log D_{src}(x)] + \mathbb{E}_{x, c} [\log (1-D_{src}(G(x,c)))] - \lambda_{gp}\mathbb{E}_{\hat{x}}[(\Vert \nabla_{\hat{x}}D_{src}(\hat{x})\Vert_2 -1)^2]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{gp} = 10&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Domain Classification Loss&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}^r_{cls} = \mathbb{E}_{x, c'}[-\log D_{cls}(c'|x)]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}^f_{cls} = \mathbb{E}_{x, c'}[-\log D_{cls}(c|G(x, c)]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Reconstruction Loss&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_{rec} = \mathbb{E}_{x, c, c'}[\Vert x-G(G(x, c), c')\Vert_1]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Full Objective&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_D = -\mathcal{L}_{adv} + \lambda_{cls}\mathcal{L}^r_{cls}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}_G = \mathcal{L}_{adv} + \lambda_{cls}\mathcal{L}^f_{cls}+\lambda_{rec}\mathcal{L}_{rec}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{cls} = 1, \lambda_{rec} = 10&lt;/script&gt;

&lt;h1 id=&quot;result&quot;&gt;Result&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_3.png&quot; alt=&quot;/public/img/starganv1/Untitled_3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_4.png&quot; alt=&quot;/public/img/starganv1/Untitled_4.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;training-detail&quot;&gt;Training Detail&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_5.png&quot; alt=&quot;/public/img/starganv1/Untitled_5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/starganv1/Untitled_6.png&quot; alt=&quot;/public/img/starganv1/Untitled_6.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/03/02/starganv1/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/03/02/starganv1/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>Weights &amp; Biases 가 뭐지??</title>
        <description>&lt;p&gt;이번 포스팅에선 &lt;a href=&quot;https://www.wandb.com/&quot;&gt;Weights &amp;amp; Biases&lt;/a&gt; 라는 Tool 을 소개드리려 합니다.&lt;/p&gt;

&lt;p&gt;다음과 같은 특징을 강조하네요.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Store hyper-parameters used in a training run&lt;/li&gt;
  &lt;li&gt;Search, compare, and visualize training runs&lt;/li&gt;
  &lt;li&gt;Analyze system usage metrics alongside runs&lt;/li&gt;
  &lt;li&gt;Collaborate with team members&lt;/li&gt;
  &lt;li&gt;Replicate historic results&lt;/li&gt;
  &lt;li&gt;Run parameter sweeps&lt;/li&gt;
  &lt;li&gt;Keep records of experiments available forever&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 간단 사용법에 대해서 설명드리겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;sign-up-을-했다는-가정하에-진행합니다&quot;&gt;&lt;strong&gt;Sign Up&lt;/strong&gt; 을 했다는 가정하에 진행합니다.&lt;/h3&gt;

&lt;h1 id=&quot;패키지-설치&quot;&gt;패키지 설치&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wandb&lt;/code&gt; 패키지를 먼저 설치해줍니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wandb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;wandb-로그인&quot;&gt;wandb 로그인&lt;/h1&gt;

&lt;p&gt;설치 후 Terminal (or 명령 프롬프트) 에 다음과 같이 입력합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wandb login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 아래와 같은 화면이 나오면서 웹 브라우저가 켜집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_1.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Browser 에서 API키를 복사해주해서 Terminal (or 명령 프롬프트) 에 붙여넣기합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_2.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 wandb 에 로그인 완료!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_3.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_3.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;code-실행&quot;&gt;Code 실행&lt;/h1&gt;

&lt;p&gt;간단한 MLP를 이용한 MNIST Classification 문제입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# wandb initialization
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wandb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wandb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;losses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Import callback function
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wandb.keras&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WandbCallback&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Packge Loaded!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Data Loading
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Train Data's Shape : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test Data's Shape : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Network Building
## Using Sequential
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Network Built!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;losses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sparse_categorical_crossentropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accuracy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;n&quot;&gt;validation_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                                    &lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WandbCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# callbacks 에 Wandbcallback 추가
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;check-training&quot;&gt;Check training&lt;/h1&gt;

&lt;p&gt;해당 코드를 실행시키고 &lt;a href=&quot;https://app.wandb.ai/home&quot;&gt;W&amp;amp;B&lt;/a&gt; 에 접속을 하면 다음과 같은 화면이 나옵니다.&lt;br /&gt;
위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_project&lt;/code&gt; 라는 프로젝트에 세팅을 했기 때문에 확인을 해봅니다.&lt;br /&gt;
하나의 프로젝트에서 한번 실행하면 뭔지 모를 조합의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt;으로 실행 상태를 보여줍니다.
저는 한번만 했기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;lyric-dream-3&lt;/code&gt; 라는 이름으로 하나만 생겨있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_4.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lyric-dream-3&lt;/code&gt; 같이 이름을 클릭해서 무엇을 볼 수 있는지 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;chart-탭&quot;&gt;Chart 탭&lt;/h2&gt;

&lt;p&gt;Chart 탭에선 loss, epoch, metric 등과 같은 학습 관련 지표를 볼 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CHARTS&lt;/code&gt;와 모델 학습에 사용된 시스템을 모니터링 할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SYSTEM&lt;/code&gt;이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_5.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_6.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_7.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_8.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_9.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_9.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;system-탭&quot;&gt;System 탭&lt;/h2&gt;
&lt;p&gt;System 탭에서는 Chart 탭에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;SYSTEM&lt;/code&gt; 과 동일한 그래프를 보여주네요.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_10.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_10.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;model-탭&quot;&gt;Model 탭&lt;/h2&gt;
&lt;p&gt;이름 그대로 학습하는 Model의 graph 구조를 볼 수 있습니다.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_11.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_11.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logs-탭&quot;&gt;Logs 탭&lt;/h2&gt;
&lt;p&gt;여기선 학습 로그들이 저장됩니다.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_12.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_12.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;files-탭&quot;&gt;Files 탭&lt;/h2&gt;
&lt;p&gt;솔직히 보여주기만 해도 좋지만 저장도 해주면 좋겠죠.&lt;br /&gt;
Files 탭에는 현재 모델을 돌릴때 사용된 정보, 가장 성능이 좋았을 epoch 의 model, 돌리는 환경에 설치된 package 리스트 등의 정보가 저장됩니다.&lt;br /&gt;
물론 다운로드 가능!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;model-best.h5&lt;/code&gt;는 graph 정보도 저장되어 있기 때문에 다운로드 후 load해서 바로 Inference 가능합니다!
&lt;img src=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_13.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/wandb/Untitled_13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wandb.com/&quot;&gt;Weights &amp;amp; Biases&lt;/a&gt; 에 대해 정~~~말 간단히 알아봤습니다.&lt;br /&gt;
딱히 이런저런 기능은 추가를 하지 않고 기본적인 기능만 봤습니다.&lt;br /&gt;
추후에는 좀 더 다양한 기능과 프레임워크에 적용해보도록 하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/03/01/wandb/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/03/01/wandb/</guid>
        
        <category>Tools</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>MobileNet V1 리뷰</title>
        <description>&lt;h1 id=&quot;mobilenets-efficient-convolutional-neural-networks-for-mobile-vision-applications&quot;&gt;MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications&lt;/h1&gt;

&lt;p&gt;Author: Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand, Marco Andreetto, Hartwig Adam&lt;br /&gt;
Date: Apr 17, 2017&lt;br /&gt;
URL: https://arxiv.org/abs/1704.04861&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;- 모바일, 임베디드에 적용할 수 있는 네트워크.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-introduction&quot;&gt;&lt;strong&gt;1. Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CNN 유명세 짱짱맨&lt;/li&gt;
  &lt;li&gt;좋은 성능(정확도)를 위해 연구가 계속 진행되었지만 속도와 메모리 측면에서 &lt;strong&gt;**비&lt;/strong&gt;**효율적.&lt;/li&gt;
  &lt;li&gt;경량화, 효율화 필요!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-prior-work&quot;&gt;&lt;strong&gt;2. Prior Work&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;최근 경량화, 효율적인 네트워크 개발에 초점.&lt;/li&gt;
  &lt;li&gt;Depthwse separable convolution,&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-mobilenetarchitecture&quot;&gt;&lt;strong&gt;3. MobileNet Architecture&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;핵심적인 레이어 설명.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;31-depthwiseseparableconvolution&quot;&gt;&lt;strong&gt;3.1 Depthwise Separable Convolution&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Depthwise Convolution 수행 후 Pointwise Convolution 수행.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_1.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_2.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_2.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MobileNet 에서는 3 x 3 의 Depthwise saparable convolution 사용.&lt;/li&gt;
  &lt;li&gt;연산량이 약 8~9 배로 크게 감소.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-networkstructureandtraining&quot;&gt;&lt;strong&gt;3.2 Network Structure and Training&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;총 28개의 레이어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_3.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_3.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MobileNet의 Convolution Block 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_4.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_4.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MobileNet의 대부분 파라미터, 연산 시간은 1x1 Conv&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_5.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_5.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RMSprop, asynchronous gradient descent 사용.&lt;/li&gt;
  &lt;li&gt;Tensorflow 로 구현.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-widthmultiplierthinnermodels&quot;&gt;&lt;strong&gt;3.3 Width Multiplier: Thinner Models&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MobileNet의 기본 구조는 작고 빠르지만 더 작고 빠른 모델을 필요로 함.&lt;/li&gt;
  &lt;li&gt;Width multiplier 라는 파라미터 제안.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-resolutionmultiplierreducedrepresentation&quot;&gt;&lt;strong&gt;3.4 Resolution Multiplier: Reduced Representation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_6.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_6.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-experiments&quot;&gt;&lt;strong&gt;4. Experiments&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;효율적이다 라는&lt;/strong&gt; 내용이 전부..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;41-modelchoices&quot;&gt;&lt;strong&gt;4.1 Model Choices&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_7.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_8.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_8.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-modelshrinkinghyperparemeters&quot;&gt;&lt;strong&gt;4.2 Model Shrinking Hyperparemeters&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_9.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_10.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_11.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_12.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_13.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_14.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_14.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;43-finegrainedrecognition&quot;&gt;&lt;strong&gt;4.3 Fine Grained Recognition&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_15.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_15.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;44-largescalegeolocalization&quot;&gt;&lt;strong&gt;4.4 Large Scale Geolocalization&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_16.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_16.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;45-faceattributed&quot;&gt;&lt;strong&gt;4.5 Face Attributed&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_17.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_18.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_18.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;46-objectdetection&quot;&gt;&lt;strong&gt;4.6 Object Detection&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_19.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_20.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_20.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;47-faceembeddings&quot;&gt;&lt;strong&gt;4.7 Face Embeddings&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_21.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/mobilev1/Untitled_21.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-conclusion&quot;&gt;&lt;strong&gt;5. Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;연산량이 적고 파라미터 수도 적음!&lt;/li&gt;
  &lt;li&gt;다양한 task 에 사용가능!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/02/26/MobileNets-Efficient-Convolutional-Neural-Networks/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/02/26/MobileNets-Efficient-Convolutional-Neural-Networks/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>Xception</title>
        <description>&lt;h1 id=&quot;xception-deep-learning-with-depthwise-separable-convolution&quot;&gt;Xception: Deep Learning with Depthwise Separable Convolution&lt;/h1&gt;

&lt;p&gt;Author: Franc¸ois Chollet&lt;br /&gt;
Date: Dec 19, 2016&lt;br /&gt;
URL: https://arxiv.org/abs/1610.02357&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CNN 에서 많이 사용되는 Inception 은 Regular Convolution 과 Depthwise Separable Convolution 의 중간 단계.&lt;/li&gt;
  &lt;li&gt;Depthwise Separable Convolution 은 최대 개수의 타워를 가진 Inception module (?)&lt;/li&gt;
  &lt;li&gt;Inception module을 Depthwise Separable Convolution 으로 대체한 새로운 Deep Convolutional Neural Network 제안.&lt;/li&gt;
  &lt;li&gt;Xception 이라고 칭함.&lt;/li&gt;
  &lt;li&gt;ImageNet 으로 학습된 Inception V3 보다 살짝 성능이 좋고 350,000,000개의 이미지와 17,000개의 클래스로 구성된 Larger image dataset 에선 Inception V3 보다 월등히 뛰어난 성능을 보임.&lt;/li&gt;
  &lt;li&gt;Inception V3와 Xception 이 동일한 parameter 수를 가짐.&lt;/li&gt;
  &lt;li&gt;그러므로 연산량, 메모리의 증가가 아닌 모델 parameter를 효과적으로 사용해서 성능 향상이 된 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1introduction&quot;&gt;&lt;strong&gt;1. Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Convolutional Neural Network (이하 CNN) 은 Computer Vision 에서 가장 주요한 알고리즘이 되었고, 이를 설계하는 방법에 대해 개발하는데 많은 관심을 가지게 됨.&lt;/li&gt;
  &lt;li&gt;Lenet -&amp;gt; AlexNet (2012) -&amp;gt; ZFNet (2013) -&amp;gt; VGG (2014) -&amp;gt; Inception 종류 … -&amp;gt; Inception-ResNet (2015)&lt;/li&gt;
  &lt;li&gt;Inception 스타일의 기본 구성 요소는 Inception module.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figure 1은 Inception V3 의 표준 Inception Module.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Inception 모델은 위와 같은 모듈을 Stack 한 것. VGG-Style 네트워크는 단순히 Convolution layer를 Stack.&lt;/li&gt;
  &lt;li&gt;실험적으로 Inception-style 이 VGG-style보다 적은 parameter로 다양한, 많은 feature를 학습 할 수 있다는 것을 보임.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11theinceptionhypothesis&quot;&gt;&lt;strong&gt;1.1 The Inception hypothesis&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Convolution layer는 3차원 공간에서 filter를 학습하려고 함.&lt;/li&gt;
  &lt;li&gt;Single Convolution kernel 은 채널의 correlation과 공간의 correlation 을 동시에 mapping 함.&lt;/li&gt;
  &lt;li&gt;Inception 모듈은 채널, 공간의 correlation 을 독립적으로 나타낼 수 있도록 연산을 분해. -&amp;gt; 쉽고 효율적인 프로세스를 만듦.&lt;/li&gt;
  &lt;li&gt;Inception의 가설은 채널 채널, 공간의 correlation 이 분리되어 있으므로 동시에 매핑하는 것은 좋지 않다는 것.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figure 2는 3x3 conv와 1x1 conv만 사용한 단순화한 Inception 모듈.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_1.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_1.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figure 3은 Figure 2의 Inception 모듈에서 하나의 큰 1x1 Convolution과 3x3 Convolution들로 재구성한 것.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_2.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이 방법이 Inception 의 가설보다 뛰어난 가설을 만드는 것이 합리적인 것일지, 채널과 공간을 독립적으로 매핑할 수 있는지 의문.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;12thecontinuumbetweenconvolutionsandseparableconvolutions&quot;&gt;&lt;strong&gt;1.2 The continuum between convolutions and separable convolutions&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Figure 4 처럼 Inception 모듈 구성.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_3.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_3.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;1x1 Convolution 적용하여 채널의 correlation 매핑, 그 후 각각의 channel별로 공간의 correlation 매핑&lt;/li&gt;
  &lt;li&gt;이를 &lt;strong&gt;An “extreme” version of an Inception module&lt;/strong&gt; 이라고 칭함.&lt;/li&gt;
  &lt;li&gt;TensorFlow 프레임워크에 Depthwise Separable Convolution 연산과 거의 동일함.&lt;/li&gt;
  &lt;li&gt;TensorFlow나 Keras 프레임워크에 있는 Depthwise Separable Convolution (Separable Convolution 라고도 불림.) 은 각 channel 별로 3x3 Convolution 적용 후 채널간의 1x1 Convolution 적용.&lt;/li&gt;
  &lt;li&gt;영상처리 분야에서 사용하는 Separable Convolution 과 혼동하면 안됨, 이 연산은 공간적 분리를 하는 Convolution.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;비교&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Extream&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Depthwise Separable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;연산순서&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pointwise–&amp;gt;channelwise&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;channelwise–&amp;gt;pointwise&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;비선형성&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Presence&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Absence&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;2priorwork&quot;&gt;&lt;strong&gt;2. Prior work&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;VGG-16 과 같은 구조가 xception 과 유사.&lt;/li&gt;
  &lt;li&gt;Inception 구조는 가지치기의 이점을 보여줌.&lt;/li&gt;
  &lt;li&gt;Depthwise separable convolution는 경량화에도 적합.&lt;/li&gt;
  &lt;li&gt;TensorFlow에는 이미 구현되어있음.&lt;/li&gt;
  &lt;li&gt;Residual connection 을 광범위하게 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3thexceptionarchitecture&quot;&gt;&lt;strong&gt;3. The Xception architecture&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_4.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_4.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Figure 5 와 같은 구조 제안.&lt;/li&gt;
  &lt;li&gt;처음과 마지막을 제외하곤 linear residual module 사용.&lt;/li&gt;
  &lt;li&gt;총 36개의 convolution layer로 구성.&lt;/li&gt;
  &lt;li&gt;매우 단순한 구조.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4experimentalevaluation&quot;&gt;&lt;strong&gt;4. Experimental evaluation&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Xception과 Inceotion V3 비교.&lt;/li&gt;
  &lt;li&gt;Parameters가 비슷. 네트워크 규모에 대한 차이를 없애기 위함.&lt;/li&gt;
  &lt;li&gt;ImageNet과 JFT dataset 이용.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;41thejftdataset&quot;&gt;&lt;strong&gt;4.1 The JFT dataset&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;그냥…JFT 데이터 설명…&lt;/li&gt;
  &lt;li&gt;Google 데이터 중 하나&lt;/li&gt;
  &lt;li&gt;JFT 로 학습, FastEval14k dataset으로 성능 비교.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42optimizationconfiguration&quot;&gt;&lt;strong&gt;4.2 Optimization configuration&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;각 방법에 대해서 다음과 같은 설정으로 Xception, Inception V3 모두 학습&lt;/li&gt;
  &lt;li&gt;On ImageNet
    &lt;ul&gt;
      &lt;li&gt;Optimizer: SGD&lt;/li&gt;
      &lt;li&gt;Momentum: 0.9&lt;/li&gt;
      &lt;li&gt;Initial learning rate: 0.045&lt;/li&gt;
      &lt;li&gt;Learning rate decay: 0.94 (every 2 epochs)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On JFT
    &lt;ul&gt;
      &lt;li&gt;Optimizer: RMSprop&lt;/li&gt;
      &lt;li&gt;Momentum: 0.9&lt;/li&gt;
      &lt;li&gt;Initial learning rate: 0.001&lt;/li&gt;
      &lt;li&gt;Learning rate decay: 0.9 (every 3,000,000 samples)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43regularizationconfiguration&quot;&gt;&lt;strong&gt;4.3 Regularization configuration&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Weight decay&lt;/li&gt;
  &lt;li&gt;Dropout&lt;/li&gt;
  &lt;li&gt;Auxiliary loss tower&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44traininginfrastructure&quot;&gt;&lt;strong&gt;4.4 Training infrastructure&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;80개의 NVIDIA K80 GPU ….&lt;/li&gt;
  &lt;li&gt;ImageNet 학습시 &lt;strong&gt;synchronous gradient descent&lt;/strong&gt;을 적용하여 data parallelism 이용. → 3일 소요&lt;/li&gt;
  &lt;li&gt;JFT 학습시 &lt;strong&gt;asynchronous gradient descent&lt;/strong&gt;을 적용하여 data parallelism 이용. →한달 소요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;45comparisonwithinceptionv3&quot;&gt;&lt;strong&gt;4.5 Comparison with Inception V3&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;451classificationperformance&quot;&gt;&lt;strong&gt;4.5.1 Classification performance&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;두 데이터 모두 Xception이 좋은 성능을 보임.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_5.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_5.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_6.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_6.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_7.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_7.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_8.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_8.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_9.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_9.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;452sizeandspeed&quot;&gt;&lt;strong&gt;4.5.2 Size and speed&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Parameter가 늘지 않으면서 성능 향상을 보이기에 Xception이 효율적인 모델.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_10.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_10.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;46effectoftheresidualconnections&quot;&gt;&lt;strong&gt;4.6 Effect of the residual connections&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Residual connection에 대한 ablation study 진행.&lt;/li&gt;
  &lt;li&gt;Residual connection의 중요성을 보여줌.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_11.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_11.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;47effectofanintermediateactivationafterpointwiseconvolutions&quot;&gt;&lt;strong&gt;4.7 Effect of an intermediate activation after point wise convolutions&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Depthwise separable convolution은 depthwise → pointwise convolution으로 구성되어있음.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 중간에 activation function에 대한 ablation study 진행.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_12.png&quot; alt=&quot;https://jjerry-k.github.io/public/img/xception/Untitled_12.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1512.00567.pdf&quot;&gt;Inception module에 대한 연구&lt;/a&gt;와 반대되는 결과 도출.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5futuredirections&quot;&gt;&lt;strong&gt;5. Future directions&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Depthwise separble convolution 이 만능이라는 보장은 없음.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2020/02/16/Xception/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2020/02/16/Xception/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>jupyter Lab 에서 단축키 설정하는 방법!</title>
        <description>&lt;p&gt;파이썬, 딥러닝을 하시는 분들 중 Jupyter 부류를 이용하시는 분들이 꽤 많습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Jupyter Notebook, Jupyter Lab,...&lt;/code&gt;&lt;br /&gt;
저는 둘 다 사용해보긴 하지만 주로 &lt;strong&gt;Jupyter Lab&lt;/strong&gt; 을 사용합니다.&lt;br /&gt;
이유는 그냥…좀 더 보기 편해서..?&lt;br /&gt;
두 환경의 차이는 다음 링크에서 확인해주세요.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyter.readthedocs.io/en/latest/running.html#running&quot;&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyterlab.readthedocs.io/en/stable/index.html&quot;&gt;Jupyter Lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;참고사항&quot;&gt;참고사항&lt;/h4&gt;
&lt;p&gt;https://github.com/jupyterlab/jupyterlab/issues/7122&lt;br /&gt;
며칠 전 이슈에 올라온 상황입니다.&lt;br /&gt;
jupyter lab 1.0.2 버전에 extension을 설치하면 sidebar 부분이 깨지는 버그가 있네요…&lt;br /&gt;
1.1.1 에선 고쳐졌다고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size:25pt;&quot;&gt;자, 다시 본론으로 돌아가봅니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jupyter Lab 에서 단축키로 설정할 수 있는 기능들은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;‘notebook:create-new’&lt;br /&gt;
‘notebook:interrupt-kernel’&lt;br /&gt;
‘notebook:restart-kernel’&lt;br /&gt;
‘notebook:restart-clear-output’&lt;br /&gt;
‘notebook:restart-run-all’&lt;br /&gt;
‘notebook:reconnect-to-kernel’&lt;br /&gt;
‘notebook:change-kernel’&lt;br /&gt;
… (너무 많다….)&lt;br /&gt;
‘notebook:hide-all-cell-outputs’&lt;br /&gt;
‘notebook:show-all-cell-outputs’&lt;br /&gt;
‘notebook:enable-output-scrolling’&lt;br /&gt;
‘notebook:disable-output-scrolling’&lt;br /&gt;
‘notebook:save-with-view’&lt;/p&gt;

&lt;p&gt;너무 많은 관계로 &lt;strong&gt;&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/blob/af548c2674427da79d54ad5c4b69bb175463e9a0/packages/notebook-extension/src/index.ts#L69-L197&quot;&gt;링크&lt;/a&gt;&lt;/strong&gt; 참고해주세요.&lt;/p&gt;

&lt;p&gt;이번 포스팅에선 예시로 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 에 대해서 shortcut을 설정해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;설정-방법&quot;&gt;설정 방법&lt;/h2&gt;

&lt;p&gt;먼저 Jupyter Lab 을 실행시켜주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig01.png&quot; alt=&quot;fig1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Setting Editor&lt;/strong&gt; 를 클릭해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig02.png&quot; alt=&quot;fig2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측에 &lt;strong&gt;Keyboard Shortuts&lt;/strong&gt; 를 선택해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig03.png&quot; alt=&quot;fig3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 왼쪽의 창은 default setting에 대한 설명이고 오른쪽을 Custom 을 위해 기입하는 부분입니다.&lt;/p&gt;

&lt;p&gt;그럼 예시대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 에 대해서 shortcut을 설정해보겠습니다.&lt;/p&gt;

&lt;p&gt;위에 기능에 대해서 링크 올려드렸었죠? 그 깃헙에서 링크에 대한 내용을 먼저 찾아봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig04.png&quot; alt=&quot;fig4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;거기서 ‘{기능 이름}’ 부분을 복사해주세요.&lt;/p&gt;

&lt;p&gt;그리고 다음과 같이 기입해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig05.png&quot; alt=&quot;fig5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 우측 상단에 저장버튼을 누르고 노트북에서 Shift + Command + C 를 눌렀을때 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 이 작동하게 됩니다.&lt;/p&gt;

&lt;p&gt;사진만 보고 따라 적으시기 귀찮으실테니 code block 으로 남깁니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;shortcuts&quot;: [
    {
        &quot;command&quot;: &quot;kernelmenu:restart-and-clear&quot;,
        &quot;keys&quot;: [&quot;Shift + Ctrl + C&quot;],
        &quot;selector&quot;: &quot;[data-jp-kernel-user]:focus&quot;
        }]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;과정을 요약해드리면 (Jupyter Lab 켜기 ~ Editor 열기 까지는 생략)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;기능에 대한 링크에서 자신이 원하는 기능 찾기&lt;/li&gt;
  &lt;li&gt;위에 code block 에서 “command”: 부분에 ‘{기능 이름}’ 기입&lt;/li&gt;
  &lt;li&gt;“keys”: 에 원하는 커맨드 넣기 (복수개 가능)&lt;/li&gt;
  &lt;li&gt;“selector”: 에 .jp-Notebook:focus” 혹은 “[data-jp-kernel-user]:focus” 기입&lt;/li&gt;
  &lt;li&gt;저장 후 즐겁게 사용!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;shortcut 설정은 여기까지 입니다.&lt;br /&gt;
혹시 이외에 다른 설정에 대해 궁금한거 있으시면 comment 남겨주세요!&lt;/p&gt;

&lt;h3 id=&quot;참고사항-1&quot;&gt;참고사항&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;만약 &lt;strong&gt;A 기능은 Shift + Alt + C&lt;/strong&gt; 이고 &lt;strong&gt;B 기능은 Alt + Shift + C&lt;/strong&gt; 일때… 전체적으로 보면 같은 키 입력이지만 순서가 다르기 때문에 &lt;strong&gt;별개의 shortcut으로 작동&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 07 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/09/07/Jupyter_shortcut/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/09/07/Jupyter_shortcut/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>jupyter (ipython) 여러 커널 사용하기!</title>
        <description>&lt;p&gt;Anaconda 를 사용하다보면 여러 가상환경을 만들게 됩니다. (아닐수도 있구요…)&lt;br /&gt;
그 후에 jupyter 를 사용하시는 분들이라면 대부분 이렇게 사용하실 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate 환경이름
jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate 환경이름&lt;/code&gt; 이라는걸 &lt;strong&gt;무.조.건&lt;/strong&gt; 써줘야하죠..&lt;br /&gt;
이게 매우 귀찮았습니다…&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“activate 없이 base에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter notebook&lt;/code&gt;을 실행해도 가상환경을 잡을 수 있는 방법이 없나..”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 생각 많이들 하실 것 같습니다.&lt;br /&gt;
당연히 방법이 있습니다!&lt;br /&gt;
그 방법에 대해 알려드리겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;환경이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; ipykernel &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;환경이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--display-name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Jupyter에 표시될 이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하시면 됩니다. 예시를 직접 보여드리겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저는 base 환경만 썼습니다. 가상환경을 가볍게 하나 만들도록 할게요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;라는 가상환경을 만들었습니다. 먼저 &lt;strong&gt;kernel을 추가하지 않고&lt;/strong&gt; jupyter notebook을 실행해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/03.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 사진을 보시면 &lt;strong&gt;Python 3&lt;/strong&gt; 만 나오는걸 보실 수 있습니다. 저 &lt;strong&gt;Python 3&lt;/strong&gt; 는 base의 Python을 가리킵니다.&lt;br /&gt;
base에는 제가 tensorflow를 설치해놨기 때문에 import 가 잘 작동하는군요..&lt;br /&gt;
그럼 kernel을 추가해보겠습니다.  (일단 test 환경에 ipython 이 안깔려있어서 설치함..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/05.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커널을 추가하고 나면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Installed ~~~~&lt;/code&gt; 라는 메세지를 보실 수 있어요!&lt;br /&gt;
그럼 다시 base로 돌아가서 jupyter notebook을 실행해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/07.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 사진을 보시면 추가하기 전과는 다르게 &lt;strong&gt;test&lt;/strong&gt; 라는 항목이 추가되었습니다!&lt;br /&gt;
실행을 해봐도 tensorflow 모듈이 없다고 나오는걸 확인하실 수 있습니다!&lt;br /&gt;
앞으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate ~~&lt;/code&gt;를 안하셔도 되요! (뿌듯)&lt;/p&gt;

&lt;p&gt;이번 포스팅은 여기까지 입니다.&lt;br /&gt;
많은 분들께 도움이 되었으면 좋겠네요!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. jupyter notebook 우측 상단쪽에 어떤 커널로 실행하고 있는지 표시가 됩니다.  (&lt;code class=&quot;highlighter-rouge&quot;&gt;Logout&lt;/code&gt; 아래)&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/07/10/Multiple_Kernel/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/07/10/Multiple_Kernel/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python으로 DICOM 영상을 읽어보자!</title>
        <description>&lt;p&gt;예~~전에 &lt;a href=&quot;https://jjerry-k.github.io/python/2019/01/23/nifti/&quot;&gt;NIfTI&lt;/a&gt; 파일을 load 하는 방법을 올렸었습니다! &lt;br /&gt;
이번에는 Python에서 &lt;a href=&quot;https://www.dicomstandard.org&quot;&gt;DICOM&lt;/a&gt; 포맷의 데이터를 load 하는 방법에 대한 포스팅을 해보려고 합니다.&lt;/p&gt;

&lt;p&gt;가장 먼저 관련 패키지인 &lt;a href=&quot;https://pydicom.github.io/pydicom/stable/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pydicom&lt;/code&gt;&lt;/a&gt; 을 설치를 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge pydicom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저번과 똑같이 단순한 설치방법!&lt;/p&gt;

&lt;p&gt;이제 코딩으로 읽어보겠습니다.&lt;br /&gt;
예시 데이터로 다음 &lt;a href=&quot;https://github.com/pydicom/pydicom/blob/master/pydicom/data/test_files/MR_small.dcm&quot;&gt;링크&lt;/a&gt;에 있는 영상을 이용하였습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pydicom&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.dcm 경로&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#data = di.dcmread(&quot;.dcm 경로&quot;) # 편한거 쓰시면 됩니다.
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel_array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 슬라이스 1장일 경우
#plt.imshow(img[:,:,&quot;slice 번호&quot;]) # 슬라이스가 여러 장일 경우
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 작성하시면 됩니다.&lt;br /&gt;
 예시를 보여드리면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dicom/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예시 영상이 좀 작네요…&lt;br /&gt;
어쨌든 이런 식으로 읽습니다.&lt;/p&gt;

&lt;p&gt;흠….NIfTI와 DICOM을 했으니…다음엔 &lt;strong&gt;Insight Meta-Image&lt;/strong&gt; 를 해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/07/06/DICOM/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/07/06/DICOM/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>MRI interpolation using Deep Learning - [1]</title>
        <description>&lt;h1 id=&quot;deep-generative-adversarial-networks-for-thin-section-infant-mr-image-reconstruction&quot;&gt;Deep Generative Adversarial Networks for Thin-Section Infant MR Image Reconstruction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Jiaqi Gu&lt;sup&gt;1&lt;/sup&gt;, Zezu Li&lt;sup&gt;1&lt;/sup&gt;, YuanYuan Wans&lt;sup&gt;1, 3&lt;/sup&gt;, Haowei Yang&lt;sup&gt;2&lt;/sup&gt;, Zhongwei Qiao&lt;sup&gt;2&lt;/sup&gt;, and Jinhua Yu&lt;sup&gt;1, 3&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;School of Information Science and Technology, Fudan University, Shanghai 200433, China&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt;The Children’s Hospital of Fudan University, Shanghai 201102, China&lt;br /&gt;
&lt;sup&gt;3&lt;/sup&gt;Key Laboratory of Medical Imaging Computing and Computer Assisted Intervention of Shanghai, Department of Electronic Engineering, Institute of Functional
and Molecular Medical Imaging, Fudan University, Shanghai 200433, China
—&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Thin section magnetic resonance images (&lt;strong&gt;Thin MRI&lt;/strong&gt;) 는 뇌수술, 뇌 구조 분석에 좋은 영상.&lt;/li&gt;
  &lt;li&gt;하지만 Thick section magnetic resonance images (&lt;strong&gt;Thick MRI&lt;/strong&gt;) 에 비해 imaging cost가 많이 들기 때문에 잘 사용되지 않음.&lt;/li&gt;
  &lt;li&gt;Thick MRI 2 Thin MRI 제안.&lt;/li&gt;
  &lt;li&gt;Two stage( GAN -&amp;gt; CNN )로 구성하였고 Thick MRI의 Axial, Sigittal plane을 이용하여 Thin MRI의 Axial reconstruction.&lt;/li&gt;
  &lt;li&gt;3D-Y-Net-GAN 은 Axial, Sagittal Thick MRI 를 이용하여 Fusion.&lt;/li&gt;
  &lt;li&gt;3D-Dense U-Net은 Sagittal plane에 대해 세부적인 calibrations, structual correction 제공.&lt;/li&gt;
  &lt;li&gt;Loss function 은 structual detail을 Network가 capture 할 수 있도록 제안.&lt;/li&gt;
  &lt;li&gt;bicubic, sparse representation, 3D-SRU-Net 과 비교.&lt;/li&gt;
  &lt;li&gt;35번의 Cross-validation, 114개를 이용하여 두개의 testset 구성.
    &lt;ul&gt;
      &lt;li&gt;PSNR : 23.5 % 증가.&lt;/li&gt;
      &lt;li&gt;SSIM : 90.5 % 증가.&lt;/li&gt;
      &lt;li&gt;MMI : 21.5 % 증가.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Thin MRI 는 slice thickness가 1mm이고 sapcing gap이 0mm.&lt;/li&gt;
  &lt;li&gt;하지만 항상 Thin MRI를 사용할 수 없음.&lt;/li&gt;
  &lt;li&gt;일반적으로 사용하는 Thick MRI는 slice thickness가 4~6mm 이고 sapcing gap이 0.4~1mm.
    &lt;ul&gt;
      &lt;li&gt;해상도 : Thin MRI &amp;gt; Thick MRI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인간의 뇌 발달에 대한 insight를 주기 때문에 유아의 brain MR image는 어른의 brain MR image 보다 연구에 가치가 있음&lt;/li&gt;
  &lt;li&gt;하지만 유아의 MR image를 얻는게 쉽지 않음.&lt;/li&gt;
  &lt;li&gt;그래서 Thick to Thin 제안.&lt;/li&gt;
  &lt;li&gt;기존 traditional interpolation algorithm
    &lt;ul&gt;
      &lt;li&gt;시각적으로는 성능이 좋아보임. 하지만 성인의 brain 에 초점을 맞춤.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4478865/pdf/JMI-001-034007.pdf&quot;&gt;Interpolation-based super-resolution reconstruction: effects of slice thickness&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hindawi.com/journals/ijbi/2013/395915/&quot;&gt;Evaluation of interpolation effects on upsampling and accuracy of cost functions-based optimized automatic image registration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Frame interpolation 방법과 같이 적용 가능.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=8110374&quot;&gt;Slice Interpolation in MRI Using a Decomposition-reconstruction Method&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Super-resolution 문제로 적용할 수도 있음.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5466111&quot;&gt;Image super-resolution via sparse representation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CNN, GAN 이 발전하면서 super-resolution 이 탄력을 받음.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-319-67564-0_12&quot;&gt;Context-Sensitive Super-Resolution for Fast Fetal Magnetic Resonance Imaging&lt;/a&gt;&lt;/strong&gt;]&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8417964&quot;&gt;Deep Generative Adversarial Neural Networks for Compressive Sensing MRI&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이전에 성인의 Thick MRI를 Thin MRI 로 reconstruction 하는 3D-SRGAN 제안했으나 axial plane만 고려했음. &lt;strong&gt;[&lt;a href=&quot;https://link.springer.com/chapter/10.1007%2F978-3-319-67389-9_38&quot;&gt;Reconstruction of Thin-Slice Medical Images Using Generative Adversarial Network&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Deep Learning 이 reconstruction performance 뿐 아니라 reconstruction time 감소에도 매우 효과적인걸 보임.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proposed-method&quot;&gt;Proposed Method&lt;/h2&gt;

&lt;h3 id=&quot;a-overview&quot;&gt;A. Overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CNN은 기존에도 super-resolution에서 많이 사용됨.&lt;/li&gt;
  &lt;li&gt;하지만 최근까지 제안된 Network는 대부분 2D image에 대한 upscaling.&lt;/li&gt;
  &lt;li&gt;몇몇 Network는 3D image로 확장했지만 그렇게 효과를 보지 못했음.&lt;/li&gt;
  &lt;li&gt;이 논문의 Flow
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig01.PNG&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig02.PNG&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-network-architecture&quot;&gt;B. Network Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;First stage는 3D-Y-Net-GAN 으로 Thick MRI를 Thin MRI로 생성 후 3D-DenseU-Net으로 recalibration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3d-y-net-gan&quot;&gt;3D-Y-Net-GAN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Input : Axial, Sagittal Thick MRI&lt;/li&gt;
  &lt;li&gt;Output : Thin MRI&lt;/li&gt;
  &lt;li&gt;r : Upscaling Factor ( r = 8 일 경우의 예시 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig03.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Feature Extraction Branches
    &lt;ul&gt;
      &lt;li&gt;각 input에 대한 feature 추출.&lt;/li&gt;
      &lt;li&gt;Maxpooling layer에서 [1, 2, 1], [2, 1, 1]의 다른 strides factor 적용.&lt;/li&gt;
      &lt;li&gt;3D convolutional layer 는 Convolution + Batch Normalization + Swish 로 구성.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1710.05941.pdf&quot;&gt;Swish&lt;/a&gt;는 Activation 의 종류로 ReLU로 인해 생기는 Dead neuron을 극복할 수 있음. &lt;strong&gt;-&amp;gt; 근데 굳이 왜 swish일까…&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;layers 를 거친 후 shape 의 변화
        &lt;ul&gt;
          &lt;li&gt;Axial : [H, W, S, 1] -&amp;gt; [H/2, W/2, S, 32]&lt;/li&gt;
          &lt;li&gt;Sagittal : [H, W, r*S, 1] -&amp;gt; [H/2, W/2, S, 32]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Axial과 Sagittal의 shape이 다르기 때문에 Sagittal 에 대해서 preprocessing으로 3개의 3d convolution layer 적용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Feature Fusion Branch
    &lt;ul&gt;
      &lt;li&gt;두 feature를 channel 방향으로 Concatanation.&lt;/li&gt;
      &lt;li&gt;W 방향으로 Upsampling 후 H 방향으로 Downsampling feature 를 Concatanation.&lt;/li&gt;
      &lt;li&gt;H 방향으로 Upsampling 후 첫번째 Block의 Feature map을 Concatanation&lt;/li&gt;
      &lt;li&gt;U-Net 에서 아이디어를 얻었고 structual alignment, gradient-vanishing 등을 완화.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reconstruction Branch
    &lt;ul&gt;
      &lt;li&gt;Figure 3 (b) 와 같은 구조.&lt;/li&gt;
      &lt;li&gt;Upsampling layer 3개를 연속으로 붙여서 8배 확장하는 구조 대신에 Multipath upscaling strategy 적용. &lt;strong&gt;-&amp;gt; Artifact 완화 효과…?&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discriminator
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig04.PNG&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Axial Image, Saggital Image, Combination Image 가 Real Pair인지 Fake Pair인지 감별.&lt;/li&gt;
      &lt;li&gt;Input : ($I^A$, $I^Y$, $I^S$), ($I^A$, $I^{GT}$, $I^S$)&lt;/li&gt;
      &lt;li&gt;Output : Real, Fake&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3d-denseu-net&quot;&gt;3D-DenseU-Net&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig05.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체적인 구조는 U-Net이지만 2개의 Enhanced residual block 을 적용하여 detail recalibration.&lt;/li&gt;
  &lt;li&gt;Input :  $I^Y$, $I^S$, $I^{YA}$ &lt;strong&gt;-&amp;gt; 어떻게 3개가 input으로…?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Output : Thin MR Image&lt;/li&gt;
  &lt;li&gt;$I^A$ 를 $I^Y$ 의 해당 위치에 insertion 하여 $I^{YA}$ 생성. -&amp;gt; 아직 이해 X..
    &lt;ul&gt;
      &lt;li&gt;Axial Information 을 이용하여 정확한 axial 을 만들기 위해…&lt;/li&gt;
      &lt;li&gt;$I^S$ 를 $I^Y$ 에 insertion하게 되면 Sagittal 에 대한 information 이 과해지기 때문에 Reconstrtion Axial Image의 Quality 가 안좋아 질 것!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;End-to-End 가 아니라 각각 따로따로 학습. &lt;strong&gt;-&amp;gt; Faster RCNN 과 같은 방식으로 할런지….?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;loss-function&quot;&gt;Loss Function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;$G$ 는 generator 라는 의미.&lt;/li&gt;
  &lt;li&gt;Self-Adaptive Charbonnier Loss
    &lt;ul&gt;
      &lt;li&gt;일반적으로 많이 사용되는 $\ell2$ 전반적으로 Smoothing 하게 만들어지고 $\ell1$ 은 GT와 Prediction 의 차이로 indiscriminate 하게 학습.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1704.03915.pdf&quot;&gt;Deep Laplacian Pyramid Networks for Fast and Accurate Super-Resolution&lt;/a&gt;에 따르면 &lt;strong&gt;Charbonnier loss&lt;/strong&gt;(미분가능한 $\ell1$의 분산)가 $\ell1$, $\ell2$ 보다 성능이 뛰어남.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1706.03142.pdf&quot;&gt;Deep Learning for Isotropic Super-Resolution from Non-Isotropic 3D Electron Microscopy&lt;/a&gt; 에 따르면 &lt;strong&gt;Cubic-weighted mean square error&lt;/strong&gt; 가 Generated 영상과 Ground truth 간의 차이가 큰 “어려운” 부분의 성능을 강조.&lt;/li&gt;
      &lt;li&gt;다음과 같은 Loss 제안.&lt;/li&gt;
      &lt;li&gt;$\epsilon$ 은 default로 $10^{-6}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^G_{SC} = \frac{1}{rLWH}\sum_{x,y,z=1,1,1}^{L,W,rH}\sqrt{(I^{GT}_{x,y,z}-I^Y_{z,y,z})^2+\epsilon}\cdot\bigg(\frac{1}{2}+\frac{(I^{GT}_{x,y,z}-I^Y_{z,y,z})^2}{2max((I^{GT}-I^Y)^2)}\bigg)&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;3-D Gradient Correction Loss
    &lt;ul&gt;
      &lt;li&gt;Charbonnier Loss는 Pixelwise difference에 대한 Loss, Gradient에 대한 손실을 줄 수 있음.&lt;/li&gt;
      &lt;li&gt;다음과 같이 각 axis에 대한 Gradient 를 이용하여 Loss 제안.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^G_{GC} = \mathbb{E}[(\nabla_{x}I^{GT}_{x,y,z} - \nabla_{x}I^Y_{x,y,z})^2] \\  + \mathbb{E}[(\nabla_{y}I^{GT}_{x,y,z} - \nabla_{y}I^Y_{x,y,z})]^2\\ + \mathbb{E}[(\nabla_{z}I^{GT}_{x,y,z} - \nabla_{z}I^Y_{x,y,z})^2]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Adversarial Loss
    &lt;ul&gt;
      &lt;li&gt;LSGAN Loss 사용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^D=\frac{1}{2}\mathbb{E}[(D(I^{GT}, I^A, I^S)-1)^2+D(I^Y, I^A, I^S)^2]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^G_{AD}=\mathbb{E}[(D(I^Y, I^A, I^S)-1)^2]&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;$\ell_2$ Weight Regularization Loss
    &lt;ul&gt;
      &lt;li&gt;(Loss는 아니지만…)&lt;/li&gt;
      &lt;li&gt;Overfitting을 방지하기 위해 사용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L^G_{WR} = \sum\Vert W_G\Vert^2_2&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;3D-Y-Net-GAN Loss
    &lt;ul&gt;
      &lt;li&gt;$L_G = L^G_{SC} + \lambda_1L^G_{GC} + \lambda_2L^G_{AD} + \lambda_3L^G_{WR}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3D-DenseU-Net Loss
    &lt;ul&gt;
      &lt;li&gt;$L = L_{SC} + \lambda_1L_{GC} + \lambda_3L_{WR}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;experimental-result&quot;&gt;Experimental Result&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Multiplanar 의 효율성을 검증하기 위해 다음과 같이 세 가지 경우로 나눔.
    &lt;ul&gt;
      &lt;li&gt;1) Axial, Sagittal 둘 다 이용.&lt;/li&gt;
      &lt;li&gt;2) Axial 만 이용.&lt;/li&gt;
      &lt;li&gt;3) Saigittal 만 이용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Loss function을 검증하기 위해 네 가지 경우로 나눔.
    &lt;ul&gt;
      &lt;li&gt;1) $\ell1norm + L_{GC} + L_{AD} + L_{WR}$ (pixelwise loss를 $\ell1norm$으로 대체.)&lt;/li&gt;
      &lt;li&gt;2) $L_{SC} + L_{GC} + L_{WR}$&lt;/li&gt;
      &lt;li&gt;3) $L_{SC} + L_{AD} + L_{WR}$&lt;/li&gt;
      &lt;li&gt;4) $L_{SC} + L_{GC} + L_{AD} + L_{WR}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evalutaion Method 로는 아래와 같이 네 가지 기법과 자신들의 Network
    &lt;ul&gt;
      &lt;li&gt;1) &lt;a href=&quot;https://ieeexplore.ieee.org/document/1163711&quot;&gt;Bicubic interpolation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2) &lt;a href=&quot;https://ieeexplore.ieee.org/document/5466111&quot;&gt;Sparse representation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;3) &lt;a href=&quot;https://arxiv.org/abs/1706.03142&quot;&gt;3D-SRU-Net&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;4) 3D-Y-Net-GAN&lt;/li&gt;
      &lt;li&gt;5) 3D-Y-Net-GAN + 3D-DenseU-Net&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Metrics으로는 다음 세 가지 사용.
    &lt;ul&gt;
      &lt;li&gt;PSNR(Peak Signal-to-Noise Ratio)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{alignedat}{2}
MAX_I = 255\\
PSNR = 20\cdot\log_{10}\Bigg(\frac{MAX_I}{\sqrt{\frac{1}{rLWH}\sum_{x, y, z}(I^R_{x,y,z}-I^{GT}_{x,y,z})^2}}\Bigg)
\end{alignedat}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;SSIM(Structural SIMilarity)&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{alignedat}{2}
L : 255(\text{dynamic range})\\
\mu : \text{Variance}\\
\mu_{ab} : \text{Covariance}\\
c_1 = (k_1L)^2\\
c_2 = (k_2L)^2\\
SSIM=\frac{(2\mu_a\mu_b+c_1)(2\sigma_{ab}+c_2)}{(\mu_a^2+\mu_b^2+c_1)(\sigma_a^2+\sigma_b^2+c_2)}
\end{alignedat}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;NMI(Normalized Mutual Information)&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{alignedat}{2}
H(X) = -\sum_{x_i}\in{X}p(x_i)\log{p(x_i)} \\
H(X, Y) = -\sum_{y_i\in{Y}} \sum_{x_i\in{X}}p(x_i, y_i)\log{p(x_i, y_i)}\\
NMI(X, Y) = 2\frac{H(X) + H(Y) - H(X, Y)}{H(X)+H(Y)}
\end{alignedat}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;pixel 값을 [-1, 1]로 clipping -&amp;gt; 다시 8-bit gray scale로 변환.&lt;/li&gt;
  &lt;li&gt;Generated MR images 와 Ground truth가 비슷할 수록 높은 값을 가짐.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-data-and-preprocessing&quot;&gt;A. Data and Preprocessing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;총 154 samples의 2~5세 유아 Axial, Sagittal Thick MRI, Axial Thin MRI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab01.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Table 1. 과 같은 parameter 사용.&lt;/li&gt;
  &lt;li&gt;Dataset 분할
    &lt;ul&gt;
      &lt;li&gt;Cross Validation Dataset : 40 samples&lt;/li&gt;
      &lt;li&gt;Test 1 Dataset : 65 samples&lt;/li&gt;
      &lt;li&gt;Test 2 Dataset : 49 samples&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Preprocessing
    &lt;ul&gt;
      &lt;li&gt;각 영상별로 다른 parameter를 가지고 있고 intensities 도 다양하기 때문에 spatial misalignment, intensity imblance를 발견.&lt;/li&gt;
      &lt;li&gt;Registration을 위해 SPM12 를 이용하여 unified spatial normalization 수행.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;DICOM to NIfTI&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;Segment gray matter, white matter, cerebrospinal fluid, skull, scalp, and air mask.&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;Nonlinear deformation field&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;ICBM Asian brain template in affine regularization&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Grayscale Normalization
        &lt;ul&gt;
          &lt;li&gt;MRI 는 16 bit..&lt;/li&gt;
          &lt;li&gt;단순 linear transformation 으로 [-1, 1]로 mapping.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Histogram Matching
        &lt;ul&gt;
          &lt;li&gt;고정된 샘플을 reference로 histogram matching 적용.&lt;/li&gt;
          &lt;li&gt;histogram imbalance 제거.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Augmentation
    &lt;ul&gt;
      &lt;li&gt;Radial Transformation
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://arxiv.org/pdf/1708.04347.pdf&quot;&gt;Image Augmentation using Radial Transform for Training Deep Neural Networks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Mirror Reflection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;b-experimental-settings&quot;&gt;B. Experimental Settings&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;5-fold cross-validation 적용.&lt;/li&gt;
  &lt;li&gt;35 개중 랜덤으로 28:7로 training:validation . &lt;strong&gt;-&amp;gt; 앞에선 40개라더니..?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Training 3D-Y-Net-GAN
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 16&lt;/li&gt;
      &lt;li&gt;Epochs : 200&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1412.6980.pdf&quot;&gt;Adam Optimizer Parameter&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Learning rate schedule
            &lt;ul&gt;
              &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
              &lt;li&gt;Decay Step : 252&lt;/li&gt;
              &lt;li&gt;Decay rate : 0.989&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$\lambda_1, \lambda_2, \lambda_3$ : 0.2, 0.02, 0.1&lt;/li&gt;
      &lt;li&gt;He initializer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Training 3D-DenseU-Net
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 12&lt;/li&gt;
      &lt;li&gt;Epochs : 300&lt;/li&gt;
      &lt;li&gt;Adam Optimizer Parameter
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Learning rate schedule
            &lt;ul&gt;
              &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
              &lt;li&gt;Decay Step : 373&lt;/li&gt;
              &lt;li&gt;Decay rate : 0.989&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$\lambda_1, \lambda_3$ : 1, 0.001&lt;/li&gt;
      &lt;li&gt;He initializer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SR Parameter
    &lt;ul&gt;
      &lt;li&gt;Dictionary size = 512&lt;/li&gt;
      &lt;li&gt;Patch number = 100,000&lt;/li&gt;
      &lt;li&gt;Patch size = 13 x 13&lt;/li&gt;
      &lt;li&gt;Sparsity Regularization = 0.15&lt;/li&gt;
      &lt;li&gt;Overlap = 12.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Training 3D-SRU-Net
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 32&lt;/li&gt;
      &lt;li&gt;Epochs : 300&lt;/li&gt;
      &lt;li&gt;Adam Optimizer Parameter
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c-ablation-experiment-on-input-data&quot;&gt;C. Ablation Experiment On Input Data&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Input을 변경하면서 실험 진행. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig06.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab02.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Axial 과 Sagittal 을 같이 사용했을 때가 좀 더 세부적인 구조, 적은 왜곡을 보임.
    &lt;ul&gt;
      &lt;li&gt;두 축의 영상이 서로 조합하여 reconstruction task를 향상.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Quantitive evaluation 에서도 더 높은 지표를 산출.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;d-ablation-experiment-on-loss-function&quot;&gt;D. Ablation Experiment On Loss Function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Loss를 변경하면서 실험 진행.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig07.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab03.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Self-Adaptive Charbonnier Loss에 비해 $\ell1$ norm 이 흐린 영상을 생성.&lt;/li&gt;
  &lt;li&gt;Without Gradient Correction Loss
    &lt;ul&gt;
      &lt;li&gt;덜 선명한 영상을 생성.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Without Adversarial Loss
    &lt;ul&gt;
      &lt;li&gt;덜 realistic 영상을 생성. &lt;strong&gt;-&amp;gt; ?????그냥 쓴 말인가..&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Table3 …지표 좀 이상..&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;e-comparison-with-other--methods&quot;&gt;E. Comparison With Other  Methods&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;다른 Method들과 비교.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig08.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab04.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;제안한 method로 생성된 image가 가장 Realistic하고 Ground truth 와 가장 비슷하다고 함.&lt;/li&gt;
  &lt;li&gt;대부분 Quantitative evaluation 에서 제안한 method가 다른 것들을 다 뛰어넘음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;제안한 Method 에선 Data preprocessing이 매우 중요하다……&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2019/07/05/Thin/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2019/07/05/Thin/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>(개인적으로) 무.조.건 설치하는 Anaconda 패키지</title>
        <description>&lt;p&gt;이번 포스팅은 제가 많이 쓰는 패키지들에 대해서 적어보려고 합니다. &lt;br /&gt;
추후에 포맷하고 다시 세팅할 수도 있으니까….&lt;br /&gt;
저는 Anaconda가 아닌 &lt;strong&gt;Miniconda&lt;/strong&gt;를 사용하기 때문에 어지간하면 하나 하나 설치를 해줘야해요. 
물론 머리로는 기억하고 있지만 커맨드 쓰기가 귀찮으니…적어놓으려고 합니다!&lt;br /&gt;
각각 설명은…생략할거에요. 보시는 분들 구글링 실력을 믿습니다.&lt;/p&gt;

&lt;h4 id=&quot;scientific-uses&quot;&gt;Scientific uses&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;numpy, scipy, pandas&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install numpy scipy pandas&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visualization&quot;&gt;Visualization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;matplotlib, seaborn&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install matplotlib seaborn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;image-processing&quot;&gt;Image Processing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pillow, scikit-image, opencv&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install pillow scikit-image opencv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ml--dl&quot;&gt;ML &amp;amp; DL&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;scikit-learn, tensorflow, pytorch (keras도 썼었는데…이번에 뺐어요..)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install scikit-learn tensorflow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c pytorch pytorch torchvision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;medical-image-processing&quot;&gt;Medical Image Processing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pydicom, nibabel, simpleitk&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c conda-forge pydicom nibabel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c SimpleITK SimpleITK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools&quot;&gt;Tools&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;tqdm, jupyter, jupyter-lab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install  tqdm jupyter jupyterlab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이….정도네요!&lt;br /&gt;
솔직히 제가 이렇게 포스팅을 하는 이유는….&lt;br /&gt;
이미 제 노트북을…한번 갈아엎었습니다…&lt;br /&gt;
conda 를 4.7.5 로 올리는 순간…모든게 날아갔거든요.&lt;br /&gt;
하…얼른 세팅하러 갑니다..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; conda 를 조심하세요…&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/06/30/conda_package/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/06/30/conda_package/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Seaborn Tutorial Part 1-A</title>
        <description>&lt;h1 id=&quot;index&quot;&gt;Index&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-visualizing-statistical-relationships&quot;&gt;A. Visualizing statistical relationships&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#relating-variables-with-scatter-plots&quot;&gt;Relating variables with scatter plots&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#emphasizing-continuity-with-line-plots&quot;&gt;Emphasizing continuity with line plots&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#aggregation-and-representing-uncertainty&quot;&gt;Aggregation and representing uncertainty&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#plotting-subsets-of-data-with-semantic-mappings&quot;&gt;Plotting subsets of data with semantic mappings&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#plotting-with-date-data&quot;&gt;Plotting with date data&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#showing-multiple-relationships-with-facets&quot;&gt;Showing multiple relationships with facets&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-visualizing-statistical-relationships&quot;&gt;A. Visualizing statistical relationships&lt;/h2&gt;
&lt;p&gt;Relationships 시각화에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 이라는걸 주로 사용합니다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt;라는 옵션으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;scatter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt; 을 그릴 수 있습니다.&lt;br /&gt;
일단! 다음과 같이 기본적인 패키지를 import 하고 진행하겠습니다!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;darkgrid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 추후 Part 3 에서 다룰 내용!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;relating-variables-with-scatter-plots&quot;&gt;Relating variables with scatter plots&lt;/h3&gt;
&lt;p&gt;Scatter plot을 해볼겁니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;scatterplot()&lt;/code&gt;을 사용해도 되지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt;을 사용해서 그려보겠습니다.&lt;br /&gt;
가장 먼저 … 사용할 데이터를 읽어오겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tips&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위를 실행하면 다음 사진과 같이 출력이 나옵니다.&lt;br /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/001.png&quot; /&gt;&lt;br /&gt;
정확히 무슨 데이터인지는 모르겠지만… 어떤 가게의 가계부…? 같습니다.
총 금액, 팁, 성별, 흡연 여부, 요일, 시간대, 크기(…?) 등의 카테고리가 있네요.&lt;br /&gt;
그럼 한번 plot 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/002.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 figure가 나오네요!&lt;br /&gt;
x, y, data에 들어간 의미를 알아볼까요?
&lt;code class=&quot;highlighter-rouge&quot;&gt;x=&lt;/code&gt; 는 x축을 어떤 데이터로 할지 정하는 부분입니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;y=&lt;/code&gt; 는 당연히 y축이겠죠?
&lt;code class=&quot;highlighter-rouge&quot;&gt;data=&lt;/code&gt; 는 어떤 data를 plot에 사용할지 적는 부분입니다.&lt;br /&gt;
그래서 plot하는 코드를 풀어서 얘기해보자면&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;tips&lt;/code&gt;라는 DataFrame에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;total_bill&lt;/code&gt;을 x축으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;tip&lt;/code&gt;을 y축으로 골라서 scatter plot 하라는 얘기입니다.&lt;br /&gt;
좀 더 해볼까요?&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/003.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x, y, data&lt;/code&gt;는 위랑 다를게 없는데… &lt;code class=&quot;highlighter-rouge&quot;&gt;hue&lt;/code&gt;라는 옵션이 추가가 되었습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;hue='smoke'&lt;/code&gt;라고 흡연 여부에 대해 색상으로 표시를 해줍니다!&lt;/p&gt;

&lt;p&gt;하나 또 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/004.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; 옵션이 추가되었어요!
&lt;code class=&quot;highlighter-rouge&quot;&gt;style='smoker'&lt;/code&gt;를 추가해주면서 plot 스타일이 추가되었네요!&lt;br /&gt;
다음 사진은 &lt;code class=&quot;highlighter-rouge&quot;&gt;style=&quot;time&quot;&lt;/code&gt; 옵션을 준거에요!&lt;br /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/005.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;색으로는 흡연여부&lt;/strong&gt;를 표시하고 &lt;strong&gt;plot 스타일로는 시간대&lt;/strong&gt;를 표시해주네요!&lt;/p&gt;

&lt;p&gt;자, &lt;code class=&quot;highlighter-rouge&quot;&gt;hue&lt;/code&gt; 옵션의 또 다른 예시입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/006.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 예시에선 &lt;strong&gt;Yes&lt;/strong&gt; or &lt;strong&gt;No&lt;/strong&gt; 였죠.&lt;br /&gt;
이번 수치에 대해 색별로 의미를 줬습니다!&lt;br /&gt;
다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;pallette&lt;/code&gt; 옵션을 줘서 색을 바꿀 수도 있어요!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pallette&lt;/code&gt;에 대한 자세한건 &lt;strong&gt;Part 3&lt;/strong&gt; 에서 다루겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch:r=-.5,l=.75&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/007.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오…scatter plot의 끝이 보여요…&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; 옵션입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/008.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size=&quot;size&quot;&lt;/code&gt;라고 옵션을 줬어요!&lt;br /&gt;
plot의 크기에 따라 의미가 나뉘어졌습니다!&lt;br /&gt;
다음고 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;sizes&lt;/code&gt;를 이용해서 크기 범위를 정해줄수도 있네요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/009.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;emphasizing-continuity-with-line-plots&quot;&gt;Emphasizing continuity with line plots&lt;/h3&gt;

&lt;p&gt;이 파트는 연속적인 값을 가진 데이터에 대한 plot입니다.&lt;br /&gt;
다음과 같이 DataFrame을 하나 만들어 봅시다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/010.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;결과는 사진과 다를 수 있어요!&lt;br /&gt;
time, value 를 가지고 있다는 거에 초점을 맞추시면 됩니다!&lt;br /&gt;
일별로 뭔가 값이 들어가 있네요.&lt;br /&gt;
이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 을 이용하여 그려보겠습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt; 옵션에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;line&quot;&lt;/code&gt; 라고 주면 됩니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;autofmt_xdata()&lt;/code&gt; 라는건 이름에서 유추할 수 있듯이 x 축 레이블을 데이터에 맞게 format을 자동으로 맞춰주는거에요!&lt;br /&gt;
지금은 x 축이 날짜니까 날짜에 대해선 x 축 레이블을 살짝쿵 기울인거에요!&lt;br /&gt;
이걸 쓰지 않으면 날짜가 겹쳐질거에요…(한번 해보세요..)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g = sns.relplot(x=&quot;time&quot;, y=&quot;value&quot;, kind=&quot;line&quot;, data=df)
g.fig.autofmt_xdate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/011.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 예시는 x 축이 연속적이지만 시계열 데이터였습니다!&lt;br /&gt;
만약 연속적이지만 이동경로와 같이 x, y 축 좌표만 가진 데이터라면?&lt;br /&gt;
예시를 들어볼게요! 다음과 같이 x, y 에 대한 데이터를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/012.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;이런 위치에 대한 데이터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort = False&lt;/code&gt; 옵션을 줘야합니다!&lt;br /&gt;
그렇지 않으면 …. x 데이터를 자동으로 sorting 해서 plot 해버립니다..&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/013.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aggregation-and-representing-uncertainty&quot;&gt;Aggregation and representing uncertainty&lt;/h4&gt;

&lt;p&gt;이 파트는 집계 및 신뢰구간 표시에 대한 설명입니다.&lt;br /&gt;
&lt;strong&gt;seaborn&lt;/strong&gt;은 기본 값으로 95% 신뢰구간을 표시해준다고 하녜요!&lt;br /&gt;
다음과 같이 데이터를 load 해줍니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/014.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;fmri data 군요! 일단 무슨 의미인지 잘 모르겠습니다!&lt;br /&gt;
각 환자별로 timepoint 를 가지고 signal을 가지는건 알겠네요..&lt;br /&gt;
이 데이터를 이용해 다음과 같이 plot을 해봅시다!&lt;br /&gt;
뭔가 선이랑 범위(?)로 보이는 불투명한 부분이 생겼습니다!&lt;br /&gt;
선은 해당 timepoint 에서 signal 의 mean 값이고 불투명한 부분은 신뢰구간을 의미합니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/015.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;“그럼…이런 데이터는 항상 신뢰구간을 같이 봐야하는가?”&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;아닙니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;(Confidence Intervals) 옵션을 바꿔주면 됩니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ci=None&lt;/code&gt; 이라고 옵션을 주고 plot을 하면 신뢰구간이 표현이 안됩니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/016.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 다른 옵션이 있습니다.&lt;br /&gt;
데이터가 매우 큰 경우! &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt; 옵션에 표준 편차를 넣어주면 각 timepoint 에서 분산을 표현해줍니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/017.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로… 이런 집계말고 정말 원본 그대로 plot 해보고 싶다면!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;estimator=None&lt;/code&gt;이라고 주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/018.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;plotting-subsets-of-data-with-semantic-mappings&quot;&gt;Plotting subsets of data with semantic mappings&lt;/h4&gt;

&lt;p&gt;이 파트에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 을 이용해서 scatter plot, line plot을 동시에 표현합니다.&lt;br /&gt;
데이터는 위 파트에서 썼던 &lt;strong&gt;fmri&lt;/strong&gt; 데이터를 사용합니다!&lt;br /&gt;
그리고 위 파트와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot(kind=&quot;line&quot;)&lt;/code&gt;을 쓰지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;hue=&quot;event&quot;&lt;/code&gt;라는 옵션을 주도록합니다!&lt;br /&gt;
한번에 scatter plot과 line plot이 표현되네요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/019.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼…&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;도 추가해보도록 하죠!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;hue=&quot;region&quot;, style=&quot;event&quot;&lt;/code&gt;라고 옵션을 줍니다! &lt;br /&gt;
점점 표현해주는게 많아지죠?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 선 스타일과 마커 옵션을 줄 수도 있어요!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dashes=False, markers=True&lt;/code&gt;를 추가해보세요!&lt;br /&gt;
점선이 모두 실선이 되었고 마커가 추가되었습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/021.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;괜히 정보가 많아지면…해석이 겁나 어려워질 수 있습니다..&lt;br /&gt;
다음과 같이 단순화하는게 좋을 때도 있습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/022.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;필요에 따라 모든 샘플 각각을 plot 해야하기도 하죠..&lt;br /&gt;
다음 예시는 &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;가 &lt;strong&gt;stim&lt;/strong&gt; 인 데이터들을 &lt;strong&gt;subject&lt;/strong&gt; 별로 plot을 합니다!&lt;br /&gt;
(저 plot이 되는 방법은 추후에 좀 더 자세히 설명을 적을게요!)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event == 'stim'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/023.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 Colormap을 조금씩 다뤄보는 구간입니다.&lt;br /&gt;
다음과 같이 데이터를 load 합니다!&lt;br /&gt;
(뭔지는 모르겠습니다…)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;align == 'dots'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/024.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;지금까지 해왔던거 처럼 plot을 해봅니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/025.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음….근데 위에 사진이 뭔가 부족하다고 느껴집니다.&lt;br /&gt;
자세히 보시면 그려지는 실선, 점선은 각각 6개인데 표현된 색상은 4개네요…&lt;br /&gt;
다음과 같이 작성하면 pallette를 custom하여 색상을 6개로 늘릴 수 있습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cubehelix_palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/026.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또는 다음과 같이 Colormap을 Normalization 할 수도 있죠!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.colors&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogNorm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cubehelix_palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue_norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/027.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아니면… 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;에 의미를 부여할 수도 있겠죠.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/028.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기선 Colormap 변경이 주요 내용이였습니다.&lt;br /&gt;
그럼 다음과 같이 Colormap도 주면서…&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;를 이용해서 의미를 부여하는 것도 가능하겠죠!?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/029.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;plotting-with-date-data&quot;&gt;Plotting with date data&lt;/h4&gt;

&lt;p&gt;이전에 날짜 혹은 시간과 연관된 데이터를 사용할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;autofmt_xdata()&lt;/code&gt;라는 부분이 있었습니다.&lt;br /&gt;
이는 x축 레이블의 format을 자동으로 맞춰주는 부분이라고 했었는데요.&lt;br /&gt;
가령 포맷을 변경해야하는 상황이 발생한다면..?&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; 문서를 참고하여 변경하셔야합니다..&lt;br /&gt;
왜냐하면 seaborn의 뼈대가 matplotlib 이니까요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2017-1-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/030.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autofmt_xdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/031.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;showing-multiple-relationships-with-facets&quot;&gt;Showing multiple relationships with facets&lt;/h3&gt;

&lt;p&gt;지금까지는 단 1개의 figure 만 plot 했습니다!&lt;br /&gt;
하지만 보통..다수의 figure가 필요하죠..&lt;br /&gt;
이번엔 그 부분에 대한 내용입니다.&lt;br /&gt;
&lt;a href=&quot;https://seaborn.pydata.org/generated/seaborn.relplot.html#seaborn.relplot&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt;&lt;/a&gt;은 &lt;a href=&quot;https://seaborn.pydata.org/generated/seaborn.FacetGrid.html#seaborn.FacetGrid&quot;&gt;FacetGrid&lt;/a&gt; 기반이기 때문에 쉽게 가능합니다.&lt;br /&gt;
“facet” 이라는 단어가 나올텐데요.&lt;br /&gt;
이는 전체 figure 하나를 facet이라고 칭합니다.
다음과 같이 데이터를 load 하고 plot 해주세요!
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;time&quot;&lt;/code&gt; 이라는 옵션을 추가함으로써 &lt;strong&gt;Lunch&lt;/strong&gt;에 대한 figure와 &lt;strong&gt;Dinner&lt;/strong&gt;에 대한 figure &lt;strong&gt;두 개&lt;/strong&gt;가 plot 됩니다!&lt;br /&gt;
여기선 1x2 facet 이라고 할 수 있어요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tips&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/032.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 다음과 같이 두 변수에 대해 figure를 나눌 수도 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;region&quot;, row=&quot;event&quot;&lt;/code&gt;라고 하면 &lt;strong&gt;행&lt;/strong&gt;은 &lt;strong&gt;“event”&lt;/strong&gt;를 기준으로 &lt;strong&gt;열&lt;/strong&gt;은 &lt;strong&gt;“region”&lt;/strong&gt;으로 총 4개가 plot 됩니다!&lt;br /&gt;
이건 2x2 facet!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/033.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fmri&lt;/strong&gt; 데이터의 경우 여러 subject가 있었습니다.&lt;br /&gt;
그 각각 subject 별로 figure를 만들고 싶을땐…?&lt;br /&gt;
다음과 같이 작성합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;subject&quot;, col_wrap=5&lt;/code&gt; 는 열을 &lt;strong&gt;subject&lt;/strong&gt;를 기준으로 5개씩 끊어서 plot 하겠다는 의미입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;는 facet의 높이(인치)를 정합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aspect&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;에 맞춰 비율을 정하구요.&lt;br /&gt;
그럼 총 14개의 figure가 plot되고 3x5 facet이 생성됩니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region == 'frontal'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/034.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Part 1의 A 내용이였습니다.&lt;br /&gt;
그럼 “어떤 내용이 부족해요!”, “이 내용 잘 모르겠어요!” 하는 부분을 남겨주시면 추가하도록 할게요!&lt;br /&gt;
감사합니다!&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/05/09/Part1A/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/05/09/Part1A/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>맥북 Atom 완벽 제거</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;오늘은 .. Atom 에디터를 &lt;strong&gt;완벽히&lt;/strong&gt; 지우는 법에 대해 간단 포스팅을 하려고 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Applications 디렉토리에서 &lt;strong&gt;Atom&lt;/strong&gt;을 지운다.&lt;/li&gt;
  &lt;li&gt;home 디렉토리에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;.atom&lt;/code&gt; 디렉토리를 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/atom&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/apm&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Preferences/com.github.atom.plist&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Preferences/com.github.atom.helper.plist&lt;/code&gt; 을 지운다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;끝입니다..&lt;/p&gt;

&lt;p&gt;Atom 에 대한 모~~든걸 지운거에요!&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2019/04/14/macbook_auto_start/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2019/04/14/macbook_auto_start/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>YOLO 리뷰</title>
        <description>&lt;h1 id=&quot;you-only-look-once-unified-real-time-object-detection&quot;&gt;You Only Look Once: Unified, Real-Time, Object detection&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;편의상 bounding box -&amp;gt; bbox&lt;/p&gt;
  &lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Object detection을 bboxes, class probabilities regression 문제로 접근.&lt;/li&gt;
  &lt;li&gt;Single Neural Network 로 bboxes와 class probabilities 둘 다 예측.&lt;/li&gt;
  &lt;li&gt;Localization Error가 다소 높지만 background error가 낮음.&lt;/li&gt;
  &lt;li&gt;End-to-End, Extremely fast&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Current Detection 시스템
    &lt;ul&gt;
      &lt;li&gt;DPM : Sliding Window 방식&lt;/li&gt;
      &lt;li&gt;R-CNN 계열 : potential bboxes 추출 -&amp;gt; image 에서 bboxes 부분 다시 classify -&amp;gt; Post-processing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slow, Hard to optimize(각 요소별로 따로따로 학습을 해야함. RPN -&amp;gt; Classifier -&amp;gt; RPN -&amp;gt; …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig01.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;복잡하지 않은 pipeline과 빠른 inferenc time.
    &lt;ul&gt;
      &lt;li&gt;45 fps on a Titan X .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지 전체를 이용한 prediction
    &lt;ul&gt;
      &lt;li&gt;Fast R-CNN 보다 적은 background error&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Object의 general한 representations 학습.
    &lt;ul&gt;
      &lt;li&gt;natural image로 학습하고 art works로 test 했을 때 기존의 DPM 이나 R-CNN 보다 성능이 좋았다.&lt;/li&gt;
      &lt;li&gt;새로운 도메인이나 뭔가 모를 입력에 대해 일반화 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-unfied-detection&quot;&gt;2. Unfied Detection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Single Neural Network로 통합.&lt;/li&gt;
  &lt;li&gt;이미지 전체를 이용해서 각각의 bbox 예측.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;입력 이미지를 S x S grid로 나눔.
    &lt;ul&gt;
      &lt;li&gt;Feature map이 S x S 라고 이해하면 됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 grid cell은 B개의 bbox의 정보(x, y, w, h, confidence score), 해당 grid cell의 Class probabilities 정보를 가짐.
    &lt;ul&gt;
      &lt;li&gt;bbox의 정보
        &lt;ul&gt;
          &lt;li&gt;x, y : bbox의 center 좌표&lt;/li&gt;
          &lt;li&gt;w, h : 이미지 크기에 대비한 상대적인 값.&lt;/li&gt;
          &lt;li&gt;confidence score : bbox가 object를 가졌는지 box가 얼마나 정확히 예측했는지에 대한 score&lt;/li&gt;
          &lt;li&gt;Confidence Score는 다음과 같이 정의.
&lt;script type=&quot;math/tex&quot;&gt;{Confidence\; Score}= Pr(Object) * IOU^{truth}_{pred}&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;No object의 경우
            &lt;ul&gt;
              &lt;li&gt;Confidence Score는 0 이어야함.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Confidence Score가 IOU와 같아지길 원함.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Class Probabilities 정보
        &lt;ul&gt;
          &lt;li&gt;C개의 class에 대한 conditional class probabilities, $Pr(Class_i \mid Object)$&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Test 시에는 Conditional class probabilities와 individual box confidence score를 곱했다고 함.&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;Pr(Class_i|Object) =  Pr(Object) * IOU^{truth}_{pred} = Pr(Class_i) * IOU^{truth}_{pred}&lt;/script&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;bbox 별로 class confidence score를 알 수 있음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PASCAL VOC 로 평가. S = 7, B = 2, C = 20&lt;/li&gt;
  &lt;li&gt;최종 출력은  7 x 7 x 30 의 tensor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-design&quot;&gt;2.1 Design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;24개의 Convolution layer, 2개의 Fully Connected layer.&lt;/li&gt;
  &lt;li&gt;GoogLeNet의 inception 모듈 대신에 &lt;span style=&quot;color:skyblue&quot;&gt;1 x 1 Convolution layer를 이용하여 reduction.&lt;/span&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig03_1.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Tiny model은 9개의 Convolution layer, 2개의 Fully Connected layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-training&quot;&gt;2.2 Training&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;앞 단의 20개의 Convolution layer(Feature Extractor)를 ImageNet 1000-class competition 데이터(224 x 224)로 Pretrain.&lt;/li&gt;
  &lt;li&gt;20번째 Convolution layer 뒤에 Average Pooling, Fully Connected Layer.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ImageNet 2012 validation set으로 top-5 accuracy 88% 정도..
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig03_2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pretrain 후 Detector 부분 추가 후 입력 크기를 448 x 448 로 높여서 학습 진행.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Bounding Box의 width, height 값은 이미지의 width, height로 normalize 하여 0 ~ 1 사이 값을 같도록 함.&lt;/li&gt;
  &lt;li&gt;Bounding Box의 x, y 값은 특정 grid cell의 left top으로부터 offset 값. 0 ~ 1 사이 값을 같도록 함.&lt;/li&gt;
  &lt;li&gt;마지막 layer는 linear activation function 사용.&lt;/li&gt;
  &lt;li&gt;다른 layer는 leaky ReLU 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\phi(x) =\left\{\begin{array}{lcl}x, &amp; if\;x &gt; 0\\ {0.1}x, &amp; otherwise\end{array} \right. %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Optimization이 쉬운 Sum-Squared Error 를 사용.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지의 대부분 grid cell이 object 를 가지고 있지 않기 때문에 Confidence Score가 0 에 수렴.&lt;/li&gt;
  &lt;li&gt;이 상황에선 object를 가지고 있는 grid cell의 gradient를 압도할 수 있음.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이를 해결하기 위해 Bbox coordinate loss와 No object의 confidence loss 에 대해 weight 를 부여.&lt;br /&gt;
$\lambda_{coord} = 5$ and $\lambda_{noobj} = 0.5$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Sum-Squared Error는 large boxes와 small boxes 를 동일하게 평가.&lt;/li&gt;
  &lt;li&gt;large boxes 에 대해서 중요성을 반영하기 위해 width, height 는 square root 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{coord}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(x_i-\hat{x}_i)^2 + (y_i-\hat{y}_i)^2 \\
+ \lambda_{coord}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(\sqrt{w_i}-\sqrt{\hat{w}_i})^2 + (\sqrt{h_i}-\sqrt{\hat{h}_i})^2 \\
+ \sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(C_i - \hat{C}_i)^2 \\
+ \lambda_{noobj}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{noobj}_{ij}(C_i - \hat{C}_i)^2 \\
+ \sum^{S^2}_{i=0}\mathbb{I}^{obj}_{i}\sum^B_{c\in{classes}}(p_i(c) - \hat{p}_i(c))^2&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;$\mathbb{I}^{obj}_{i}$ : Object가 존재하는 Grid Cell i.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$\mathbb{I}^{obj}_{ij}$ : Object가 존재하는 Grid Cell i의 Bounding Box j.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Train 관련 Parameter
    &lt;ul&gt;
      &lt;li&gt;Batch Szie : 64&lt;/li&gt;
      &lt;li&gt;Momentum : 0.9&lt;/li&gt;
      &lt;li&gt;Decay : 0.0005&lt;/li&gt;
      &lt;li&gt;Learning rate
        &lt;ul&gt;
          &lt;li&gt;$10^{-3}$ 부터 $10^{-2}$ 까지 천천히 증가.&lt;/li&gt;
          &lt;li&gt;$10^{-2}$ 로 75 epochs 학습.&lt;/li&gt;
          &lt;li&gt;$10^{-3}$ 로 줄여서 30 epochs 학습.&lt;/li&gt;
          &lt;li&gt;$10^{-4}$ 로 줄여서 30 epochs 학습.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Dropout : 0.5&lt;/li&gt;
      &lt;li&gt;Data Augmentation
        &lt;ul&gt;
          &lt;li&gt;Random Scaling, Translation of up to 20% of the original image size.&lt;/li&gt;
          &lt;li&gt;Random adjustment exposure and saturation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-inference&quot;&gt;2.3 Inference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Large Object 나 여러 grid cell에 걸쳐있는 object는 여러 셀에 predict 될 수 있음.&lt;/li&gt;
  &lt;li&gt;Non-maximal suppression 사용하여 해결.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-limitations-of-yolo&quot;&gt;2.4 Limitations of YOLO&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각 Grid Cell은 하나의 클래스만 가질 수 있기 때문에 Grid Cell 하나에 작은 object가 여러 개 있을때 제대로 예측하지 못할 수 있다.&lt;/li&gt;
  &lt;li&gt;예상치 못한 aspect ratio나 configuration을 가진 객체를 일반화 하는데 어려움.&lt;/li&gt;
  &lt;li&gt;Large box와 Small box를 동일하게 처리.&lt;/li&gt;
  &lt;li&gt;Large box의 small error보다 Small box의 small error가 IOU에 훨씬 큰 영향을 끼침.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-comparison-to-other-detection-systems&quot;&gt;3. Comparison to Other Detection Systems&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;생략&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-experiments&quot;&gt;4. Experiments&lt;/h2&gt;

&lt;h3 id=&quot;41-comparison-to-other-realtime-systems&quot;&gt;4.1. Comparison to Other RealTime Systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fast Yolo는 가장 빠른 속도를 보여줌.&lt;/li&gt;
  &lt;li&gt;YOLO 는 real-time 성능을 보여주면서 mAP도 뛰어난걸 확인할 수 있음.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_1.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-voc-2007-error-analysis&quot;&gt;4.2. VOC 2007 Error Analysis&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Object Localization은 Fast R-CNN이 더 뛰어남.&lt;/li&gt;
  &lt;li&gt;But, Background Error(False Positive)가 훨씬 높음.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_2.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-combining-fast-rcnn-and-yolo&quot;&gt;4.3. Combining Fast RCNN and YOLO&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fast R-CNN과 YOLO를 앙상블 한 모델이 성능이 가장 좋음. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_3.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;44-voc-2012-results&quot;&gt;4.4. VOC 2012 Results&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_4.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;45-generalizability&quot;&gt;4.5 Generalizability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;새로운 도메인, 예상치 못한 입력이 들어왔을때 일반화 성능이 뛰어남.&lt;/li&gt;
  &lt;li&gt;Picasso Dataset 과 People-Art Dataset을 이용하여 다른 모델들과 일반화 성능 비교.&lt;/li&gt;
  &lt;li&gt;YOLO가 가장 성능이 좋은것을 보여줌. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig05_1.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig05_2.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2019/03/29/YOLO/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2019/03/29/YOLO/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>자주 사용하는 Docker Command 정리</title>
        <description>&lt;p&gt;service nvidia-docker start (sudo 권한으로) : nvidia docker 서비스 시작.&lt;/p&gt;

&lt;p&gt;docker -i -t -rm -p 호스트포트:도커포트 -v 호스트경로:도커경로 IMAGE_NAME:tag bash : IMAGE_NAME 컨테이너를 실행.&lt;/p&gt;

&lt;p&gt;docker rm NAME : Docker 프로세스 제거&lt;/p&gt;

&lt;p&gt;docker rmi IMAGE_NAME : Docker Image 제거&lt;/p&gt;

&lt;p&gt;docker commit NAME 레포이름:태그 :&lt;/p&gt;

&lt;p&gt;CUDA_VISIBLE_DEVICES=0 jupyter notebook –ip=0.0.0.0 –port=포트번호 –allow-root&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2019/02/14/docker/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2019/02/14/docker/</guid>
        
        <category>Docker</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>첫 기계식 키보드 !</title>
        <description>&lt;p&gt;늦었지만 키보드 자랑…&lt;br /&gt;
바밀로 저소음&lt;strong&gt;흑축&lt;/strong&gt; 108키 입니다.&lt;/p&gt;

&lt;p&gt;넘나 영롱하다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/keyboard/vamilo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이건 타건 영상입니다.&lt;/p&gt;

&lt;iframe class=&quot;youtube&quot; src=&quot;https://jjerry-k.github.io/public/img/keyboard/vamilo.mp4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Fri, 01 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2019/02/01/keyboard/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2019/02/01/keyboard/</guid>
        
        <category>Hardware</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Python으로 NIfTI 영상을 읽어보자!</title>
        <description>&lt;p&gt;거의 한달 반…만에 글을 씁니다..!&lt;br /&gt;
이번에는 Python에서 &lt;a href=&quot;https://nifti.nimh.nih.gov/&quot;&gt;NIfTI&lt;/a&gt; 포맷의 데이터를 load 하는 방법에 대한 포스팅을 해보려고 합니다.&lt;br /&gt;
저는 Anaconda를 사용중이기에..제 사용환경에 맞게 설명을 하겠습니다.&lt;/p&gt;

&lt;p&gt;가장 먼저 관련 패키지인 &lt;a href=&quot;http://nipy.org/nibabel/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nibabel&lt;/code&gt;&lt;/a&gt; 을 설치를 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge nibabel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러면 설치는 끝입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nibabel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.nii 경로&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#plt.imshow(img)# 슬라이스 1장일 경우
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slice 번호&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 작성하시면 됩니다.&lt;/p&gt;

&lt;p&gt;예시를 보여드리면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/nifti/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇습니다!&lt;/p&gt;

&lt;p&gt;추후엔 DICOM 다루는 법에 대해서 업로드 해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/01/23/nifti/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/01/23/nifti/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>scp를 이용해서 파일 or 디렉토리 복사하기!</title>
        <description>&lt;p&gt;대부분이 그렇겠지만 딥러닝, 머신러닝 하시는 분들은 우분투 서버를 이용합니다.&lt;br /&gt;
물론 저도 그렇구요. 가끔 파일을 로컬에 복사할 일이 있습니다.&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;mobaXterm&lt;/code&gt; 이라던가 &lt;code class=&quot;highlighter-rouge&quot;&gt;xshell&lt;/code&gt; 같은 프로그램으로 옮길 수도 있지만 제 경험상 대용량이라던가 파일이 많다면 끊기더구요..&lt;br /&gt;
 그래서 CLI 환경에서 하는 방법을 찾아보다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt; 라는 명령어가 있더군요.&lt;br /&gt;
 방법은 간단합니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;계정이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;복사할 파일 경로&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;저장할 경로&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 끝나더군요. scp에 대한 자세한 설명은 추후에 추가하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Dec 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2018/12/08/scp/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2018/12/08/scp/</guid>
        
        <category>Command</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Anaconda를 이용하여 TensorFlow 설치하기!</title>
        <description>&lt;p&gt;안녕하세요!&lt;br /&gt;
오늘은 TensorFlow 설치 방법을 간단하게 알려드리려고 합니다.&lt;br /&gt;
CPU와 GPU 중에서도 &lt;strong&gt;GPU&lt;/strong&gt; 버전 설치에 대해 알려드릴거에요!&lt;br /&gt;
매우 간단하니 놀라지마시기 바랍니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Anaconda 를 설치한다.&lt;/li&gt;
  &lt;li&gt;터미널 or CMD에 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install python=3.6&lt;/code&gt; 라고 입력한다.
    &lt;ul&gt;
      &lt;li&gt;CMD에서 안될경우 Anaconda prompt에서 실행하세요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;conda install tensorflow-gpu 라고 입력한다.&lt;/li&gt;
  &lt;li&gt;자신이 원하는 IDE로 코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 끝입니다.&lt;br /&gt;
Anaconda 이용시 로컬에 쿠다를 설치 안해줘도 됩니다.&lt;br /&gt;
참 쉽죠….? &lt;br /&gt;
문제가 있다면 댓글 남겨주시기 바랍니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/11/18/anaconda_setting/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/11/18/anaconda_setting/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>맥북 자동 부팅 옵션 설정법</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;오늘은 맥북 자동 부팅 옵션에 대해서 설정법을 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;매우 짧은 포스팅이 될 듯합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Terminal 을 실행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nvram AutoBoot=%00&lt;/code&gt; 이라고 친다.&lt;/li&gt;
  &lt;li&gt;맥북 패스워드를 입력한다.&lt;/li&gt;
  &lt;li&gt;전원을 끈 후 노트북을 닫고 열어서 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;끝입니다.. 이러면 자동 부팅 옵션이 꺼집니다.&lt;/p&gt;

&lt;p&gt;만약 다시 자동 부팅을 켜시려면 1번을 실행하신 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nvram AutoBoot=%03&lt;/code&gt; 이라고 입력하시면 됩니다.&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/11/17/macbook_auto_start/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/11/17/macbook_auto_start/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Mac Terminal Customizing</title>
        <description>&lt;p&gt;저는 터미널을 마음대로 바꾸는걸 좋아합니다.&lt;br /&gt;
기본 터미널을 대체할 앱이 있긴하지만 추가적으로 설치하는걸 안좋아해서..ㅎㅎ&lt;br /&gt;
그래서 Customizing 하는 법을 포스팅하려고 합니다.&lt;br /&gt;
Mac 터미널에서 환경변수 설정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; 에서 합니다.
Ubuntu 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;와 같다고 생각하시면 되요.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# terminal customize&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 컬러 적용 여부&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLICOLOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;c&quot;&gt;# 디렉토리의 생상&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LSCOLORS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GxFxCxDxBxegedabagaced
&lt;span class=&quot;c&quot;&gt;# 유저 및 호스트의 색상&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w\[\033[00m\]\$'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫번째 옵션은 1이면 Customizing응 한다는 의미입니다.&lt;/p&gt;

&lt;p&gt;두번째 옵션이 좀 문제인데요..&lt;br /&gt;
알아보기 매우 힘듭니다..&lt;br /&gt;
저도 기억하기 힘들어서 포스팅을 하는거죠.&lt;br /&gt;
자..두번째 옵션을 두 부분으로 나눠서 설명드리겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gx Fx Cx Dx Bx
1x 2x 3x 4x 5x

1x : 디렉토리 색상
2x : symbolic link 색상
3x : socket 색상
4x : pipe 색
5x : 실행파일 색상
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg ed ab ag ac ed
1a 2b 3c 4d 5e 6f

1a : block special 색상
2b : char special 색상
3c : exe_setuid 색상
4d : ext_setgid 색상
5e : a-dir_writeothers_sticky 색상
6f : b-dir_writeothers_NOsticky 색상
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;솔직히 socket, pipe, 1a ~ 6f 까지는 뭔지 잘 모르겠습니다..&lt;br /&gt;
제대로 배우지 않아서…ㅎㅎ&lt;/p&gt;

&lt;p&gt;색상 설명&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a     black
b     red
c     green
d     brown
e     blue
f     magenta
g     cyan
h     light grey

A     bold black
B     bold red
C     bold green
D     bold brown  (거의 노란색)
E     bold blue
F     bold magenta
G     bold cyan
H     bold light grey (거의 흰색)
x     default foreground or background
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 색상설정은 알파벳 두개로 구성이 됩니다.&lt;br /&gt;
앞에 알파벳은 글자의 색상이고 뒤에 알파벳은 배경의 색상입니다.&lt;/p&gt;

&lt;p&gt;세번째 옵션을 살펴보겠습니다.&lt;br /&gt;
이 옵션 또한 복잡하게 써있네요..&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w\[\033[00m\]\$'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이건 터미널을 켰을때 유저와 PC 이름을 어떻게 보여줄 것인가를 정합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]&lt;/code&gt; 에서 {USER_NAME}@{PC_NAME}을 초록색 볼드체로 하겠다라는 의미입니다. (01 : 볼드체, 32m : 초록색)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\[\033[01;35m\]\w\[\033[00m\]&lt;/code&gt; 에서 ~을 자주색 볼드체로 하겠다라는 의미입니다. (01 : 볼드체, 35m : 자주색)&lt;/p&gt;

&lt;p&gt;자세한 정보는 추후에 더 추가하겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/11/07/terminal/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/11/07/terminal/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Github 블로그 만들기</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다.&lt;br /&gt;
요즘 깃헙으로 블로그를 하려고 하시는 분이 많은데요!&lt;br /&gt;
한번 만드는 법을 포스팅해보려고 합니다!&lt;br /&gt;
깃헙 블로그는 보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 이라는 정적 사이트 생성기를 이용합니다.&lt;br /&gt;
자세한 설명은 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/home/&quot;&gt;&lt;strong&gt;여기서&lt;/strong&gt;&lt;/a&gt; 확인 하시면 됩니다.&lt;br /&gt;
블로그 만드는 방법은 두 가지가 있는데요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;테마를 자기가 만드는 방법.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공개된 테마를 가져와서 수정하는 방법.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전 &lt;strong&gt;2번 방법&lt;/strong&gt; 으로 했습니다.&lt;br /&gt;
왜냐하면 전 웹 프로그래밍 언어를 모르니까요..ㅎㅎ&lt;br /&gt;
그래서 &lt;strong&gt;2번 방법&lt;/strong&gt; 에 대해 포스팅하려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;1-원하는-테마-다운받기&quot;&gt;1. 원하는 테마 다운받기.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;&lt;strong&gt;템플릿 모음1&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;https://jekyllthemes.io&quot;&gt;&lt;strong&gt;템플릿 모음2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 링크는 템플릿에 대한 정보를 모아놓은 사이트입니다.&lt;br /&gt;
링크에 자신이 원하는 템플릿을 들어가보면 대부분 깃헙 repository 로 연결됩니다.&lt;br /&gt;
예시로 &lt;strong&gt;템플릿 모음1&lt;/strong&gt; 에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Prologue&lt;/code&gt; 라는 테마를 적용해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;를 바로 누르셔도 되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt;에 들어가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone, Download ZIP&lt;/code&gt; 하셔도 상관없습니다.&lt;br /&gt;
다운로드 받은 후에 알집을 풀어주세요!&lt;br /&gt;
전 &lt;code class=&quot;highlighter-rouge&quot;&gt;Home&lt;/code&gt;에 풀었구요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 폴더 안에는 이렇게 구성이 되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-루비-젬-설치&quot;&gt;2. 루비 젬 설치.&lt;/h2&gt;

&lt;p&gt;템플릿을 만들면서 바로 바로 수정되는 사항을 볼 수 있다면 좋겠죠?&lt;br /&gt;
그렇기 때문에 &lt;strong&gt;루비 젬&lt;/strong&gt; 이라는 것을 설치 해야합니다.&lt;br /&gt;
OS 별 설치법은 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/&quot;&gt;&lt;strong&gt;여기서&lt;/strong&gt;&lt;/a&gt; 확인하시면 됩니다.&lt;/p&gt;

&lt;p&gt;저는 Mac OS 를 기준으로 작성하겠습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt; 까지 진행하세요.&lt;/p&gt;

&lt;h2 id=&quot;3-localhost-서버-열기&quot;&gt;3. localhost 서버 열기.&lt;/h2&gt;

&lt;p&gt;다음과 같이 터미널을 열고 압축푼 경로로 이동해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 이라고 입력합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 뭐 이것 저것 설치가 될거에요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버를 열 준비는 끝났습니다.&lt;br /&gt;
이제 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 라고 입력해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진과 같이 나올거에요!&lt;br /&gt;
밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/jekyll-theme-prologue&lt;/code&gt;라고 나와있네요!&lt;br /&gt;
그럼 인터넷 브라우저를 켜주시고 주소창에 입력해주세요!&lt;/p&gt;

&lt;p&gt;그럼 다음과 같은 창이 열립니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 블로그를 할 준비는 완료했습니다!&lt;br /&gt;
다음엔 테마를 토대로 커스터마이징 하는 포스팅을 준비해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/blog/2018/10/24/gitblog/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/24/gitblog/</guid>
        
        <category>Jekyll</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Anaconda 간단하게 사용하기!</title>
        <description>&lt;p&gt;저번 &lt;a href=&quot;https://jjerry-k.github.io/python/2018/09/27/python4mac/&quot;&gt;&lt;strong&gt;Python 설치 포스팅&lt;/strong&gt;&lt;/a&gt;에서 pyenv로 설치 하는 법을 포스팅 했었습니다.&lt;br /&gt;
이번에는 제가 pyenv 로 어떤 버전을 설치했고 무슨 패키지를 설치했는지 포스팅 하려고 합니다.&lt;br /&gt;
먼저 설치할 버전의 이름을 정확히 알아야하므로 설치 가능한 버전들을 봅니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 터미널에 입력을 하면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Available versions:
  2.1.3
  2.2.3
  2.3.7
  ...
  중략
  ...
  stackless-3.4.2
  stackless-3.4.7
  stackless-3.5.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 굉~~~장히 많은 버전이 있습니다. (약 340개?)&lt;br /&gt;
그중에서 저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;anaconda3-5.2.0&lt;/code&gt;을 설치했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;anaconda3-5.2.0

pyenv global anaconda3-5.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아나콘다 환경 설치 끝..&lt;br /&gt;
이제 제가 사용하는 파이썬 패키지를 설치해야겠죠.&lt;br /&gt;
보통 python 이라면 pip를 쓰겠지만 저는 아나콘다를 설치했죠.&lt;br /&gt;
그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt;를 이용해서 설치했습니다.&lt;br /&gt;
제가 설치 할 패키지는 pytorch, tensorflow, keras, tqdm 입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tqdm &lt;span class=&quot;c&quot;&gt;# progress bar 패키지&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;keras tensorflow &lt;span class=&quot;c&quot;&gt;# machine learning 패키지&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pytorch torchvision &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pytorch &lt;span class=&quot;c&quot;&gt;# machine learning 패키지&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 끝입니다.&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy, scipy, matplotlib, ...&lt;/code&gt;등 패키지는 anaconda를 설치하면서 자동으로 설치가 됩니다 ㅎㅎ&lt;/p&gt;

&lt;p&gt;만약 저 환경을 삭제하고 싶다?&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pyenv uninstall anaconda3-5.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이라고 하시면 바로 삭제됩니다.&lt;/p&gt;

&lt;p&gt;많은 분들께 도움이 되었으면 좋겠습니다!&lt;/p&gt;

&lt;p&gt;감사합니다~!&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2018/10/23/anaconda/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/10/23/anaconda/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python 3.6 에서 이 경고 보기 싫어요..</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;어제 &lt;a href=&quot;https://jjerry-k.github.io/deeplearning/2018/10/18/condavspip/&quot;&gt;&lt;strong&gt;pip 로 설치하지 말라구요!?&lt;/strong&gt;&lt;/a&gt; 라는 포스팅을 했죠?&lt;br /&gt;
포스팅을 하고 갑자기 확 꽂혀서 anaconda 환경을 지웠습니다.&lt;br /&gt;
Setting 을 다시 하기 위해서요! 핳핳핳&lt;br /&gt;
그래서 지우고 다시 구축했죠.&lt;br /&gt;
제가 사용하는 방법은 &lt;a href=&quot;https://jjerry-k.github.io/deeplearning/2018/09/27/python4mac/&quot;&gt;&lt;strong&gt;Python Installation for mac&lt;/strong&gt;&lt;/a&gt; 에 적혀있습니다!&lt;br /&gt;
아나콘다 환경 설치 후에 이제 python package를 설치해야겠죠?&lt;br /&gt;
pip 가 아닌 conda로 전부 설치했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tensorflow
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pytorch torchvision &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pytorch
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;keras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 후에 테스트를 하고자 터미널에서 tensorflow를 import 해봤습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;import tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그 후에 나온 warning 입니다.&lt;/p&gt;

&lt;p&gt;/Users/jerry/.pyenv/versions/anaconda3-5.2.0/lib/python3.6/site-packages/h5py/&lt;strong&gt;init&lt;/strong&gt;.py:36: FutureWarning: Conversion of the second argument of issubdtype from &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;np.floating&lt;/code&gt; is deprecated. In future, it will be treated as &lt;code class=&quot;highlighter-rouge&quot;&gt;np.float64 == np.dtype(float).type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;라고 나오더군요.&lt;br /&gt;
이게 굉장히 거슬리는 분들 계실겁니다..&lt;br /&gt;
보통 h5py 라는 python 패키지가 2.8.0 미만이면 이 warning이 발생해요!&lt;br /&gt;
해결책은 간단합니다!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; h5py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것만 해주시면 됩니다!&lt;/p&gt;

&lt;p&gt;그럼 즐거운 코딩!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/10/19/warning/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/10/19/warning/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>Markdown 사용법</title>
        <description>&lt;p&gt;Markdown은 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능한 텍스트 기반의 마크업언어입니다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 빠르게 컨텐츠를 작성하고 직관적으로 인식할 수 있습니다. Github을 사용하는 사람이라면 가장 먼저 만나게 되는 파일이 README.md 파일인데요. 이 파일도 Markdown으로 작성된 파일입니다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있어서 많은 사람들이 사용하게 되었습니다!&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#%ea%b8%b0%eb%b3%b8-%ec%82%ac%ec%9a%a9%eb%b2%95&quot;&gt;기본 사용법&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#headings&quot;&gt;Headings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#h1-heading&quot;&gt;h1 Heading&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#h2-heading&quot;&gt;h2 Heading&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#h3-heading&quot;&gt;h3 Heading&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#h4-heading&quot;&gt;h4 Heading&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#h5-heading&quot;&gt;h5 Heading&lt;/a&gt;
                    &lt;ul&gt;
                      &lt;li&gt;&lt;a href=&quot;#h6-heading&quot;&gt;h6 Heading&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#paragraphs&quot;&gt;Paragraphs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#newline&quot;&gt;Newline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#horizontal-line&quot;&gt;Horizontal Line&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#emphasis&quot;&gt;Emphasis&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#bold&quot;&gt;Bold&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#italics&quot;&gt;Italics&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#blockquotes&quot;&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lists&quot;&gt;Lists&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#unordered&quot;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ordered&quot;&gt;Ordered&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#time-saving-tip&quot;&gt;Time-saving Tip&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#inline-code&quot;&gt;Inline code&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%22fenced%22-code-block&quot;&gt;“Fenced” code block&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#indented-code&quot;&gt;Indented code&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#links&quot;&gt;Links&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#autolinks&quot;&gt;Autolinks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#inline-links&quot;&gt;Inline links&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#images&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#raw-html&quot;&gt;Raw HTML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#escaping-with-backslashes&quot;&gt;Escaping with backslashes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%ea%b7%b8-%ec%99%b8-%ec%82%ac%ec%9a%a9%eb%b2%95&quot;&gt;그 외 사용법&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#strikethrough&quot;&gt;Strikethrough&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tables&quot;&gt;Tables&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aligning-cells&quot;&gt;Aligning cells&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;기본-사용법&quot;&gt;기본 사용법&lt;/h1&gt;

&lt;h2 id=&quot;headings&quot;&gt;Headings&lt;/h2&gt;

&lt;p&gt;Heading 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt; 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;h6&lt;/code&gt; 까지 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 의  개수로 단계가 정해집니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# h1 Heading
## h2 Heading
### h3 Heading
#### h4 Heading
##### h5 Heading
###### h6 Heading
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;h1 id=&quot;h1-heading&quot;&gt;h1 Heading&lt;/h1&gt;
&lt;h2 id=&quot;h2-heading&quot;&gt;h2 Heading&lt;/h2&gt;
&lt;h3 id=&quot;h3-heading&quot;&gt;h3 Heading&lt;/h3&gt;
&lt;h4 id=&quot;h4-heading&quot;&gt;h4 Heading&lt;/h4&gt;
&lt;h5 id=&quot;h5-heading&quot;&gt;h5 Heading&lt;/h5&gt;
&lt;h6 id=&quot;h6-heading&quot;&gt;h6 Heading&lt;/h6&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;paragraphs&quot;&gt;Paragraphs&lt;/h2&gt;

&lt;p&gt;문단을 나누는 법입니다. 문단 사이에는 하나 이상의 빈 줄로 구분됩니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;이 문장은 첫번째 문단의 첫번째 문장입니다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;이 문장은 두번째 문단의 첫번째 문장입니다. 이 문장은 두번째 문단의 두번째 문장입니다.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;이 문장은 첫번째 문단의 첫번째 문장입니다.&lt;/p&gt;
&lt;p&gt;이 문장은 두번째 문단의 첫번째 문장입니다. 이 문장은 두번째 문단의 두번째 문장입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;newline&quot;&gt;Newline&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;공백 두칸 후 엔터&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt;을 이용하여 개행을 할 수 있습니다.&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt;은 굳이….)&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test1`공백 두칸 후 엔터`
test2

test1&amp;lt;br&amp;gt;test2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;test1&lt;br /&gt;
test2&lt;/p&gt;

&lt;p&gt;test1&lt;br /&gt;test2&lt;/p&gt;

&lt;h2 id=&quot;horizontal-line&quot;&gt;Horizontal Line&lt;/h2&gt;

&lt;p&gt;Markdown 문서에 수평선을 추가 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`___`: 밑줄(_) 3개

`---`: 대쉬(-) 3개

`***`: 별표(*) 3개
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;

&lt;h3 id=&quot;bold&quot;&gt;Bold&lt;/h3&gt;

&lt;p&gt;볼드체 적용도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**이렇게 하면 볼드체!**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 하면 볼드체!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;italics&quot;&gt;Italics&lt;/h3&gt;

&lt;p&gt;이텔릭체 적용도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_이렇게 하면 이텔릭체!_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이렇게 하면 이텔릭체!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h2&gt;

&lt;p&gt;블럭인용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 으로 합니다.&lt;br /&gt;
Heading과 처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 개수로 인용 안에 인용을 추가 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 이것은 인용구에요.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이것은 인용구에요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다중 인용 사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 이것은 첫번째 인용이에요.
&amp;gt;&amp;gt; 이것은 두번째 인용이에요.
&amp;gt;&amp;gt;&amp;gt; 이것은 세번째 인용이에요.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이것은 첫번째 인용이에요.&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;이것은 두번째 인용이에요.&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;이것은 세번째 인용이에요.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;목록에는 순서가 없는 목록, 순서가 있는 목록이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;unordered&quot;&gt;Unordered&lt;/h3&gt;

&lt;p&gt;순서가 없는 목록은 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 음식
+ 가구
+ 운동
  - 농구
  - 축구
  - 야구
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;음식&lt;/li&gt;
  &lt;li&gt;가구&lt;/li&gt;
  &lt;li&gt;운동
    &lt;ul&gt;
      &lt;li&gt;농구&lt;/li&gt;
      &lt;li&gt;축구&lt;/li&gt;
      &lt;li&gt;야구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 다음과 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 신체
  - 머리
  - 상체
  - 하체
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사람
    &lt;ul&gt;
      &lt;li&gt;머리
        &lt;ul&gt;
          &lt;li&gt;눈&lt;/li&gt;
          &lt;li&gt;코&lt;/li&gt;
          &lt;li&gt;입&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;상체&lt;/li&gt;
      &lt;li&gt;하체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개미
    &lt;ul&gt;
      &lt;li&gt;머리&lt;/li&gt;
      &lt;li&gt;가슴&lt;/li&gt;
      &lt;li&gt;배&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ordered&quot;&gt;Ordered&lt;/h3&gt;

&lt;p&gt;순서가 있는 목록을 만들 때는 번호를 매기면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 노트북을 켠다.
2. Atom 에디터를 켠다.
3. 프로젝트 폴더를 연다.
4. 코딩을 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;노트북을 켠다.&lt;/li&gt;
  &lt;li&gt;Atom 에디터를 켠다.&lt;/li&gt;
  &lt;li&gt;프로젝트 폴더를 연다.&lt;/li&gt;
  &lt;li&gt;코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;time-saving-tip&quot;&gt;Time-saving Tip&lt;/h3&gt;

&lt;p&gt;순서가 있는 목록에서 시간을 아끼는 방법입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;1.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2.&lt;/code&gt;,… 라고 적을 필요 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1.&lt;/code&gt; 만 적으면 자동으로 번호를 매깁니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 노트북을 켠다.
1. Atom 에디터를 켠다.
1. 프로젝트 폴더를 연다.
1. 코딩을 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;노트북을 켠다.&lt;/li&gt;
  &lt;li&gt;Atom 에디터를 켠다.&lt;/li&gt;
  &lt;li&gt;프로젝트 폴더를 연다.&lt;/li&gt;
  &lt;li&gt;코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;inline-code&quot;&gt;Inline code&lt;/h3&gt;

&lt;p&gt;문장 중간에 &lt;code&gt;` `&lt;/code&gt;를 이용하여 code를 넣을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;파이썬에서 모듈을 쓰려면 `import '모듈명'` 이라고 하면 됩니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;파이썬에서 모듈을 쓰려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;import '모듈명'&lt;/code&gt; 이라고 하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;fenced-code-block&quot;&gt;“Fenced” code block&lt;/h3&gt;

&lt;p&gt;code block을 만들어서 code를 넣을 수 있습니다.&lt;/p&gt;

&lt;pre&gt;
```python
import os
import sys
```
&lt;/pre&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indented-code&quot;&gt;Indented code&lt;/h3&gt;

&lt;p&gt;들여쓰기(공백 4개)를 이용하여 code를 쓸 수 있습니다.&lt;br /&gt;
하지만 별로 추천하는 방법은 아닙니다.&lt;br /&gt;
왜냐하면 &lt;strong&gt;syntax highlighting&lt;/strong&gt;이 안됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    import sys
    impot os
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sys
impot os
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h3&gt;

&lt;p&gt;“Fenced” code block 은 어떤 프로그래밍 언어의 code block 을 만들건지 적어서 사용을 합니다.&lt;br /&gt;
그러면 그 언어에 맞게 Syntax highlighting을 합니다.&lt;/p&gt;

&lt;pre&gt;
```python
import os
import sys

a = 2
b = 5

print(&quot;Hello, World!&quot;)
print(a + b)
```
&lt;/pre&gt;

&lt;p&gt;Which renders to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;링크를 거는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Autolinks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inline links&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Link titles&lt;/code&gt;, ‘Named Anchors’ 이렇게 네 가지가 있습니다.&lt;br /&gt;
이 포스팅에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;Autolinks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inline links&lt;/code&gt; 이 두 가지를 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;autolinks&quot;&gt;Autolinks&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 사이에 링크를 적으면 자동으로 링크가 생성됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;https://jjerry-k.github.io&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;https://jjerry-k.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;inline-links&quot;&gt;Inline links&lt;/h3&gt;

&lt;p&gt;문장 안에 링크를 생성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Jerry's Blog](https://jjerry-k.github.io)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;Jerry’s Blog&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;p&gt;이미지를 올리는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;첫번째 방법
![Minion](http://octodex.github.com/images/minion.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://octodex.github.com/images/minion.png&quot; alt=&quot;Minion&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;두번째 방법
![Alt text](http://octodex.github.com/images/stormtroopocat.jpg &quot;The Stormtroopocat&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://octodex.github.com/images/stormtroopocat.jpg&quot; alt=&quot;Alt text&quot; title=&quot;The Stormtroopocat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 두 방법은 이미지 사이즈 조절을 할 수 없습니다.&lt;br /&gt;
만약 사이즈 조절이 필요하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;&quot; height=&quot;&quot; width=&quot;&quot;&amp;gt;를 이용하면 됩니다.&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;http://octodex.github.com/images/dojocat.jpg&quot; height=&quot;100&quot; width=&quot;100&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :
&lt;img src=&quot;http://octodex.github.com/images/dojocat.jpg&quot; height=&quot;100&quot; width=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;raw-html&quot;&gt;Raw HTML&lt;/h2&gt;

&lt;p&gt;이미지에서 HTML 문법을 쓸 수 있다는걸 확인했다시피 Markdown 에서 HTML 문법을 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;여기가 **&amp;lt;a href=&quot;https://jjerry-k.github.io&quot;&amp;gt;Jerry의 블로그&amp;lt;/a&amp;gt;**입니다.

여기가 **[Jerry의 블로그](https://jjerry-k.github.io)**입니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;여기가 &lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;&lt;strong&gt;Jerry의 블로그&lt;/strong&gt;&lt;/a&gt;입니다.&lt;/p&gt;

&lt;p&gt;여기가 &lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;&lt;strong&gt;Jerry의 블로그&lt;/strong&gt;&lt;/a&gt;입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;escaping-with-backslashes&quot;&gt;Escaping with backslashes&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 를 이용하여 문장안에 기호를 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\*를 문장에 쓰고 싶다!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;*를 문장에 쓰고 싶다!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;그-외-사용법&quot;&gt;그 외 사용법&lt;/h1&gt;

&lt;h2 id=&quot;strikethrough&quot;&gt;Strikethrough&lt;/h2&gt;

&lt;p&gt;문장에 줄을 그을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~블로그....귀찮다....~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;del&gt;블로그….귀찮다….&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;표를 만들 수 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;를 이용하여 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| --- | --- |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;제리&lt;/td&gt;
      &lt;td&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;톰&lt;/td&gt;
      &lt;td&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스파이크&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;aligning-cells&quot;&gt;Aligning cells&lt;/h3&gt;

&lt;p&gt;셀 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;를 이용합니다.&lt;br /&gt;
왼쪽 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;을 사용하지 않으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Center text in a column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;중앙 정렬은 다음과 같이 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| :-: | :-: |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;제리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;톰&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;스파이크&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Right-align the text in a column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;오른쪽 정렬은 다음과 같이 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| --: | --: |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;제리&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;톰&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;스파이크&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Markdown 설명에 대한 포스팅… &lt;strong&gt;끝!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/blog/2018/10/19/markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/19/markdown/</guid>
        
        <category>Markdown</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>pip 로 설치하지 말라구요!?</title>
        <description>&lt;p&gt;오늘 갑자기 당황스러운 포스팅을 봤습니다.&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;https://www.anaconda.com/blog/developer-blog/tensorflow-in-anaconda/&quot;&gt;&lt;strong&gt;https://www.anaconda.com/blog/developer-blog/tensorflow-in-anaconda/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;내용을 보니 pip 로 설치하는것 보다 conda를 이용하면 좋은 점이 두 가지가 있다고 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CPU 성능이 더 빨라졌다.
&lt;img src=&quot;https://www.anaconda.com/wp-content/uploads/TensorFlowTraining.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPU 버전 설치가 쉽다.&lt;br /&gt;
  솔직히 이건 잘 모르겠네요.. &lt;br /&gt;
  둘 다 똑같이 그래픽 드라이버 설치하고 CUDA 설치하고 해야하는데 뭐가 쉬워진다는건지..&lt;br /&gt;
  뭐.. 어떤 쿠다 버전을 설치했던 알아서 잡아서 TensorFlow 를 설치해준다면 편해진건 맞겠군요.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고 CPU 성능 증가는 &lt;strong&gt;Intel CPU에 한해서&lt;/strong&gt; 빨라지는 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/nopip/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진을 보시면 &lt;strong&gt;the Intel® Math Kernel Library for Deep Neural Networks (Intel® MKL-DNN)&lt;/strong&gt; 을 사용해서 올렸다는거죠. (AMD 사용자 쥬륵..)&lt;/p&gt;

&lt;p&gt;뭐 아무튼… 인텔에 텐플쓰시는 분들은 콘다로 넘어가심이 좋을 듯합니다.&lt;/p&gt;

&lt;p&gt;전 요즘 pytorch 를 쓰고 있어서 ㅎㅎ..&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다 ㅎㅎ&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/10/18/condavspip/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/10/18/condavspip/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>GPU를 골라서 써보자!</title>
        <description>&lt;p&gt;현재 저는 하나의 GPU 서버를 가지고 여러 명이 Deep Learning 을 돌려야 합니다.&lt;br /&gt;
그러면 GPU 각각을 분배하거나 메모리를 분산해야겠죠.&lt;br /&gt;
제 연구실 같은 경우엔 전자를 택했습니다.&lt;br /&gt;
그래서 이번엔 특정 GPU만 사용하는 방법을 간 ! 단 ! 하 ! 게 포스팅하려고 합니다. (Just 명령어만 쓸꺼임.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 python ~~~.py &lt;span class=&quot;c&quot;&gt;# 0번 GPU만 사용.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#CUDA_VISIBLE_DEVICES=0,3 python ~~~.py # 0, 3번 GPU 사용.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 실행하시면 ~~~.py 를 실행해서 GPU 를 사용할 경우 0번 GPU만 사용해서 스크립트가 실행됩니다!
많은 분들이 &lt;strong&gt;TensorFlow&lt;/strong&gt;를 사용하실텐데 이것으로 예를 들어보겠습니다.&lt;br /&gt;
GPU가 여러 대인 상황에서 아무 옵션도 주지 않고 (스크립트에서도 안줬다는 가정하에..) &lt;code class=&quot;highlighter-rouge&quot;&gt;tf.Session()&lt;/code&gt; 을 실행하게 되면 모든 GPU의 메모리를 혼자서 다 잡고 있는걸 보셨을 겁니다.&lt;br /&gt;
하지만 만약 위에 코드 처럼 실행한다면 특정 번호에 해당하는 GPU의 메모리만 잡고 있는걸 보실 수 있을 겁니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2018/10/10/GPU_Masking/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2018/10/10/GPU_Masking/</guid>
        
        <category>Usage</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Python Installation for mac</title>
        <description>&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# brew 설치.&lt;/span&gt;
/usr/bin/ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wget 설치.&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget

&lt;span class=&quot;c&quot;&gt;#pyenv 설치.&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pyenv

&lt;span class=&quot;c&quot;&gt;# bash_profile 에 경로 추가.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PYENV_ROOT=&quot;${HOME}/.pyenv&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;${PYENV_ROOT}bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eval &quot;$(pyenv init -)&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 설치할 수 있는 환경 보여줌.&lt;/span&gt;
pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 위에서 환경 확인 후 원하는 버전 입력.&lt;/span&gt;
pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;버전 이름&amp;gt;

&lt;span class=&quot;c&quot;&gt;# system  과 &amp;lt;버전 이름&amp;gt; 두 환경이 존재.&lt;/span&gt;
pyenv versions

&lt;span class=&quot;c&quot;&gt;# &amp;lt;버전 이름&amp;gt;으로 default version 변경.&lt;/span&gt;
pyenv global &amp;lt;버전 이름&amp;gt;

pyenv versions


&lt;span class=&quot;c&quot;&gt;# tmp 폴더 에선 system 이라는 버전으로 사용.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tmp

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tmp

pyenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;system

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pyenv&lt;/strong&gt; 를 사용하면 특정 폴더에서는 python2 로 작동하고 그 외에는 python3 로 작동하게 할 수 있습니다!&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2018/09/27/python4mac/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/09/27/python4mac/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Object Detection API</title>
        <description>&lt;p&gt;이번에 V.ais에서 TensorFlow Object Detection API 사용 매뉴얼을 작성해봤습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/V-AIS/tensorflow&quot;&gt;&lt;strong&gt;https://github.com/V-AIS/tensorflow&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아직 완벽하게 정리된건 아니지만…&lt;/p&gt;

&lt;p&gt;TensorFlow Object Detection API를 처음 접하시는 분이라면 쉽게 따라할 수 있도록 적어봤습니다.&lt;/p&gt;

&lt;p&gt;수정됬으면 하는 부분이 있으면 댓글 남겨주세요!&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/09/12/TFOD/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/09/12/TFOD/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>휴가</title>
        <description>&lt;p&gt;약 두 달정도 달려온 챌린지가 끝나고 처음으로 휴가를 얻었습니다.&lt;/p&gt;

&lt;p&gt;일단은 이번 주 쉬고 다음 주부터 다시 연구 시작..!&lt;/p&gt;

&lt;p&gt;쉬면서 TensorFlow Object Detection API 설명서나 써보렵니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/09/07/Vacation/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/09/07/Vacation/</guid>
        
        <category>Daily</category>
        
        
        <category>Living</category>
        
      </item>
    
  </channel>
</rss>
