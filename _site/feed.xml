<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jerry's Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Nov 2019 00:12:51 +0900</pubDate>
    <lastBuildDate>Wed, 06 Nov 2019 00:12:51 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>jupyter Lab 에서 단축키 설정하는 방법!</title>
        <description>&lt;p&gt;파이썬, 딥러닝을 하시는 분들 중 Jupyter 부류를 이용하시는 분들이 꽤 많습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Jupyter Notebook, Jupyter Lab,...&lt;/code&gt;&lt;br /&gt;
저는 둘 다 사용해보긴 하지만 주로 &lt;strong&gt;Jupyter Lab&lt;/strong&gt; 을 사용합니다.&lt;br /&gt;
이유는 그냥…좀 더 보기 편해서..?&lt;br /&gt;
두 환경의 차이는 다음 링크에서 확인해주세요.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyter.readthedocs.io/en/latest/running.html#running&quot;&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyterlab.readthedocs.io/en/stable/index.html&quot;&gt;Jupyter Lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;참고사항&quot;&gt;참고사항&lt;/h4&gt;
&lt;p&gt;https://github.com/jupyterlab/jupyterlab/issues/7122&lt;br /&gt;
며칠 전 이슈에 올라온 상황입니다.&lt;br /&gt;
jupyter lab 1.0.2 버전에 extension을 설치하면 sidebar 부분이 깨지는 버그가 있네요…&lt;br /&gt;
1.1.1 에선 고쳐졌다고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size:25pt;&quot;&gt;자, 다시 본론으로 돌아가봅니다.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jupyter Lab 에서 단축키로 설정할 수 있는 기능들은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;‘notebook:create-new’&lt;br /&gt;
‘notebook:interrupt-kernel’&lt;br /&gt;
‘notebook:restart-kernel’&lt;br /&gt;
‘notebook:restart-clear-output’&lt;br /&gt;
‘notebook:restart-run-all’&lt;br /&gt;
‘notebook:reconnect-to-kernel’&lt;br /&gt;
‘notebook:change-kernel’&lt;br /&gt;
… (너무 많다….)&lt;br /&gt;
‘notebook:hide-all-cell-outputs’&lt;br /&gt;
‘notebook:show-all-cell-outputs’&lt;br /&gt;
‘notebook:enable-output-scrolling’&lt;br /&gt;
‘notebook:disable-output-scrolling’&lt;br /&gt;
‘notebook:save-with-view’&lt;/p&gt;

&lt;p&gt;너무 많은 관계로 &lt;strong&gt;&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/blob/af548c2674427da79d54ad5c4b69bb175463e9a0/packages/notebook-extension/src/index.ts#L69-L197&quot;&gt;링크&lt;/a&gt;&lt;/strong&gt; 참고해주세요.&lt;/p&gt;

&lt;p&gt;이번 포스팅에선 예시로 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 에 대해서 shortcut을 설정해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;설정-방법&quot;&gt;설정 방법&lt;/h2&gt;

&lt;p&gt;먼저 Jupyter Lab 을 실행시켜주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig01.png&quot; alt=&quot;fig1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Setting Editor&lt;/strong&gt; 를 클릭해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig02.png&quot; alt=&quot;fig2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좌측에 &lt;strong&gt;Keyboard Shortuts&lt;/strong&gt; 를 선택해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig03.png&quot; alt=&quot;fig3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 왼쪽의 창은 default setting에 대한 설명이고 오른쪽을 Custom 을 위해 기입하는 부분입니다.&lt;/p&gt;

&lt;p&gt;그럼 예시대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 에 대해서 shortcut을 설정해보겠습니다.&lt;/p&gt;

&lt;p&gt;위에 기능에 대해서 링크 올려드렸었죠? 그 깃헙에서 링크에 대한 내용을 먼저 찾아봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig04.png&quot; alt=&quot;fig4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;거기서 ‘{기능 이름}’ 부분을 복사해주세요.&lt;/p&gt;

&lt;p&gt;그리고 다음과 같이 기입해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/shortcut/fig05.png&quot; alt=&quot;fig5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 우측 상단에 저장버튼을 누르고 노트북에서 Shift + Command + C 를 눌렀을때 &lt;code class=&quot;highlighter-rouge&quot;&gt;Restart and Clear&lt;/code&gt; 이 작동하게 됩니다.&lt;/p&gt;

&lt;p&gt;사진만 보고 따라 적으시기 귀찮으실테니 code block 으로 남깁니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;shortcuts&quot;: [
    {
        &quot;command&quot;: &quot;kernelmenu:restart-and-clear&quot;,
        &quot;keys&quot;: [&quot;Shift + Ctrl + C&quot;],
        &quot;selector&quot;: &quot;[data-jp-kernel-user]:focus&quot;
        }]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;과정을 요약해드리면 (Jupyter Lab 켜기 ~ Editor 열기 까지는 생략)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;기능에 대한 링크에서 자신이 원하는 기능 찾기&lt;/li&gt;
  &lt;li&gt;위에 code block 에서 “command”: 부분에 ‘{기능 이름}’ 기입&lt;/li&gt;
  &lt;li&gt;“keys”: 에 원하는 커맨드 넣기 (복수개 가능)&lt;/li&gt;
  &lt;li&gt;“selector”: 에 .jp-Notebook:focus” 혹은 “[data-jp-kernel-user]:focus” 기입&lt;/li&gt;
  &lt;li&gt;저장 후 즐겁게 사용!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;shortcut 설정은 여기까지 입니다.&lt;br /&gt;
혹시 이외에 다른 설정에 대해 궁금한거 있으시면 comment 남겨주세요!&lt;/p&gt;

&lt;h3 id=&quot;참고사항-1&quot;&gt;참고사항&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;만약 &lt;strong&gt;A 기능은 Shift + Alt + C&lt;/strong&gt; 이고 &lt;strong&gt;B 기능은 Alt + Shift + C&lt;/strong&gt; 일때… 전체적으로 보면 같은 키 입력이지만 순서가 다르기 때문에 &lt;strong&gt;별개의 shortcut으로 작동&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 07 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/09/07/Jupyter_shortcut/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/09/07/Jupyter_shortcut/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>jupyter (ipython) 여러 커널 사용하기!</title>
        <description>&lt;p&gt;Anaconda 를 사용하다보면 여러 가상환경을 만들게 됩니다. (아닐수도 있구요…)&lt;br /&gt;
그 후에 jupyter 를 사용하시는 분들이라면 대부분 이렇게 사용하실 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate 환경이름
jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate 환경이름&lt;/code&gt; 이라는걸 &lt;strong&gt;무.조.건&lt;/strong&gt; 써줘야하죠..&lt;br /&gt;
이게 매우 귀찮았습니다…&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“activate 없이 base에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter notebook&lt;/code&gt;을 실행해도 가상환경을 잡을 수 있는 방법이 없나..”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 생각 많이들 하실 것 같습니다.&lt;br /&gt;
당연히 방법이 있습니다!&lt;br /&gt;
그 방법에 대해 알려드리겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;환경이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; ipykernel &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;환경이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--display-name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Jupyter에 표시될 이름&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하시면 됩니다. 예시를 직접 보여드리겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저는 base 환경만 썼습니다. 가상환경을 가볍게 하나 만들도록 할게요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;라는 가상환경을 만들었습니다. 먼저 &lt;strong&gt;kernel을 추가하지 않고&lt;/strong&gt; jupyter notebook을 실행해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/03.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 사진을 보시면 &lt;strong&gt;Python 3&lt;/strong&gt; 만 나오는걸 보실 수 있습니다. 저 &lt;strong&gt;Python 3&lt;/strong&gt; 는 base의 Python을 가리킵니다.&lt;br /&gt;
base에는 제가 tensorflow를 설치해놨기 때문에 import 가 잘 작동하는군요..&lt;br /&gt;
그럼 kernel을 추가해보겠습니다.  (일단 test 환경에 ipython 이 안깔려있어서 설치함..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/05.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커널을 추가하고 나면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Installed ~~~~&lt;/code&gt; 라는 메세지를 보실 수 있어요!&lt;br /&gt;
그럼 다시 base로 돌아가서 jupyter notebook을 실행해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/07.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/multi_kernel/08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 사진을 보시면 추가하기 전과는 다르게 &lt;strong&gt;test&lt;/strong&gt; 라는 항목이 추가되었습니다!&lt;br /&gt;
실행을 해봐도 tensorflow 모듈이 없다고 나오는걸 확인하실 수 있습니다!&lt;br /&gt;
앞으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda activate ~~&lt;/code&gt;를 안하셔도 되요! (뿌듯)&lt;/p&gt;

&lt;p&gt;이번 포스팅은 여기까지 입니다.&lt;br /&gt;
많은 분들께 도움이 되었으면 좋겠네요!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. jupyter notebook 우측 상단쪽에 어떤 커널로 실행하고 있는지 표시가 됩니다.  (&lt;code class=&quot;highlighter-rouge&quot;&gt;Logout&lt;/code&gt; 아래)&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/07/10/Multiple_Kernel/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/07/10/Multiple_Kernel/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python으로 DICOM 영상을 읽어보자!</title>
        <description>&lt;p&gt;예~~전에 &lt;a href=&quot;https://jjerry-k.github.io/python/2019/01/23/nifti/&quot;&gt;NIfTI&lt;/a&gt; 파일을 load 하는 방법을 올렸었습니다! &lt;br /&gt;
이번에는 Python에서 &lt;a href=&quot;https://www.dicomstandard.org&quot;&gt;DICOM&lt;/a&gt; 포맷의 데이터를 load 하는 방법에 대한 포스팅을 해보려고 합니다.&lt;/p&gt;

&lt;p&gt;가장 먼저 관련 패키지인 &lt;a href=&quot;https://pydicom.github.io/pydicom/stable/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pydicom&lt;/code&gt;&lt;/a&gt; 을 설치를 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge pydicom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저번과 똑같이 단순한 설치방법!&lt;/p&gt;

&lt;p&gt;이제 코딩으로 읽어보겠습니다.&lt;br /&gt;
예시 데이터로 다음 &lt;a href=&quot;https://github.com/pydicom/pydicom/blob/master/pydicom/data/test_files/MR_small.dcm&quot;&gt;링크&lt;/a&gt;에 있는 영상을 이용하였습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pydicom&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.dcm 경로&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#data = di.dcmread(&quot;.dcm 경로&quot;) # 편한거 쓰시면 됩니다.
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel_array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 슬라이스 1장일 경우
#plt.imshow(img[:,:,&quot;slice 번호&quot;]) # 슬라이스가 여러 장일 경우
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 작성하시면 됩니다.&lt;br /&gt;
 예시를 보여드리면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dicom/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예시 영상이 좀 작네요…&lt;br /&gt;
어쨌든 이런 식으로 읽습니다.&lt;/p&gt;

&lt;p&gt;흠….NIfTI와 DICOM을 했으니…다음엔 &lt;strong&gt;Insight Meta-Image&lt;/strong&gt; 를 해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/07/06/DICOM/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/07/06/DICOM/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>MRI interpolation using Deep Learning - [1]</title>
        <description>&lt;h1 id=&quot;deep-generative-adversarial-networks-for-thin-section-infant-mr-image-reconstruction&quot;&gt;Deep Generative Adversarial Networks for Thin-Section Infant MR Image Reconstruction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Jiaqi Gu&lt;sup&gt;1&lt;/sup&gt;, Zezu Li&lt;sup&gt;1&lt;/sup&gt;, YuanYuan Wans&lt;sup&gt;1, 3&lt;/sup&gt;, Haowei Yang&lt;sup&gt;2&lt;/sup&gt;, Zhongwei Qiao&lt;sup&gt;2&lt;/sup&gt;, and Jinhua Yu&lt;sup&gt;1, 3&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;School of Information Science and Technology, Fudan University, Shanghai 200433, China&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt;The Children’s Hospital of Fudan University, Shanghai 201102, China&lt;br /&gt;
&lt;sup&gt;3&lt;/sup&gt;Key Laboratory of Medical Imaging Computing and Computer Assisted Intervention of Shanghai, Department of Electronic Engineering, Institute of Functional
and Molecular Medical Imaging, Fudan University, Shanghai 200433, China
—&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Thin section magnetic resonance images (&lt;strong&gt;Thin MRI&lt;/strong&gt;) 는 뇌수술, 뇌 구조 분석에 좋은 영상.&lt;/li&gt;
  &lt;li&gt;하지만 Thick section magnetic resonance images (&lt;strong&gt;Thick MRI&lt;/strong&gt;) 에 비해 imaging cost가 많이 들기 때문에 잘 사용되지 않음.&lt;/li&gt;
  &lt;li&gt;Thick MRI 2 Thin MRI 제안.&lt;/li&gt;
  &lt;li&gt;Two stage( GAN -&amp;gt; CNN )로 구성하였고 Thick MRI의 Axial, Sigittal plane을 이용하여 Thin MRI의 Axial reconstruction.&lt;/li&gt;
  &lt;li&gt;3D-Y-Net-GAN 은 Axial, Sagittal Thick MRI 를 이용하여 Fusion.&lt;/li&gt;
  &lt;li&gt;3D-Dense U-Net은 Sagittal plane에 대해 세부적인 calibrations, structual correction 제공.&lt;/li&gt;
  &lt;li&gt;Loss function 은 structual detail을 Network가 capture 할 수 있도록 제안.&lt;/li&gt;
  &lt;li&gt;bicubic, sparse representation, 3D-SRU-Net 과 비교.&lt;/li&gt;
  &lt;li&gt;35번의 Cross-validation, 114개를 이용하여 두개의 testset 구성.
    &lt;ul&gt;
      &lt;li&gt;PSNR : 23.5 % 증가.&lt;/li&gt;
      &lt;li&gt;SSIM : 90.5 % 증가.&lt;/li&gt;
      &lt;li&gt;MMI : 21.5 % 증가.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Thin MRI 는 slice thickness가 1mm이고 sapcing gap이 0mm.&lt;/li&gt;
  &lt;li&gt;하지만 항상 Thin MRI를 사용할 수 없음.&lt;/li&gt;
  &lt;li&gt;일반적으로 사용하는 Thick MRI는 slice thickness가 4~6mm 이고 sapcing gap이 0.4~1mm.
    &lt;ul&gt;
      &lt;li&gt;해상도 : Thin MRI &amp;gt; Thick MRI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인간의 뇌 발달에 대한 insight를 주기 때문에 유아의 brain MR image는 어른의 brain MR image 보다 연구에 가치가 있음&lt;/li&gt;
  &lt;li&gt;하지만 유아의 MR image를 얻는게 쉽지 않음.&lt;/li&gt;
  &lt;li&gt;그래서 Thick to Thin 제안.&lt;/li&gt;
  &lt;li&gt;기존 traditional interpolation algorithm
    &lt;ul&gt;
      &lt;li&gt;시각적으로는 성능이 좋아보임. 하지만 성인의 brain 에 초점을 맞춤.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4478865/pdf/JMI-001-034007.pdf&quot;&gt;Interpolation-based super-resolution reconstruction: effects of slice thickness&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.hindawi.com/journals/ijbi/2013/395915/&quot;&gt;Evaluation of interpolation effects on upsampling and accuracy of cost functions-based optimized automatic image registration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Frame interpolation 방법과 같이 적용 가능.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=8110374&quot;&gt;Slice Interpolation in MRI Using a Decomposition-reconstruction Method&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Super-resolution 문제로 적용할 수도 있음.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=5466111&quot;&gt;Image super-resolution via sparse representation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CNN, GAN 이 발전하면서 super-resolution 이 탄력을 받음.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-319-67564-0_12&quot;&gt;Context-Sensitive Super-Resolution for Fast Fetal Magnetic Resonance Imaging&lt;/a&gt;&lt;/strong&gt;]&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8417964&quot;&gt;Deep Generative Adversarial Neural Networks for Compressive Sensing MRI&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이전에 성인의 Thick MRI를 Thin MRI 로 reconstruction 하는 3D-SRGAN 제안했으나 axial plane만 고려했음. &lt;strong&gt;[&lt;a href=&quot;https://link.springer.com/chapter/10.1007%2F978-3-319-67389-9_38&quot;&gt;Reconstruction of Thin-Slice Medical Images Using Generative Adversarial Network&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Deep Learning 이 reconstruction performance 뿐 아니라 reconstruction time 감소에도 매우 효과적인걸 보임.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proposed-method&quot;&gt;Proposed Method&lt;/h2&gt;

&lt;h3 id=&quot;a-overview&quot;&gt;A. Overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CNN은 기존에도 super-resolution에서 많이 사용됨.&lt;/li&gt;
  &lt;li&gt;하지만 최근까지 제안된 Network는 대부분 2D image에 대한 upscaling.&lt;/li&gt;
  &lt;li&gt;몇몇 Network는 3D image로 확장했지만 그렇게 효과를 보지 못했음.&lt;/li&gt;
  &lt;li&gt;이 논문의 Flow
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig01.PNG&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig02.PNG&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-network-architecture&quot;&gt;B. Network Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;First stage는 3D-Y-Net-GAN 으로 Thick MRI를 Thin MRI로 생성 후 3D-DenseU-Net으로 recalibration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3d-y-net-gan&quot;&gt;3D-Y-Net-GAN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Input : Axial, Sagittal Thick MRI&lt;/li&gt;
  &lt;li&gt;Output : Thin MRI&lt;/li&gt;
  &lt;li&gt;r : Upscaling Factor ( r = 8 일 경우의 예시 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig03.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Feature Extraction Branches
    &lt;ul&gt;
      &lt;li&gt;각 input에 대한 feature 추출.&lt;/li&gt;
      &lt;li&gt;Maxpooling layer에서 [1, 2, 1], [2, 1, 1]의 다른 strides factor 적용.&lt;/li&gt;
      &lt;li&gt;3D convolutional layer 는 Convolution + Batch Normalization + Swish 로 구성.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1710.05941.pdf&quot;&gt;Swish&lt;/a&gt;는 Activation 의 종류로 ReLU로 인해 생기는 Dead neuron을 극복할 수 있음. &lt;strong&gt;-&amp;gt; 근데 굳이 왜 swish일까…&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;layers 를 거친 후 shape 의 변화
        &lt;ul&gt;
          &lt;li&gt;Axial : [H, W, S, 1] -&amp;gt; [H/2, W/2, S, 32]&lt;/li&gt;
          &lt;li&gt;Sagittal : [H, W, r*S, 1] -&amp;gt; [H/2, W/2, S, 32]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Axial과 Sagittal의 shape이 다르기 때문에 Sagittal 에 대해서 preprocessing으로 3개의 3d convolution layer 적용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Feature Fusion Branch
    &lt;ul&gt;
      &lt;li&gt;두 feature를 channel 방향으로 Concatanation.&lt;/li&gt;
      &lt;li&gt;W 방향으로 Upsampling 후 H 방향으로 Downsampling feature 를 Concatanation.&lt;/li&gt;
      &lt;li&gt;H 방향으로 Upsampling 후 첫번째 Block의 Feature map을 Concatanation&lt;/li&gt;
      &lt;li&gt;U-Net 에서 아이디어를 얻었고 structual alignment, gradient-vanishing 등을 완화.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reconstruction Branch
    &lt;ul&gt;
      &lt;li&gt;Figure 3 (b) 와 같은 구조.&lt;/li&gt;
      &lt;li&gt;Upsampling layer 3개를 연속으로 붙여서 8배 확장하는 구조 대신에 Multipath upscaling strategy 적용. &lt;strong&gt;-&amp;gt; Artifact 완화 효과…?&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discriminator
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig04.PNG&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Axial Image, Saggital Image, Combination Image 가 Real Pair인지 Fake Pair인지 감별.&lt;/li&gt;
      &lt;li&gt;Input : ($I^A$, $I^Y$, $I^S$), ($I^A$, $I^{GT}$, $I^S$)&lt;/li&gt;
      &lt;li&gt;Output : Real, Fake&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3d-denseu-net&quot;&gt;3D-DenseU-Net&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig05.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체적인 구조는 U-Net이지만 2개의 Enhanced residual block 을 적용하여 detail recalibration.&lt;/li&gt;
  &lt;li&gt;Input :  $I^Y$, $I^S$, $I^{YA}$ &lt;strong&gt;-&amp;gt; 어떻게 3개가 input으로…?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Output : Thin MR Image&lt;/li&gt;
  &lt;li&gt;$I^A$ 를 $I^Y$ 의 해당 위치에 insertion 하여 $I^{YA}$ 생성. -&amp;gt; 아직 이해 X..
    &lt;ul&gt;
      &lt;li&gt;Axial Information 을 이용하여 정확한 axial 을 만들기 위해…&lt;/li&gt;
      &lt;li&gt;$I^S$ 를 $I^Y$ 에 insertion하게 되면 Sagittal 에 대한 information 이 과해지기 때문에 Reconstrtion Axial Image의 Quality 가 안좋아 질 것!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;End-to-End 가 아니라 각각 따로따로 학습. &lt;strong&gt;-&amp;gt; Faster RCNN 과 같은 방식으로 할런지….?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;loss-function&quot;&gt;Loss Function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;$G$ 는 generator 라는 의미.&lt;/li&gt;
  &lt;li&gt;Self-Adaptive Charbonnier Loss
    &lt;ul&gt;
      &lt;li&gt;일반적으로 많이 사용되는 $\ell2$ 전반적으로 Smoothing 하게 만들어지고 $\ell1$ 은 GT와 Prediction 의 차이로 indiscriminate 하게 학습.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1704.03915.pdf&quot;&gt;Deep Laplacian Pyramid Networks for Fast and Accurate Super-Resolution&lt;/a&gt;에 따르면 &lt;strong&gt;Charbonnier loss&lt;/strong&gt;(미분가능한 $\ell1$의 분산)가 $\ell1$, $\ell2$ 보다 성능이 뛰어남.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1706.03142.pdf&quot;&gt;Deep Learning for Isotropic Super-Resolution from Non-Isotropic 3D Electron Microscopy&lt;/a&gt; 에 따르면 &lt;strong&gt;Cubic-weighted mean square error&lt;/strong&gt; 가 Generated 영상과 Ground truth 간의 차이가 큰 “어려운” 부분의 성능을 강조.&lt;/li&gt;
      &lt;li&gt;다음과 같은 Loss 제안.&lt;/li&gt;
      &lt;li&gt;$\epsilon$ 은 default로 $10^{-6}$&lt;/li&gt;
      &lt;li&gt;$L^G_{SC} = \frac{1}{rLWH}\sum_{x,y,z=1,1,1}^{L,W,rH}\sqrt{(I^{GT}&lt;em&gt;{x,y,z}-I^Y&lt;/em&gt;{z,y,z})^2+\epsilon}\cdot\bigg(\frac{1}{2}+\frac{(I^{GT}&lt;em&gt;{x,y,z}-I^Y&lt;/em&gt;{z,y,z})^2}{2max((I^{GT}-I^Y)^2)}\bigg)$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3-D Gradient Correction Loss
    &lt;ul&gt;
      &lt;li&gt;Charbonnier Loss는 Pixelwise difference에 대한 Loss, Gradient에 대한 손실을 줄 수 있음.&lt;/li&gt;
      &lt;li&gt;다음과 같이 각 axis에 대한 Gradient 를 이용하여 Loss 제안.&lt;/li&gt;
      &lt;li&gt;$L^G_{GC} = \mathbb{E}[(\nabla_xI^{GT}&lt;em&gt;{x,y,z}-\nabla_xI^Y&lt;/em&gt;{x,y,z})^2] \ + \mathbb{E}[(\nabla_yI^{GT}&lt;em&gt;{x,y,z}-\nabla_yI^Y&lt;/em&gt;{x,y,z})]^2\ + \mathbb{E}[(\nabla_zI^{GT}&lt;em&gt;{x,y,z}-\nabla_zI^Y&lt;/em&gt;{x,y,z})^2]$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Adversarial Loss
    &lt;ul&gt;
      &lt;li&gt;LSGAN Loss 사용.&lt;/li&gt;
      &lt;li&gt;$L^D=\frac{1}{2}\mathbb{E}[(D(I^{GT}, I^A, I^S)-1)^2+(D(I^Y, I^A, I^S)-0)^2]$&lt;/li&gt;
      &lt;li&gt;$L^G_{AD}=\mathbb{E}[(D(I^Y, I^A, I^S)-1)^2]$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;$\ell_2$ Weight Regularization Loss
    &lt;ul&gt;
      &lt;li&gt;(Loss는 아니지만…)&lt;/li&gt;
      &lt;li&gt;Overfitting을 방지하기 위해 사용.&lt;/li&gt;
      &lt;li&gt;$L^G_{WR} = \sum\Vert W_G\Vert^2_2$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3D-Y-Net-GAN Loss : $L_G = L^G_{SC} + \lambda_1L^G_{GC} + \lambda_2L^G_{AD} + \lambda_3L^G_{WR}$&lt;/li&gt;
  &lt;li&gt;3D-DenseU-Net Loss : $L = L_{SC} + \lambda_1L_{GC} + \lambda_3L_{WR}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;experimental-result&quot;&gt;Experimental Result&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Multiplanar 의 효율성을 검증하기 위해 다음과 같이 세 가지 경우로 나눔.
    &lt;ul&gt;
      &lt;li&gt;1) Axial, Sagittal 둘 다 이용.&lt;/li&gt;
      &lt;li&gt;2) Axial 만 이용.&lt;/li&gt;
      &lt;li&gt;3) Saigittal 만 이용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Loss function을 검증하기 위해 네 가지 경우로 나눔.
    &lt;ul&gt;
      &lt;li&gt;1) $\ell1norm + L_{GC} + L_{AD} + L_{WR}$ (pixelwise loss를 $\ell1norm$으로 대체.)&lt;/li&gt;
      &lt;li&gt;2) $L_{SC} + L_{GC} + L_{WR}$&lt;/li&gt;
      &lt;li&gt;3) $L_{SC} + L_{AD} + L_{WR}$&lt;/li&gt;
      &lt;li&gt;4) $L_{SC} + L_{GC} + L_{AD} + L_{WR}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evalutaion Method 로는 아래와 같이 네 가지 기법과 자신들의 Network
    &lt;ul&gt;
      &lt;li&gt;1) &lt;a href=&quot;https://ieeexplore.ieee.org/document/1163711&quot;&gt;Bicubic interpolation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2) &lt;a href=&quot;https://ieeexplore.ieee.org/document/5466111&quot;&gt;Sparse representation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;3) &lt;a href=&quot;https://arxiv.org/abs/1706.03142&quot;&gt;3D-SRU-Net&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;4) 3D-Y-Net-GAN&lt;/li&gt;
      &lt;li&gt;5) 3D-Y-Net-GAN + 3D-DenseU-Net&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Metrics으로는 다음 세 가지 사용.
    &lt;ul&gt;
      &lt;li&gt;PSNR(Peak Signal-to-Noise Ratio)
&lt;script type=&quot;math/tex&quot;&gt;\begin{alignedat}{2}
MAX_I = 255\\
PSNR = 20\cdot\log_{10}\Bigg(\frac{MAX_I}{\sqrt{\frac{1}{rLWH}\sum_{x, y, z}(I^R_{x,y,z}-I^{GT}_{x,y,z})^2}}\Bigg)
\end{alignedat}&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;SSIM(Structural SIMilarity)
&lt;script type=&quot;math/tex&quot;&gt;\begin{alignedat}{2}
L : 255(\text{dynamic range})\\
\mu : \text{Variance}\\
\mu_{ab} : \text{Covariance}\\
c_1 = (k_1L)^2\\
c_2 = (k_2L)^2\\
SSIM=\frac{(2\mu_a\mu_b+c_1)(2\sigma_{ab}+c_2)}{(\mu_a^2+\mu_b^2+c_1)(\sigma_a^2+\sigma_b^2+c_2)}
\end{alignedat}&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;NMI(Normalized Mutual Information)
&lt;script type=&quot;math/tex&quot;&gt;\begin{alignedat}{2}
H(X) = -\sum_{x_i}\in{X}p(x_i)\log{p(x_i)} \\
H(X, Y) = -\sum_{y_i\in{Y}} \sum_{x_i\in{X}}p(x_i, y_i)\log{p(x_i, y_i)}\\
NMI(X, Y) = 2\frac{H(X) + H(Y) - H(X, Y)}{H(X)+H(Y)}
\end{alignedat}&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pixel 값을 [-1, 1]로 clipping -&amp;gt; 다시 8-bit gray scale로 변환.&lt;/li&gt;
  &lt;li&gt;Generated MR images 와 Ground truth가 비슷할 수록 높은 값을 가짐.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-data-and-preprocessing&quot;&gt;A. Data and Preprocessing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;총 154 samples의 2~5세 유아 Axial, Sagittal Thick MRI, Axial Thin MRI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab01.PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Table 1. 과 같은 parameter 사용.&lt;/li&gt;
  &lt;li&gt;Dataset 분할
    &lt;ul&gt;
      &lt;li&gt;Cross Validation Dataset : 40 samples&lt;/li&gt;
      &lt;li&gt;Test 1 Dataset : 65 samples&lt;/li&gt;
      &lt;li&gt;Test 2 Dataset : 49 samples&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Preprocessing
    &lt;ul&gt;
      &lt;li&gt;각 영상별로 다른 parameter를 가지고 있고 intensities 도 다양하기 때문에 spatial misalignment, intensity imblance를 발견.&lt;/li&gt;
      &lt;li&gt;Registration을 위해 SPM12 를 이용하여 unified spatial normalization 수행.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;DICOM to NIfTI&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;Segment gray matter, white matter, cerebrospinal fluid, skull, scalp, and air mask.&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;Nonlinear deformation field&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;ICBM Asian brain template in affine regularization&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Grayscale Normalization
        &lt;ul&gt;
          &lt;li&gt;MRI 는 16 bit..&lt;/li&gt;
          &lt;li&gt;단순 linear transformation 으로 [-1, 1]로 mapping.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Histogram Matching
        &lt;ul&gt;
          &lt;li&gt;고정된 샘플을 reference로 histogram matching 적용.&lt;/li&gt;
          &lt;li&gt;histogram imbalance 제거.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Augmentation
    &lt;ul&gt;
      &lt;li&gt;Radial Transformation
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://arxiv.org/pdf/1708.04347.pdf&quot;&gt;Image Augmentation using Radial Transform for Training Deep Neural Networks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Mirror Reflection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;b-experimental-settings&quot;&gt;B. Experimental Settings&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;5-fold cross-validation 적용.&lt;/li&gt;
  &lt;li&gt;35 개중 랜덤으로 28:7로 training:validation . &lt;strong&gt;-&amp;gt; 앞에선 40개라더니..?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Training 3D-Y-Net-GAN
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 16&lt;/li&gt;
      &lt;li&gt;Epochs : 200&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1412.6980.pdf&quot;&gt;Adam Optimizer Parameter&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Learning rate schedule
            &lt;ul&gt;
              &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
              &lt;li&gt;Decay Step : 252&lt;/li&gt;
              &lt;li&gt;Decay rate : 0.989&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$\lambda_1, \lambda_2, \lambda_3$ : 0.2, 0.02, 0.1&lt;/li&gt;
      &lt;li&gt;He initializer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Training 3D-DenseU-Net
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 12&lt;/li&gt;
      &lt;li&gt;Epochs : 300&lt;/li&gt;
      &lt;li&gt;Adam Optimizer Parameter
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Learning rate schedule
            &lt;ul&gt;
              &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
              &lt;li&gt;Decay Step : 373&lt;/li&gt;
              &lt;li&gt;Decay rate : 0.989&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;$\lambda_1, \lambda_3$ : 1, 0.001&lt;/li&gt;
      &lt;li&gt;He initializer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SR Parameter
    &lt;ul&gt;
      &lt;li&gt;Dictionary size = 512&lt;/li&gt;
      &lt;li&gt;Patch number = 100,000&lt;/li&gt;
      &lt;li&gt;Patch size = 13 x 13&lt;/li&gt;
      &lt;li&gt;Sparsity Regularization = 0.15&lt;/li&gt;
      &lt;li&gt;Overlap = 12.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Training 3D-SRU-Net
    &lt;ul&gt;
      &lt;li&gt;Batch Size : 32&lt;/li&gt;
      &lt;li&gt;Epochs : 300&lt;/li&gt;
      &lt;li&gt;Adam Optimizer Parameter
        &lt;ul&gt;
          &lt;li&gt;$\beta_1$: 0.9&lt;/li&gt;
          &lt;li&gt;Initial value : 5*10&lt;sup&gt;-4&lt;/sup&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c-ablation-experiment-on-input-data&quot;&gt;C. Ablation Experiment On Input Data&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Input을 변경하면서 실험 진행. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig06.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab02.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Axial 과 Sagittal 을 같이 사용했을 때가 좀 더 세부적인 구조, 적은 왜곡을 보임.
    &lt;ul&gt;
      &lt;li&gt;두 축의 영상이 서로 조합하여 reconstruction task를 향상.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Quantitive evaluation 에서도 더 높은 지표를 산출.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;d-ablation-experiment-on-loss-function&quot;&gt;D. Ablation Experiment On Loss Function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Loss를 변경하면서 실험 진행.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig07.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab03.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Self-Adaptive Charbonnier Loss에 비해 $\ell1$ norm 이 흐린 영상을 생성.&lt;/li&gt;
  &lt;li&gt;Without Gradient Correction Loss
    &lt;ul&gt;
      &lt;li&gt;덜 선명한 영상을 생성.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Without Adversarial Loss
    &lt;ul&gt;
      &lt;li&gt;덜 realistic 영상을 생성. &lt;strong&gt;-&amp;gt; ?????그냥 쓴 말인가..&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Table3 …지표 좀 이상..&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;e-comparison-with-other--methods&quot;&gt;E. Comparison With Other  Methods&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;다른 Method들과 비교.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/fig08.PNG&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/thin/tab04.PNG&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;제안한 method로 생성된 image가 가장 Realistic하고 Ground truth 와 가장 비슷하다고 함.&lt;/li&gt;
  &lt;li&gt;대부분 Quantitative evaluation 에서 제안한 method가 다른 것들을 다 뛰어넘음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;제안한 Method 에선 Data preprocessing이 매우 중요하다……&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2019/07/05/Thin/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2019/07/05/Thin/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>(개인적으로) 무.조.건 설치하는 Anaconda 패키지</title>
        <description>&lt;p&gt;이번 포스팅은 제가 많이 쓰는 패키지들에 대해서 적어보려고 합니다. &lt;br /&gt;
추후에 포맷하고 다시 세팅할 수도 있으니까….&lt;br /&gt;
저는 Anaconda가 아닌 &lt;strong&gt;Miniconda&lt;/strong&gt;를 사용하기 때문에 어지간하면 하나 하나 설치를 해줘야해요. 
물론 머리로는 기억하고 있지만 커맨드 쓰기가 귀찮으니…적어놓으려고 합니다!&lt;br /&gt;
각각 설명은…생략할거에요. 보시는 분들 구글링 실력을 믿습니다.&lt;/p&gt;

&lt;h4 id=&quot;scientific-uses&quot;&gt;Scientific uses&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;numpy, scipy, pandas&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install numpy scipy pandas&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visualization&quot;&gt;Visualization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;matplotlib, seaborn&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install matplotlib seaborn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;image-processing&quot;&gt;Image Processing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pillow, scikit-image, opencv&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install pillow scikit-image opencv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ml--dl&quot;&gt;ML &amp;amp; DL&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;scikit-learn, tensorflow, pytorch (keras도 썼었는데…이번에 뺐어요..)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install scikit-learn tensorflow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c pytorch pytorch torchvision&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;medical-image-processing&quot;&gt;Medical Image Processing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pydicom, nibabel, simpleitk&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c conda-forge pydicom nibabel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install -c SimpleITK SimpleITK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools&quot;&gt;Tools&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;tqdm, jupyter, jupyter-lab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda install  tqdm jupyter jupyterlab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이….정도네요!&lt;br /&gt;
솔직히 제가 이렇게 포스팅을 하는 이유는….&lt;br /&gt;
이미 제 노트북을…한번 갈아엎었습니다…&lt;br /&gt;
conda 를 4.7.5 로 올리는 순간…모든게 날아갔거든요.&lt;br /&gt;
하…얼른 세팅하러 갑니다..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; conda 를 조심하세요…&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/06/30/conda_package/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/06/30/conda_package/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Seaborn Tutorial Part 1-A</title>
        <description>&lt;h1 id=&quot;index&quot;&gt;Index&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-visualizing-statistical-relationships&quot;&gt;A. Visualizing statistical relationships&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#relating-variables-with-scatter-plots&quot;&gt;Relating variables with scatter plots&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#emphasizing-continuity-with-line-plots&quot;&gt;Emphasizing continuity with line plots&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#aggregation-and-representing-uncertainty&quot;&gt;Aggregation and representing uncertainty&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#plotting-subsets-of-data-with-semantic-mappings&quot;&gt;Plotting subsets of data with semantic mappings&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#plotting-with-date-data&quot;&gt;Plotting with date data&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#showing-multiple-relationships-with-facets&quot;&gt;Showing multiple relationships with facets&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-visualizing-statistical-relationships&quot;&gt;A. Visualizing statistical relationships&lt;/h2&gt;
&lt;p&gt;Relationships 시각화에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 이라는걸 주로 사용합니다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt;라는 옵션으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;scatter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt; 을 그릴 수 있습니다.&lt;br /&gt;
일단! 다음과 같이 기본적인 패키지를 import 하고 진행하겠습니다!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;darkgrid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 추후 Part 3 에서 다룰 내용!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;relating-variables-with-scatter-plots&quot;&gt;Relating variables with scatter plots&lt;/h3&gt;
&lt;p&gt;Scatter plot을 해볼겁니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;scatterplot()&lt;/code&gt;을 사용해도 되지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt;을 사용해서 그려보겠습니다.&lt;br /&gt;
가장 먼저 … 사용할 데이터를 읽어오겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tips&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위를 실행하면 다음 사진과 같이 출력이 나옵니다.&lt;br /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/001.png&quot; /&gt;&lt;br /&gt;
정확히 무슨 데이터인지는 모르겠지만… 어떤 가게의 가계부…? 같습니다.
총 금액, 팁, 성별, 흡연 여부, 요일, 시간대, 크기(…?) 등의 카테고리가 있네요.&lt;br /&gt;
그럼 한번 plot 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/002.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 figure가 나오네요!&lt;br /&gt;
x, y, data에 들어간 의미를 알아볼까요?
&lt;code class=&quot;highlighter-rouge&quot;&gt;x=&lt;/code&gt; 는 x축을 어떤 데이터로 할지 정하는 부분입니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;y=&lt;/code&gt; 는 당연히 y축이겠죠?
&lt;code class=&quot;highlighter-rouge&quot;&gt;data=&lt;/code&gt; 는 어떤 data를 plot에 사용할지 적는 부분입니다.&lt;br /&gt;
그래서 plot하는 코드를 풀어서 얘기해보자면&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;tips&lt;/code&gt;라는 DataFrame에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;total_bill&lt;/code&gt;을 x축으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;tip&lt;/code&gt;을 y축으로 골라서 scatter plot 하라는 얘기입니다.&lt;br /&gt;
좀 더 해볼까요?&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/003.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x, y, data&lt;/code&gt;는 위랑 다를게 없는데… &lt;code class=&quot;highlighter-rouge&quot;&gt;hue&lt;/code&gt;라는 옵션이 추가가 되었습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;hue='smoke'&lt;/code&gt;라고 흡연 여부에 대해 색상으로 표시를 해줍니다!&lt;/p&gt;

&lt;p&gt;하나 또 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/004.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; 옵션이 추가되었어요!
&lt;code class=&quot;highlighter-rouge&quot;&gt;style='smoker'&lt;/code&gt;를 추가해주면서 plot 스타일이 추가되었네요!&lt;br /&gt;
다음 사진은 &lt;code class=&quot;highlighter-rouge&quot;&gt;style=&quot;time&quot;&lt;/code&gt; 옵션을 준거에요!&lt;br /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/005.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;색으로는 흡연여부&lt;/strong&gt;를 표시하고 &lt;strong&gt;plot 스타일로는 시간대&lt;/strong&gt;를 표시해주네요!&lt;/p&gt;

&lt;p&gt;자, &lt;code class=&quot;highlighter-rouge&quot;&gt;hue&lt;/code&gt; 옵션의 또 다른 예시입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/006.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 예시에선 &lt;strong&gt;Yes&lt;/strong&gt; or &lt;strong&gt;No&lt;/strong&gt; 였죠.&lt;br /&gt;
이번 수치에 대해 색별로 의미를 줬습니다!&lt;br /&gt;
다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;pallette&lt;/code&gt; 옵션을 줘서 색을 바꿀 수도 있어요!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pallette&lt;/code&gt;에 대한 자세한건 &lt;strong&gt;Part 3&lt;/strong&gt; 에서 다루겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch:r=-.5,l=.75&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/007.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오…scatter plot의 끝이 보여요…&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; 옵션입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/008.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size=&quot;size&quot;&lt;/code&gt;라고 옵션을 줬어요!&lt;br /&gt;
plot의 크기에 따라 의미가 나뉘어졌습니다!&lt;br /&gt;
다음고 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;sizes&lt;/code&gt;를 이용해서 크기 범위를 정해줄수도 있네요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/009.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;emphasizing-continuity-with-line-plots&quot;&gt;Emphasizing continuity with line plots&lt;/h3&gt;

&lt;p&gt;이 파트는 연속적인 값을 가진 데이터에 대한 plot입니다.&lt;br /&gt;
다음과 같이 DataFrame을 하나 만들어 봅시다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/010.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;결과는 사진과 다를 수 있어요!&lt;br /&gt;
time, value 를 가지고 있다는 거에 초점을 맞추시면 됩니다!&lt;br /&gt;
일별로 뭔가 값이 들어가 있네요.&lt;br /&gt;
이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 을 이용하여 그려보겠습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt; 옵션에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;line&quot;&lt;/code&gt; 라고 주면 됩니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;autofmt_xdata()&lt;/code&gt; 라는건 이름에서 유추할 수 있듯이 x 축 레이블을 데이터에 맞게 format을 자동으로 맞춰주는거에요!&lt;br /&gt;
지금은 x 축이 날짜니까 날짜에 대해선 x 축 레이블을 살짝쿵 기울인거에요!&lt;br /&gt;
이걸 쓰지 않으면 날짜가 겹쳐질거에요…(한번 해보세요..)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g = sns.relplot(x=&quot;time&quot;, y=&quot;value&quot;, kind=&quot;line&quot;, data=df)
g.fig.autofmt_xdate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/011.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 예시는 x 축이 연속적이지만 시계열 데이터였습니다!&lt;br /&gt;
만약 연속적이지만 이동경로와 같이 x, y 축 좌표만 가진 데이터라면?&lt;br /&gt;
예시를 들어볼게요! 다음과 같이 x, y 에 대한 데이터를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/012.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;이런 위치에 대한 데이터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort = False&lt;/code&gt; 옵션을 줘야합니다!&lt;br /&gt;
그렇지 않으면 …. x 데이터를 자동으로 sorting 해서 plot 해버립니다..&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/013.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aggregation-and-representing-uncertainty&quot;&gt;Aggregation and representing uncertainty&lt;/h4&gt;

&lt;p&gt;이 파트는 집계 및 신뢰구간 표시에 대한 설명입니다.&lt;br /&gt;
&lt;strong&gt;seaborn&lt;/strong&gt;은 기본 값으로 95% 신뢰구간을 표시해준다고 하녜요!&lt;br /&gt;
다음과 같이 데이터를 load 해줍니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/014.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;fmri data 군요! 일단 무슨 의미인지 잘 모르겠습니다!&lt;br /&gt;
각 환자별로 timepoint 를 가지고 signal을 가지는건 알겠네요..&lt;br /&gt;
이 데이터를 이용해 다음과 같이 plot을 해봅시다!&lt;br /&gt;
뭔가 선이랑 범위(?)로 보이는 불투명한 부분이 생겼습니다!&lt;br /&gt;
선은 해당 timepoint 에서 signal 의 mean 값이고 불투명한 부분은 신뢰구간을 의미합니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/015.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;“그럼…이런 데이터는 항상 신뢰구간을 같이 봐야하는가?”&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;아닙니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;(Confidence Intervals) 옵션을 바꿔주면 됩니다!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ci=None&lt;/code&gt; 이라고 옵션을 주고 plot을 하면 신뢰구간이 표현이 안됩니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/016.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 다른 옵션이 있습니다.&lt;br /&gt;
데이터가 매우 큰 경우! &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt; 옵션에 표준 편차를 넣어주면 각 timepoint 에서 분산을 표현해줍니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/017.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로… 이런 집계말고 정말 원본 그대로 plot 해보고 싶다면!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;estimator=None&lt;/code&gt;이라고 주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/018.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;plotting-subsets-of-data-with-semantic-mappings&quot;&gt;Plotting subsets of data with semantic mappings&lt;/h4&gt;

&lt;p&gt;이 파트에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt; 을 이용해서 scatter plot, line plot을 동시에 표현합니다.&lt;br /&gt;
데이터는 위 파트에서 썼던 &lt;strong&gt;fmri&lt;/strong&gt; 데이터를 사용합니다!&lt;br /&gt;
그리고 위 파트와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;relplot(kind=&quot;line&quot;)&lt;/code&gt;을 쓰지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;hue=&quot;event&quot;&lt;/code&gt;라는 옵션을 주도록합니다!&lt;br /&gt;
한번에 scatter plot과 line plot이 표현되네요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/019.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼…&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;도 추가해보도록 하죠!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;hue=&quot;region&quot;, style=&quot;event&quot;&lt;/code&gt;라고 옵션을 줍니다! &lt;br /&gt;
점점 표현해주는게 많아지죠?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 선 스타일과 마커 옵션을 줄 수도 있어요!&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dashes=False, markers=True&lt;/code&gt;를 추가해보세요!&lt;br /&gt;
점선이 모두 실선이 되었고 마커가 추가되었습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/021.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;괜히 정보가 많아지면…해석이 겁나 어려워질 수 있습니다..&lt;br /&gt;
다음과 같이 단순화하는게 좋을 때도 있습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/022.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;필요에 따라 모든 샘플 각각을 plot 해야하기도 하죠..&lt;br /&gt;
다음 예시는 &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;가 &lt;strong&gt;stim&lt;/strong&gt; 인 데이터들을 &lt;strong&gt;subject&lt;/strong&gt; 별로 plot을 합니다!&lt;br /&gt;
(저 plot이 되는 방법은 추후에 좀 더 자세히 설명을 적을게요!)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event == 'stim'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/023.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 Colormap을 조금씩 다뤄보는 구간입니다.&lt;br /&gt;
다음과 같이 데이터를 load 합니다!&lt;br /&gt;
(뭔지는 모르겠습니다…)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;align == 'dots'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/024.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;p&gt;지금까지 해왔던거 처럼 plot을 해봅니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/025.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;음….근데 위에 사진이 뭔가 부족하다고 느껴집니다.&lt;br /&gt;
자세히 보시면 그려지는 실선, 점선은 각각 6개인데 표현된 색상은 4개네요…&lt;br /&gt;
다음과 같이 작성하면 pallette를 custom하여 색상을 6개로 늘릴 수 있습니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cubehelix_palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/026.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또는 다음과 같이 Colormap을 Normalization 할 수도 있죠!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.colors&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogNorm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cubehelix_palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hue_norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/027.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아니면… 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;에 의미를 부여할 수도 있겠죠.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/028.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기선 Colormap 변경이 주요 내용이였습니다.&lt;br /&gt;
그럼 다음과 같이 Colormap도 주면서…&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;를 이용해서 의미를 부여하는 것도 가능하겠죠!?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firing_rate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coherence&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/029.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;plotting-with-date-data&quot;&gt;Plotting with date data&lt;/h4&gt;

&lt;p&gt;이전에 날짜 혹은 시간과 연관된 데이터를 사용할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;autofmt_xdata()&lt;/code&gt;라는 부분이 있었습니다.&lt;br /&gt;
이는 x축 레이블의 format을 자동으로 맞춰주는 부분이라고 했었는데요.&lt;br /&gt;
가령 포맷을 변경해야하는 상황이 발생한다면..?&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; 문서를 참고하여 변경하셔야합니다..&lt;br /&gt;
왜냐하면 seaborn의 뼈대가 matplotlib 이니까요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2017-1-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;img src=’https://jjerry-k.github.io/public/img/sb_part1a/030.png’ height=50% width=50%&amp;gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autofmt_xdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/031.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;showing-multiple-relationships-with-facets&quot;&gt;Showing multiple relationships with facets&lt;/h3&gt;

&lt;p&gt;지금까지는 단 1개의 figure 만 plot 했습니다!&lt;br /&gt;
하지만 보통..다수의 figure가 필요하죠..&lt;br /&gt;
이번엔 그 부분에 대한 내용입니다.&lt;br /&gt;
&lt;a href=&quot;https://seaborn.pydata.org/generated/seaborn.relplot.html#seaborn.relplot&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relplot()&lt;/code&gt;&lt;/a&gt;은 &lt;a href=&quot;https://seaborn.pydata.org/generated/seaborn.FacetGrid.html#seaborn.FacetGrid&quot;&gt;FacetGrid&lt;/a&gt; 기반이기 때문에 쉽게 가능합니다.&lt;br /&gt;
“facet” 이라는 단어가 나올텐데요.&lt;br /&gt;
이는 전체 figure 하나를 facet이라고 칭합니다.
다음과 같이 데이터를 load 하고 plot 해주세요!
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;time&quot;&lt;/code&gt; 이라는 옵션을 추가함으로써 &lt;strong&gt;Lunch&lt;/strong&gt;에 대한 figure와 &lt;strong&gt;Dinner&lt;/strong&gt;에 대한 figure &lt;strong&gt;두 개&lt;/strong&gt;가 plot 됩니다!&lt;br /&gt;
여기선 1x2 facet 이라고 할 수 있어요!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tips&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;total_bill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smoker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/032.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 다음과 같이 두 변수에 대해 figure를 나눌 수도 있습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;region&quot;, row=&quot;event&quot;&lt;/code&gt;라고 하면 &lt;strong&gt;행&lt;/strong&gt;은 &lt;strong&gt;“event”&lt;/strong&gt;를 기준으로 &lt;strong&gt;열&lt;/strong&gt;은 &lt;strong&gt;“region”&lt;/strong&gt;으로 총 4개가 plot 됩니다!&lt;br /&gt;
이건 2x2 facet!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/033.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fmri&lt;/strong&gt; 데이터의 경우 여러 subject가 있었습니다.&lt;br /&gt;
그 각각 subject 별로 figure를 만들고 싶을땐…?&lt;br /&gt;
다음과 같이 작성합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;col=&quot;subject&quot;, col_wrap=5&lt;/code&gt; 는 열을 &lt;strong&gt;subject&lt;/strong&gt;를 기준으로 5개씩 끊어서 plot 하겠다는 의미입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;는 facet의 높이(인치)를 정합니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aspect&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;에 맞춰 비율을 정하구요.&lt;br /&gt;
그럼 총 14개의 figure가 plot되고 3x5 facet이 생성됩니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timepoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;region == 'frontal'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/sb_part1a/034.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Part 1의 A 내용이였습니다.&lt;br /&gt;
그럼 “어떤 내용이 부족해요!”, “이 내용 잘 모르겠어요!” 하는 부분을 남겨주시면 추가하도록 할게요!&lt;br /&gt;
감사합니다!&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/05/09/Part1A/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/05/09/Part1A/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>맥북 Atom 완벽 제거</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;오늘은 .. Atom 에디터를 &lt;strong&gt;완벽히&lt;/strong&gt; 지우는 법에 대해 간단 포스팅을 하려고 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Applications 디렉토리에서 &lt;strong&gt;Atom&lt;/strong&gt;을 지운다.&lt;/li&gt;
  &lt;li&gt;home 디렉토리에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;.atom&lt;/code&gt; 디렉토리를 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/atom&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/apm&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Preferences/com.github.atom.plist&lt;/code&gt; 을 지운다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Preferences/com.github.atom.helper.plist&lt;/code&gt; 을 지운다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;끝입니다..&lt;/p&gt;

&lt;p&gt;Atom 에 대한 모~~든걸 지운거에요!&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2019/04/14/macbook_auto_start/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2019/04/14/macbook_auto_start/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>YOLO 리뷰</title>
        <description>&lt;h1 id=&quot;you-only-look-once-unified-real-time-object-detection&quot;&gt;You Only Look Once: Unified, Real-Time, Object detection&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;편의상 bounding box -&amp;gt; bbox&lt;/p&gt;
  &lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Object detection을 bboxes, class probabilities regression 문제로 접근.&lt;/li&gt;
  &lt;li&gt;Single Neural Network 로 bboxes와 class probabilities 둘 다 예측.&lt;/li&gt;
  &lt;li&gt;Localization Error가 다소 높지만 background error가 낮음.&lt;/li&gt;
  &lt;li&gt;End-to-End, Extremely fast&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Current Detection 시스템
    &lt;ul&gt;
      &lt;li&gt;DPM : Sliding Window 방식&lt;/li&gt;
      &lt;li&gt;R-CNN 계열 : potential bboxes 추출 -&amp;gt; image 에서 bboxes 부분 다시 classify -&amp;gt; Post-processing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slow, Hard to optimize(각 요소별로 따로따로 학습을 해야함. RPN -&amp;gt; Classifier -&amp;gt; RPN -&amp;gt; …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig01.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;복잡하지 않은 pipeline과 빠른 inferenc time.
    &lt;ul&gt;
      &lt;li&gt;45 fps on a Titan X .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지 전체를 이용한 prediction
    &lt;ul&gt;
      &lt;li&gt;Fast R-CNN 보다 적은 background error&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Object의 general한 representations 학습.
    &lt;ul&gt;
      &lt;li&gt;natural image로 학습하고 art works로 test 했을 때 기존의 DPM 이나 R-CNN 보다 성능이 좋았다.&lt;/li&gt;
      &lt;li&gt;새로운 도메인이나 뭔가 모를 입력에 대해 일반화 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-unfied-detection&quot;&gt;2. Unfied Detection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Single Neural Network로 통합.&lt;/li&gt;
  &lt;li&gt;이미지 전체를 이용해서 각각의 bbox 예측.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;입력 이미지를 S x S grid로 나눔.
    &lt;ul&gt;
      &lt;li&gt;Feature map이 S x S 라고 이해하면 됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 grid cell은 B개의 bbox의 정보(x, y, w, h, confidence score), 해당 grid cell의 Class probabilities 정보를 가짐.
    &lt;ul&gt;
      &lt;li&gt;bbox의 정보
        &lt;ul&gt;
          &lt;li&gt;x, y : bbox의 center 좌표&lt;/li&gt;
          &lt;li&gt;w, h : 이미지 크기에 대비한 상대적인 값.&lt;/li&gt;
          &lt;li&gt;confidence score : bbox가 object를 가졌는지 box가 얼마나 정확히 예측했는지에 대한 score&lt;/li&gt;
          &lt;li&gt;Confidence Score는 다음과 같이 정의.
&lt;script type=&quot;math/tex&quot;&gt;{Confidence\; Score}= Pr(Object) * IOU^{truth}_{pred}&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;No object의 경우
            &lt;ul&gt;
              &lt;li&gt;Confidence Score는 0 이어야함.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Confidence Score가 IOU와 같아지길 원함.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Class Probabilities 정보
        &lt;ul&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;C개의 class에 대한 conditional class probabilities, $Pr(Class_i&lt;/td&gt;
                  &lt;td&gt;Object)$&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Test 시에는 Conditional class probabilities와 individual box confidence score를 곱했다고 함.
&lt;script type=&quot;math/tex&quot;&gt;Pr(Class_i|Object) =  Pr(Object) * IOU^{truth}_{pred} = Pr(Class_i) * IOU^{truth}_{pred}&lt;/script&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;bbox 별로 class confidence score를 알 수 있음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PASCAL VOC 로 평가. S = 7, B = 2, C = 20&lt;/li&gt;
  &lt;li&gt;최종 출력은  7 x 7 x 30 의 tensor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-design&quot;&gt;2.1 Design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;24개의 Convolution layer, 2개의 Fully Connected layer.&lt;/li&gt;
  &lt;li&gt;GoogLeNet의 inception 모듈 대신에 &lt;span style=&quot;color:skyblue&quot;&gt;1 x 1 Convolution layer를 이용하여 reduction.&lt;/span&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig03_1.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Tiny model은 9개의 Convolution layer, 2개의 Fully Connected layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-training&quot;&gt;2.2 Training&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;앞 단의 20개의 Convolution layer(Feature Extractor)를 ImageNet 1000-class competition 데이터(224 x 224)로 Pretrain.&lt;/li&gt;
  &lt;li&gt;20번째 Convolution layer 뒤에 Average Pooling, Fully Connected Layer.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ImageNet 2012 validation set으로 top-5 accuracy 88% 정도..
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig03_2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pretrain 후 Detector 부분 추가 후 입력 크기를 448 x 448 로 높여서 학습 진행.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Bounding Box의 width, height 값은 이미지의 width, height로 normalize 하여 0 ~ 1 사이 값을 같도록 함.&lt;/li&gt;
  &lt;li&gt;Bounding Box의 x, y 값은 특정 grid cell의 left top으로부터 offset 값. 0 ~ 1 사이 값을 같도록 함.&lt;/li&gt;
  &lt;li&gt;마지막 layer는 linear activation function 사용.&lt;/li&gt;
  &lt;li&gt;다른 layer는 leaky ReLU 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\phi(x) =\left\{\begin{array}{lcl}x, &amp; if\;x &gt; 0\\ {0.1}x, &amp; otherwise\end{array} \right. %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Optimization이 쉬운 Sum-Squared Error 를 사용.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지의 대부분 grid cell이 object 를 가지고 있지 않기 때문에 Confidence Score가 0 에 수렴.&lt;/li&gt;
  &lt;li&gt;이 상황에선 object를 가지고 있는 grid cell의 gradient를 압도할 수 있음.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이를 해결하기 위해 Bbox coordinate loss와 No object의 confidence loss 에 대해 weight 를 부여.&lt;br /&gt;
$\lambda_{coord} = 5$ and $\lambda_{noobj} = 0.5$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Sum-Squared Error는 large boxes와 small boxes 를 동일하게 평가.&lt;/li&gt;
  &lt;li&gt;large boxes 에 대해서 중요성을 반영하기 위해 width, height 는 square root 사용.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{coord}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(x_i-\hat{x}_i)^2 + (y_i-\hat{y}_i)^2 \\
+ \lambda_{coord}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(\sqrt{w_i}-\sqrt{\hat{w}_i})^2 + (\sqrt{h_i}-\sqrt{\hat{h}_i})^2 \\
+ \sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{obj}_{ij}(C_i - \hat{C}_i)^2 \\
+ \lambda_{noobj}\sum^{S^2}_{i=0}\sum^B_{j=0}\mathbb{I}^{noobj}_{ij}(C_i - \hat{C}_i)^2 \\
+ \sum^{S^2}_{i=0}\mathbb{I}^{obj}_{i}\sum^B_{c\in{classes}}(p_i(c) - \hat{p}_i(c))^2&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;$\mathbb{I}^{obj}_{i}$ : Object가 존재하는 Grid Cell i.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$\mathbb{I}^{obj}_{ij}$ : Object가 존재하는 Grid Cell i의 Bounding Box j.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Train 관련 Parameter
    &lt;ul&gt;
      &lt;li&gt;Batch Szie : 64&lt;/li&gt;
      &lt;li&gt;Momentum : 0.9&lt;/li&gt;
      &lt;li&gt;Decay : 0.0005&lt;/li&gt;
      &lt;li&gt;Learning rate
        &lt;ul&gt;
          &lt;li&gt;$10^{-3}$ 부터 $10^{-2}$ 까지 천천히 증가.&lt;/li&gt;
          &lt;li&gt;$10^{-2}$ 로 75 epochs 학습.&lt;/li&gt;
          &lt;li&gt;$10^{-3}$ 로 줄여서 30 epochs 학습.&lt;/li&gt;
          &lt;li&gt;$10^{-4}$ 로 줄여서 30 epochs 학습.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Dropout : 0.5&lt;/li&gt;
      &lt;li&gt;Data Augmentation
        &lt;ul&gt;
          &lt;li&gt;Random Scaling, Translation of up to 20% of the original image size.&lt;/li&gt;
          &lt;li&gt;Random adjustment exposure and saturation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-inference&quot;&gt;2.3 Inference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Large Object 나 여러 grid cell에 걸쳐있는 object는 여러 셀에 predict 될 수 있음.&lt;/li&gt;
  &lt;li&gt;Non-maximal suppression 사용하여 해결.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-limitations-of-yolo&quot;&gt;2.4 Limitations of YOLO&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각 Grid Cell은 하나의 클래스만 가질 수 있기 때문에 Grid Cell 하나에 작은 object가 여러 개 있을때 제대로 예측하지 못할 수 있다.&lt;/li&gt;
  &lt;li&gt;예상치 못한 aspect ratio나 configuration을 가진 객체를 일반화 하는데 어려움.&lt;/li&gt;
  &lt;li&gt;Large box와 Small box를 동일하게 처리.&lt;/li&gt;
  &lt;li&gt;Large box의 small error보다 Small box의 small error가 IOU에 훨씬 큰 영향을 끼침.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-comparison-to-other-detection-systems&quot;&gt;3. Comparison to Other Detection Systems&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;생략&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-experiments&quot;&gt;4. Experiments&lt;/h2&gt;

&lt;h3 id=&quot;41-comparison-to-other-realtime-systems&quot;&gt;4.1. Comparison to Other RealTime Systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fast Yolo는 가장 빠른 속도를 보여줌.&lt;/li&gt;
  &lt;li&gt;YOLO 는 real-time 성능을 보여주면서 mAP도 뛰어난걸 확인할 수 있음.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_1.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-voc-2007-error-analysis&quot;&gt;4.2. VOC 2007 Error Analysis&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Object Localization은 Fast R-CNN이 더 뛰어남.&lt;/li&gt;
  &lt;li&gt;But, Background Error(False Positive)가 훨씬 높음.
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_2.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-combining-fast-rcnn-and-yolo&quot;&gt;4.3. Combining Fast RCNN and YOLO&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fast R-CNN과 YOLO를 앙상블 한 모델이 성능이 가장 좋음. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_3.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;44-voc-2012-results&quot;&gt;4.4. VOC 2012 Results&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig04_4.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;45-generalizability&quot;&gt;4.5 Generalizability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;새로운 도메인, 예상치 못한 입력이 들어왔을때 일반화 성능이 뛰어남.&lt;/li&gt;
  &lt;li&gt;Picasso Dataset 과 People-Art Dataset을 이용하여 다른 모델들과 일반화 성능 비교.&lt;/li&gt;
  &lt;li&gt;YOLO가 가장 성능이 좋은것을 보여줌. 
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig05_1.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/yolo/fig05_2.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2019/03/29/YOLO/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2019/03/29/YOLO/</guid>
        
        <category>Paper</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>자주 사용하는 Docker Command 정리</title>
        <description>&lt;p&gt;service nvidia-docker start (sudo 권한으로) : nvidia docker 서비스 시작.&lt;/p&gt;

&lt;p&gt;docker -i -t -rm -p 호스트포트:도커포트 -v 호스트경로:도커경로 IMAGE_NAME:tag bash : IMAGE_NAME 컨테이너를 실행.&lt;/p&gt;

&lt;p&gt;docker rm NAME : Docker 프로세스 제거&lt;/p&gt;

&lt;p&gt;docker rmi IMAGE_NAME : Docker Image 제거&lt;/p&gt;

&lt;p&gt;docker commit NAME 레포이름:태그 :&lt;/p&gt;

&lt;p&gt;CUDA_VISIBLE_DEVICES=0 jupyter notebook –ip=0.0.0.0 –port=포트번호 –allow-root&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2019/02/14/docker/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2019/02/14/docker/</guid>
        
        <category>Docker</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>첫 기계식 키보드 !</title>
        <description>&lt;p&gt;늦었지만 키보드 자랑…&lt;br /&gt;
바밀로 저소음&lt;strong&gt;흑축&lt;/strong&gt; 108키 입니다.&lt;/p&gt;

&lt;p&gt;넘나 영롱하다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/keyboard/vamilo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이건 타건 영상입니다.&lt;/p&gt;

&lt;iframe class=&quot;youtube&quot; src=&quot;https://jjerry-k.github.io/public/img/keyboard/vamilo.mp4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Fri, 01 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2019/02/01/keyboard/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2019/02/01/keyboard/</guid>
        
        <category>Hardware</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Python으로 NIfTI 영상을 읽어보자!</title>
        <description>&lt;p&gt;거의 한달 반…만에 글을 씁니다..!&lt;br /&gt;
이번에는 Python에서 &lt;a href=&quot;https://nifti.nimh.nih.gov/&quot;&gt;NIfTI&lt;/a&gt; 포맷의 데이터를 load 하는 방법에 대한 포스팅을 해보려고 합니다.&lt;br /&gt;
저는 Anaconda를 사용중이기에..제 사용환경에 맞게 설명을 하겠습니다.&lt;/p&gt;

&lt;p&gt;가장 먼저 관련 패키지인 &lt;a href=&quot;http://nipy.org/nibabel/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nibabel&lt;/code&gt;&lt;/a&gt; 을 설치를 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge nibabel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러면 설치는 끝입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nibabel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.nii 경로&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#plt.imshow(img)# 슬라이스 1장일 경우
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,:,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slice 번호&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 작성하시면 됩니다.&lt;/p&gt;

&lt;p&gt;예시를 보여드리면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/nifti/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇습니다!&lt;/p&gt;

&lt;p&gt;추후엔 DICOM 다루는 법에 대해서 업로드 해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2019/01/23/nifti/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/01/23/nifti/</guid>
        
        <category>Usage</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>scp를 이용해서 파일 or 디렉토리 복사하기!</title>
        <description>&lt;p&gt;대부분이 그렇겠지만 딥러닝, 머신러닝 하시는 분들은 우분투 서버를 이용합니다.&lt;br /&gt;
물론 저도 그렇구요. 가끔 파일을 로컬에 복사할 일이 있습니다.&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;mobaXterm&lt;/code&gt; 이라던가 &lt;code class=&quot;highlighter-rouge&quot;&gt;xshell&lt;/code&gt; 같은 프로그램으로 옮길 수도 있지만 제 경험상 대용량이라던가 파일이 많다면 끊기더구요..&lt;br /&gt;
 그래서 CLI 환경에서 하는 방법을 찾아보다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt; 라는 명령어가 있더군요.&lt;br /&gt;
 방법은 간단합니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;계정이름&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;@&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;복사할 파일 경로&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;저장할 경로&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 끝나더군요. scp에 대한 자세한 설명은 추후에 추가하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Dec 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2018/12/08/scp/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2018/12/08/scp/</guid>
        
        <category>Command</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Anaconda를 이용하여 TensorFlow 설치하기!</title>
        <description>&lt;p&gt;안녕하세요!&lt;br /&gt;
오늘은 TensorFlow 설치 방법을 간단하게 알려드리려고 합니다.&lt;br /&gt;
CPU와 GPU 중에서도 &lt;strong&gt;GPU&lt;/strong&gt; 버전 설치에 대해 알려드릴거에요!&lt;br /&gt;
매우 간단하니 놀라지마시기 바랍니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Anaconda 를 설치한다.&lt;/li&gt;
  &lt;li&gt;터미널 or CMD에 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install python=3.6&lt;/code&gt; 라고 입력한다.
    &lt;ul&gt;
      &lt;li&gt;CMD에서 안될경우 Anaconda prompt에서 실행하세요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;conda install tensorflow-gpu 라고 입력한다.&lt;/li&gt;
  &lt;li&gt;자신이 원하는 IDE로 코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 끝입니다.&lt;br /&gt;
Anaconda 이용시 로컬에 쿠다를 설치 안해줘도 됩니다.&lt;br /&gt;
참 쉽죠….? &lt;br /&gt;
문제가 있다면 댓글 남겨주시기 바랍니다!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/11/18/anaconda_setting/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/11/18/anaconda_setting/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>맥북 자동 부팅 옵션 설정법</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;오늘은 맥북 자동 부팅 옵션에 대해서 설정법을 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;매우 짧은 포스팅이 될 듯합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Terminal 을 실행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nvram AutoBoot=%00&lt;/code&gt; 이라고 친다.&lt;/li&gt;
  &lt;li&gt;맥북 패스워드를 입력한다.&lt;/li&gt;
  &lt;li&gt;전원을 끈 후 노트북을 닫고 열어서 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;끝입니다.. 이러면 자동 부팅 옵션이 꺼집니다.&lt;/p&gt;

&lt;p&gt;만약 다시 자동 부팅을 켜시려면 1번을 실행하신 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nvram AutoBoot=%03&lt;/code&gt; 이라고 입력하시면 됩니다.&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/11/17/macbook_auto_start/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/11/17/macbook_auto_start/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Mac Terminal Customizing</title>
        <description>&lt;p&gt;저는 터미널을 마음대로 바꾸는걸 좋아합니다.&lt;br /&gt;
기본 터미널을 대체할 앱이 있긴하지만 추가적으로 설치하는걸 안좋아해서..ㅎㅎ&lt;br /&gt;
그래서 Customizing 하는 법을 포스팅하려고 합니다.&lt;br /&gt;
Mac 터미널에서 환경변수 설정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; 에서 합니다.
Ubuntu 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;와 같다고 생각하시면 되요.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# terminal customize&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 컬러 적용 여부&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLICOLOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;c&quot;&gt;# 디렉토리의 생상&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LSCOLORS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GxFxCxDxBxegedabagaced
&lt;span class=&quot;c&quot;&gt;# 유저 및 호스트의 색상&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w\[\033[00m\]\$'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫번째 옵션은 1이면 Customizing응 한다는 의미입니다.&lt;/p&gt;

&lt;p&gt;두번째 옵션이 좀 문제인데요..&lt;br /&gt;
알아보기 매우 힘듭니다..&lt;br /&gt;
저도 기억하기 힘들어서 포스팅을 하는거죠.&lt;br /&gt;
자..두번째 옵션을 두 부분으로 나눠서 설명드리겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gx Fx Cx Dx Bx
1x 2x 3x 4x 5x

1x : 디렉토리 색상
2x : symbolic link 색상
3x : socket 색상
4x : pipe 색
5x : 실행파일 색상
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg ed ab ag ac ed
1a 2b 3c 4d 5e 6f

1a : block special 색상
2b : char special 색상
3c : exe_setuid 색상
4d : ext_setgid 색상
5e : a-dir_writeothers_sticky 색상
6f : b-dir_writeothers_NOsticky 색상
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;솔직히 socket, pipe, 1a ~ 6f 까지는 뭔지 잘 모르겠습니다..&lt;br /&gt;
제대로 배우지 않아서…ㅎㅎ&lt;/p&gt;

&lt;p&gt;색상 설명&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a     black
b     red
c     green
d     brown
e     blue
f     magenta
g     cyan
h     light grey

A     bold black
B     bold red
C     bold green
D     bold brown  (거의 노란색)
E     bold blue
F     bold magenta
G     bold cyan
H     bold light grey (거의 흰색)
x     default foreground or background
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 색상설정은 알파벳 두개로 구성이 됩니다.&lt;br /&gt;
앞에 알파벳은 글자의 색상이고 뒤에 알파벳은 배경의 색상입니다.&lt;/p&gt;

&lt;p&gt;세번째 옵션을 살펴보겠습니다.&lt;br /&gt;
이 옵션 또한 복잡하게 써있네요..&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w\[\033[00m\]\$'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이건 터미널을 켰을때 유저와 PC 이름을 어떻게 보여줄 것인가를 정합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'\[\033[01;32m\]\u@\h\[\033[00m\]&lt;/code&gt; 에서 {USER_NAME}@{PC_NAME}을 초록색 볼드체로 하겠다라는 의미입니다. (01 : 볼드체, 32m : 초록색)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\[\033[01;35m\]\w\[\033[00m\]&lt;/code&gt; 에서 ~을 자주색 볼드체로 하겠다라는 의미입니다. (01 : 볼드체, 35m : 자주색)&lt;/p&gt;

&lt;p&gt;자세한 정보는 추후에 더 추가하겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/11/07/terminal/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/11/07/terminal/</guid>
        
        <category>Macbook</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Github 블로그 만들기</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다.&lt;br /&gt;
요즘 깃헙으로 블로그를 하려고 하시는 분이 많은데요!&lt;br /&gt;
한번 만드는 법을 포스팅해보려고 합니다!&lt;br /&gt;
깃헙 블로그는 보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 이라는 정적 사이트 생성기를 이용합니다.&lt;br /&gt;
자세한 설명은 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/home/&quot;&gt;&lt;strong&gt;여기서&lt;/strong&gt;&lt;/a&gt; 확인 하시면 됩니다.&lt;br /&gt;
블로그 만드는 방법은 두 가지가 있는데요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;테마를 자기가 만드는 방법.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공개된 테마를 가져와서 수정하는 방법.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전 &lt;strong&gt;2번 방법&lt;/strong&gt; 으로 했습니다.&lt;br /&gt;
왜냐하면 전 웹 프로그래밍 언어를 모르니까요..ㅎㅎ&lt;br /&gt;
그래서 &lt;strong&gt;2번 방법&lt;/strong&gt; 에 대해 포스팅하려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;1-원하는-테마-다운받기&quot;&gt;1. 원하는 테마 다운받기.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;&lt;strong&gt;템플릿 모음1&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&quot;https://jekyllthemes.io&quot;&gt;&lt;strong&gt;템플릿 모음2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 링크는 템플릿에 대한 정보를 모아놓은 사이트입니다.&lt;br /&gt;
링크에 자신이 원하는 템플릿을 들어가보면 대부분 깃헙 repository 로 연결됩니다.&lt;br /&gt;
예시로 &lt;strong&gt;템플릿 모음1&lt;/strong&gt; 에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Prologue&lt;/code&gt; 라는 테마를 적용해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;를 바로 누르셔도 되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt;에 들어가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone, Download ZIP&lt;/code&gt; 하셔도 상관없습니다.&lt;br /&gt;
다운로드 받은 후에 알집을 풀어주세요!&lt;br /&gt;
전 &lt;code class=&quot;highlighter-rouge&quot;&gt;Home&lt;/code&gt;에 풀었구요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 폴더 안에는 이렇게 구성이 되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-루비-젬-설치&quot;&gt;2. 루비 젬 설치.&lt;/h2&gt;

&lt;p&gt;템플릿을 만들면서 바로 바로 수정되는 사항을 볼 수 있다면 좋겠죠?&lt;br /&gt;
그렇기 때문에 &lt;strong&gt;루비 젬&lt;/strong&gt; 이라는 것을 설치 해야합니다.&lt;br /&gt;
OS 별 설치법은 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/&quot;&gt;&lt;strong&gt;여기서&lt;/strong&gt;&lt;/a&gt; 확인하시면 됩니다.&lt;/p&gt;

&lt;p&gt;저는 Mac OS 를 기준으로 작성하겠습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt; 까지 진행하세요.&lt;/p&gt;

&lt;h2 id=&quot;3-localhost-서버-열기&quot;&gt;3. localhost 서버 열기.&lt;/h2&gt;

&lt;p&gt;다음과 같이 터미널을 열고 압축푼 경로로 이동해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 이라고 입력합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 뭐 이것 저것 설치가 될거에요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버를 열 준비는 끝났습니다.&lt;br /&gt;
이제 터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 라고 입력해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진과 같이 나올거에요!&lt;br /&gt;
밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/jekyll-theme-prologue&lt;/code&gt;라고 나와있네요!&lt;br /&gt;
그럼 인터넷 브라우저를 켜주시고 주소창에 입력해주세요!&lt;/p&gt;

&lt;p&gt;그럼 다음과 같은 창이 열립니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/gitblog/08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 블로그를 할 준비는 완료했습니다!&lt;br /&gt;
다음엔 테마를 토대로 커스터마이징 하는 포스팅을 준비해보겠습니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/blog/2018/10/24/gitblog/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/24/gitblog/</guid>
        
        <category>Jekyll</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Anaconda 간단하게 사용하기!</title>
        <description>&lt;p&gt;저번 &lt;a href=&quot;https://jjerry-k.github.io/python/2018/09/27/python4mac/&quot;&gt;&lt;strong&gt;Python 설치 포스팅&lt;/strong&gt;&lt;/a&gt;에서 pyenv로 설치 하는 법을 포스팅 했었습니다.&lt;br /&gt;
이번에는 제가 pyenv 로 어떤 버전을 설치했고 무슨 패키지를 설치했는지 포스팅 하려고 합니다.&lt;br /&gt;
먼저 설치할 버전의 이름을 정확히 알아야하므로 설치 가능한 버전들을 봅니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 터미널에 입력을 하면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Available versions:
  2.1.3
  2.2.3
  2.3.7
  ...
  중략
  ...
  stackless-3.4.2
  stackless-3.4.7
  stackless-3.5.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 굉~~~장히 많은 버전이 있습니다. (약 340개?)&lt;br /&gt;
그중에서 저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;anaconda3-5.2.0&lt;/code&gt;을 설치했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;anaconda3-5.2.0

pyenv global anaconda3-5.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아나콘다 환경 설치 끝..&lt;br /&gt;
이제 제가 사용하는 파이썬 패키지를 설치해야겠죠.&lt;br /&gt;
보통 python 이라면 pip를 쓰겠지만 저는 아나콘다를 설치했죠.&lt;br /&gt;
그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt;를 이용해서 설치했습니다.&lt;br /&gt;
제가 설치 할 패키지는 pytorch, tensorflow, keras, tqdm 입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tqdm &lt;span class=&quot;c&quot;&gt;# progress bar 패키지&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;keras tensorflow &lt;span class=&quot;c&quot;&gt;# machine learning 패키지&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pytorch torchvision &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pytorch &lt;span class=&quot;c&quot;&gt;# machine learning 패키지&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 끝입니다.&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy, scipy, matplotlib, ...&lt;/code&gt;등 패키지는 anaconda를 설치하면서 자동으로 설치가 됩니다 ㅎㅎ&lt;/p&gt;

&lt;p&gt;만약 저 환경을 삭제하고 싶다?&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pyenv uninstall anaconda3-5.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이라고 하시면 바로 삭제됩니다.&lt;/p&gt;

&lt;p&gt;많은 분들께 도움이 되었으면 좋겠습니다!&lt;/p&gt;

&lt;p&gt;감사합니다~!&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2018/10/23/anaconda/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/10/23/anaconda/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python 3.6 에서 이 경고 보기 싫어요..</title>
        <description>&lt;p&gt;안녕하세요! Jerry 입니다!&lt;/p&gt;

&lt;p&gt;어제 &lt;a href=&quot;https://jjerry-k.github.io/deeplearning/2018/10/18/condavspip/&quot;&gt;&lt;strong&gt;pip 로 설치하지 말라구요!?&lt;/strong&gt;&lt;/a&gt; 라는 포스팅을 했죠?&lt;br /&gt;
포스팅을 하고 갑자기 확 꽂혀서 anaconda 환경을 지웠습니다.&lt;br /&gt;
Setting 을 다시 하기 위해서요! 핳핳핳&lt;br /&gt;
그래서 지우고 다시 구축했죠.&lt;br /&gt;
제가 사용하는 방법은 &lt;a href=&quot;https://jjerry-k.github.io/deeplearning/2018/09/27/python4mac/&quot;&gt;&lt;strong&gt;Python Installation for mac&lt;/strong&gt;&lt;/a&gt; 에 적혀있습니다!&lt;br /&gt;
아나콘다 환경 설치 후에 이제 python package를 설치해야겠죠?&lt;br /&gt;
pip 가 아닌 conda로 전부 설치했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tensorflow
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pytorch torchvision &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pytorch
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;keras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 후에 테스트를 하고자 터미널에서 tensorflow를 import 해봤습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;import tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그 후에 나온 warning 입니다.&lt;/p&gt;

&lt;p&gt;/Users/jerry/.pyenv/versions/anaconda3-5.2.0/lib/python3.6/site-packages/h5py/&lt;strong&gt;init&lt;/strong&gt;.py:36: FutureWarning: Conversion of the second argument of issubdtype from &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;np.floating&lt;/code&gt; is deprecated. In future, it will be treated as &lt;code class=&quot;highlighter-rouge&quot;&gt;np.float64 == np.dtype(float).type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;라고 나오더군요.&lt;br /&gt;
이게 굉장히 거슬리는 분들 계실겁니다..&lt;br /&gt;
보통 h5py 라는 python 패키지가 2.8.0 미만이면 이 warning이 발생해요!&lt;br /&gt;
해결책은 간단합니다!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; h5py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것만 해주시면 됩니다!&lt;/p&gt;

&lt;p&gt;그럼 즐거운 코딩!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/10/19/warning/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/10/19/warning/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>Markdown 사용법</title>
        <description>&lt;p&gt;Markdown은 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능한 텍스트 기반의 마크업언어입니다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 빠르게 컨텐츠를 작성하고 직관적으로 인식할 수 있습니다. Github을 사용하는 사람이라면 가장 먼저 만나게 되는 파일이 README.md 파일인데요. 이 파일도 Markdown으로 작성된 파일입니다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있어서 많은 사람들이 사용하게 되었습니다!&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#%ea%b8%b0%eb%b3%b8-%ec%82%ac%ec%9a%a9%eb%b2%95&quot;&gt;기본 사용법&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#headings&quot;&gt;Headings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#h1-heading&quot;&gt;h1 Heading&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#h2-heading&quot;&gt;h2 Heading&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#h3-heading&quot;&gt;h3 Heading&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#h4-heading&quot;&gt;h4 Heading&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#h5-heading&quot;&gt;h5 Heading&lt;/a&gt;
                    &lt;ul&gt;
                      &lt;li&gt;&lt;a href=&quot;#h6-heading&quot;&gt;h6 Heading&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#paragraphs&quot;&gt;Paragraphs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#newline&quot;&gt;Newline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#horizontal-line&quot;&gt;Horizontal Line&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#emphasis&quot;&gt;Emphasis&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#bold&quot;&gt;Bold&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#italics&quot;&gt;Italics&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#blockquotes&quot;&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lists&quot;&gt;Lists&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#unordered&quot;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ordered&quot;&gt;Ordered&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#time-saving-tip&quot;&gt;Time-saving Tip&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#inline-code&quot;&gt;Inline code&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%22fenced%22-code-block&quot;&gt;“Fenced” code block&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#indented-code&quot;&gt;Indented code&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#links&quot;&gt;Links&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#autolinks&quot;&gt;Autolinks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#inline-links&quot;&gt;Inline links&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#images&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#raw-html&quot;&gt;Raw HTML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#escaping-with-backslashes&quot;&gt;Escaping with backslashes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%ea%b7%b8-%ec%99%b8-%ec%82%ac%ec%9a%a9%eb%b2%95&quot;&gt;그 외 사용법&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#strikethrough&quot;&gt;Strikethrough&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tables&quot;&gt;Tables&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aligning-cells&quot;&gt;Aligning cells&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;기본-사용법&quot;&gt;기본 사용법&lt;/h1&gt;

&lt;h2 id=&quot;headings&quot;&gt;Headings&lt;/h2&gt;

&lt;p&gt;Heading 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt; 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;h6&lt;/code&gt; 까지 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 의  개수로 단계가 정해집니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# h1 Heading
## h2 Heading
### h3 Heading
#### h4 Heading
##### h5 Heading
###### h6 Heading
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;h1 id=&quot;h1-heading&quot;&gt;h1 Heading&lt;/h1&gt;
&lt;h2 id=&quot;h2-heading&quot;&gt;h2 Heading&lt;/h2&gt;
&lt;h3 id=&quot;h3-heading&quot;&gt;h3 Heading&lt;/h3&gt;
&lt;h4 id=&quot;h4-heading&quot;&gt;h4 Heading&lt;/h4&gt;
&lt;h5 id=&quot;h5-heading&quot;&gt;h5 Heading&lt;/h5&gt;
&lt;h6 id=&quot;h6-heading&quot;&gt;h6 Heading&lt;/h6&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;paragraphs&quot;&gt;Paragraphs&lt;/h2&gt;

&lt;p&gt;문단을 나누는 법입니다. 문단 사이에는 하나 이상의 빈 줄로 구분됩니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;이 문장은 첫번째 문단의 첫번째 문장입니다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;이 문장은 두번째 문단의 첫번째 문장입니다. 이 문장은 두번째 문단의 두번째 문장입니다.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;이 문장은 첫번째 문단의 첫번째 문장입니다.&lt;/p&gt;
&lt;p&gt;이 문장은 두번째 문단의 첫번째 문장입니다. 이 문장은 두번째 문단의 두번째 문장입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;newline&quot;&gt;Newline&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;공백 두칸 후 엔터&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt;을 이용하여 개행을 할 수 있습니다.&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt;은 굳이….)&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test1`공백 두칸 후 엔터`
test2

test1&amp;lt;br&amp;gt;test2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;test1&lt;br /&gt;
test2&lt;/p&gt;

&lt;p&gt;test1&lt;br /&gt;test2&lt;/p&gt;

&lt;h2 id=&quot;horizontal-line&quot;&gt;Horizontal Line&lt;/h2&gt;

&lt;p&gt;Markdown 문서에 수평선을 추가 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`___`: 밑줄(_) 3개

`---`: 대쉬(-) 3개

`***`: 별표(*) 3개
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;

&lt;h3 id=&quot;bold&quot;&gt;Bold&lt;/h3&gt;

&lt;p&gt;볼드체 적용도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**이렇게 하면 볼드체!**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 하면 볼드체!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;italics&quot;&gt;Italics&lt;/h3&gt;

&lt;p&gt;이텔릭체 적용도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_이렇게 하면 이텔릭체!_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이렇게 하면 이텔릭체!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h2&gt;

&lt;p&gt;블럭인용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 으로 합니다.&lt;br /&gt;
Heading과 처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 개수로 인용 안에 인용을 추가 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 이것은 인용구에요.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이것은 인용구에요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다중 인용 사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 이것은 첫번째 인용이에요.
&amp;gt;&amp;gt; 이것은 두번째 인용이에요.
&amp;gt;&amp;gt;&amp;gt; 이것은 세번째 인용이에요.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이것은 첫번째 인용이에요.&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;이것은 두번째 인용이에요.&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;이것은 세번째 인용이에요.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;목록에는 순서가 없는 목록, 순서가 있는 목록이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;unordered&quot;&gt;Unordered&lt;/h3&gt;

&lt;p&gt;순서가 없는 목록은 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 음식
+ 가구
+ 운동
  - 농구
  - 축구
  - 야구
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;음식&lt;/li&gt;
  &lt;li&gt;가구&lt;/li&gt;
  &lt;li&gt;운동
    &lt;ul&gt;
      &lt;li&gt;농구&lt;/li&gt;
      &lt;li&gt;축구&lt;/li&gt;
      &lt;li&gt;야구&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 다음과 같이 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용법 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 신체
  - 머리
  - 상체
  - 하체
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사람
    &lt;ul&gt;
      &lt;li&gt;머리
        &lt;ul&gt;
          &lt;li&gt;눈&lt;/li&gt;
          &lt;li&gt;코&lt;/li&gt;
          &lt;li&gt;입&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;상체&lt;/li&gt;
      &lt;li&gt;하체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;개미
    &lt;ul&gt;
      &lt;li&gt;머리&lt;/li&gt;
      &lt;li&gt;가슴&lt;/li&gt;
      &lt;li&gt;배&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ordered&quot;&gt;Ordered&lt;/h3&gt;

&lt;p&gt;순서가 있는 목록을 만들 때는 번호를 매기면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 노트북을 켠다.
2. Atom 에디터를 켠다.
3. 프로젝트 폴더를 연다.
4. 코딩을 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;노트북을 켠다.&lt;/li&gt;
  &lt;li&gt;Atom 에디터를 켠다.&lt;/li&gt;
  &lt;li&gt;프로젝트 폴더를 연다.&lt;/li&gt;
  &lt;li&gt;코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;time-saving-tip&quot;&gt;Time-saving Tip&lt;/h3&gt;

&lt;p&gt;순서가 있는 목록에서 시간을 아끼는 방법입니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;1.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2.&lt;/code&gt;,… 라고 적을 필요 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1.&lt;/code&gt; 만 적으면 자동으로 번호를 매깁니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 노트북을 켠다.
1. Atom 에디터를 켠다.
1. 프로젝트 폴더를 연다.
1. 코딩을 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;노트북을 켠다.&lt;/li&gt;
  &lt;li&gt;Atom 에디터를 켠다.&lt;/li&gt;
  &lt;li&gt;프로젝트 폴더를 연다.&lt;/li&gt;
  &lt;li&gt;코딩을 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;inline-code&quot;&gt;Inline code&lt;/h3&gt;

&lt;p&gt;문장 중간에 &lt;code&gt;` `&lt;/code&gt;를 이용하여 code를 넣을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;파이썬에서 모듈을 쓰려면 `import '모듈명'` 이라고 하면 됩니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;파이썬에서 모듈을 쓰려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;import '모듈명'&lt;/code&gt; 이라고 하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;fenced-code-block&quot;&gt;“Fenced” code block&lt;/h3&gt;

&lt;p&gt;code block을 만들어서 code를 넣을 수 있습니다.&lt;/p&gt;

&lt;pre&gt;
```python
import os
import sys
```
&lt;/pre&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indented-code&quot;&gt;Indented code&lt;/h3&gt;

&lt;p&gt;들여쓰기(공백 4개)를 이용하여 code를 쓸 수 있습니다.&lt;br /&gt;
하지만 별로 추천하는 방법은 아닙니다.&lt;br /&gt;
왜냐하면 &lt;strong&gt;syntax highlighting&lt;/strong&gt;이 안됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    import sys
    impot os
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sys
impot os
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h3&gt;

&lt;p&gt;“Fenced” code block 은 어떤 프로그래밍 언어의 code block 을 만들건지 적어서 사용을 합니다.&lt;br /&gt;
그러면 그 언어에 맞게 Syntax highlighting을 합니다.&lt;/p&gt;

&lt;pre&gt;
```python
import os
import sys

a = 2
b = 5

print(&quot;Hello, World!&quot;)
print(a + b)
```
&lt;/pre&gt;

&lt;p&gt;Which renders to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;링크를 거는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Autolinks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inline links&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Link titles&lt;/code&gt;, ‘Named Anchors’ 이렇게 네 가지가 있습니다.&lt;br /&gt;
이 포스팅에선 &lt;code class=&quot;highlighter-rouge&quot;&gt;Autolinks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inline links&lt;/code&gt; 이 두 가지를 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;autolinks&quot;&gt;Autolinks&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 사이에 링크를 적으면 자동으로 링크가 생성됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;https://jjerry-k.github.io&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;https://jjerry-k.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;inline-links&quot;&gt;Inline links&lt;/h3&gt;

&lt;p&gt;문장 안에 링크를 생성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Jerry's Blog](https://jjerry-k.github.io)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;Jerry’s Blog&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;p&gt;이미지를 올리는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;첫번째 방법
![Minion](http://octodex.github.com/images/minion.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://octodex.github.com/images/minion.png&quot; alt=&quot;Minion&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;두번째 방법
![Alt text](http://octodex.github.com/images/stormtroopocat.jpg &quot;The Stormtroopocat&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://octodex.github.com/images/stormtroopocat.jpg&quot; alt=&quot;Alt text&quot; title=&quot;The Stormtroopocat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 두 방법은 이미지 사이즈 조절을 할 수 없습니다.&lt;br /&gt;
만약 사이즈 조절이 필요하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;&quot; height=&quot;&quot; width=&quot;&quot;&amp;gt;를 이용하면 됩니다.&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;http://octodex.github.com/images/dojocat.jpg&quot; height=&quot;100&quot; width=&quot;100&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :
&lt;img src=&quot;http://octodex.github.com/images/dojocat.jpg&quot; height=&quot;100&quot; width=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;raw-html&quot;&gt;Raw HTML&lt;/h2&gt;

&lt;p&gt;이미지에서 HTML 문법을 쓸 수 있다는걸 확인했다시피 Markdown 에서 HTML 문법을 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;여기가 **&amp;lt;a href=&quot;https://jjerry-k.github.io&quot;&amp;gt;Jerry의 블로그&amp;lt;/a&amp;gt;**입니다.

여기가 **[Jerry의 블로그](https://jjerry-k.github.io)**입니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;여기가 &lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;&lt;strong&gt;Jerry의 블로그&lt;/strong&gt;&lt;/a&gt;입니다.&lt;/p&gt;

&lt;p&gt;여기가 &lt;a href=&quot;https://jjerry-k.github.io&quot;&gt;&lt;strong&gt;Jerry의 블로그&lt;/strong&gt;&lt;/a&gt;입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;escaping-with-backslashes&quot;&gt;Escaping with backslashes&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 를 이용하여 문장안에 기호를 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\*를 문장에 쓰고 싶다!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;*를 문장에 쓰고 싶다!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;그-외-사용법&quot;&gt;그 외 사용법&lt;/h1&gt;

&lt;h2 id=&quot;strikethrough&quot;&gt;Strikethrough&lt;/h2&gt;

&lt;p&gt;문장에 줄을 그을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~블로그....귀찮다....~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;p&gt;&lt;del&gt;블로그….귀찮다….&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;표를 만들 수 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;를 이용하여 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| --- | --- |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;제리&lt;/td&gt;
      &lt;td&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;톰&lt;/td&gt;
      &lt;td&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스파이크&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;aligning-cells&quot;&gt;Aligning cells&lt;/h3&gt;

&lt;p&gt;셀 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;를 이용합니다.&lt;br /&gt;
왼쪽 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;을 사용하지 않으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Center text in a column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;중앙 정렬은 다음과 같이 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| :-: | :-: |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;제리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;톰&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;스파이크&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Right-align the text in a column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;오른쪽 정렬은 다음과 같이 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 이름 | 학점 |
| --: | --: |
| 제리 |  B+ |
|  톰  | C+ |
|스파이크| B0 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적용 후 :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;학점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;제리&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;톰&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;C+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;스파이크&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Markdown 설명에 대한 포스팅… &lt;strong&gt;끝!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/blog/2018/10/19/markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/19/markdown/</guid>
        
        <category>Markdown</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>pip 로 설치하지 말라구요!?</title>
        <description>&lt;p&gt;오늘 갑자기 당황스러운 포스팅을 봤습니다.&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;https://www.anaconda.com/blog/developer-blog/tensorflow-in-anaconda/&quot;&gt;&lt;strong&gt;https://www.anaconda.com/blog/developer-blog/tensorflow-in-anaconda/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;내용을 보니 pip 로 설치하는것 보다 conda를 이용하면 좋은 점이 두 가지가 있다고 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CPU 성능이 더 빨라졌다.
&lt;img src=&quot;https://www.anaconda.com/wp-content/uploads/TensorFlowTraining.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPU 버전 설치가 쉽다.&lt;br /&gt;
  솔직히 이건 잘 모르겠네요.. &lt;br /&gt;
  둘 다 똑같이 그래픽 드라이버 설치하고 CUDA 설치하고 해야하는데 뭐가 쉬워진다는건지..&lt;br /&gt;
  뭐.. 어떤 쿠다 버전을 설치했던 알아서 잡아서 TensorFlow 를 설치해준다면 편해진건 맞겠군요.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고 CPU 성능 증가는 &lt;strong&gt;Intel CPU에 한해서&lt;/strong&gt; 빨라지는 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/nopip/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진을 보시면 &lt;strong&gt;the Intel® Math Kernel Library for Deep Neural Networks (Intel® MKL-DNN)&lt;/strong&gt; 을 사용해서 올렸다는거죠. (AMD 사용자 쥬륵..)&lt;/p&gt;

&lt;p&gt;뭐 아무튼… 인텔에 텐플쓰시는 분들은 콘다로 넘어가심이 좋을 듯합니다.&lt;/p&gt;

&lt;p&gt;전 요즘 pytorch 를 쓰고 있어서 ㅎㅎ..&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다 ㅎㅎ&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/10/18/condavspip/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/10/18/condavspip/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>GPU를 골라서 써보자!</title>
        <description>&lt;p&gt;현재 저는 하나의 GPU 서버를 가지고 여러 명이 Deep Learning 을 돌려야 합니다.&lt;br /&gt;
그러면 GPU 각각을 분배하거나 메모리를 분산해야겠죠.&lt;br /&gt;
제 연구실 같은 경우엔 전자를 택했습니다.&lt;br /&gt;
그래서 이번엔 특정 GPU만 사용하는 방법을 간 ! 단 ! 하 ! 게 포스팅하려고 합니다. (Just 명령어만 쓸꺼임.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 python ~~~.py &lt;span class=&quot;c&quot;&gt;# 0번 GPU만 사용.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#CUDA_VISIBLE_DEVICES=0,3 python ~~~.py # 0, 3번 GPU 사용.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 실행하시면 ~~~.py 를 실행해서 GPU 를 사용할 경우 0번 GPU만 사용해서 스크립트가 실행됩니다!
많은 분들이 &lt;strong&gt;TensorFlow&lt;/strong&gt;를 사용하실텐데 이것으로 예를 들어보겠습니다.&lt;br /&gt;
GPU가 여러 대인 상황에서 아무 옵션도 주지 않고 (스크립트에서도 안줬다는 가정하에..) &lt;code class=&quot;highlighter-rouge&quot;&gt;tf.Session()&lt;/code&gt; 을 실행하게 되면 모든 GPU의 메모리를 혼자서 다 잡고 있는걸 보셨을 겁니다.&lt;br /&gt;
하지만 만약 위에 코드 처럼 실행한다면 특정 번호에 해당하는 GPU의 메모리만 잡고 있는걸 보실 수 있을 겁니다!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2018/10/10/GPU_Masking/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2018/10/10/GPU_Masking/</guid>
        
        <category>Usage</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Python Installation for mac</title>
        <description>&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# brew 설치.&lt;/span&gt;
/usr/bin/ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wget 설치.&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget

&lt;span class=&quot;c&quot;&gt;#pyenv 설치.&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pyenv

&lt;span class=&quot;c&quot;&gt;# bash_profile 에 경로 추가.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PYENV_ROOT=&quot;${HOME}/.pyenv&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bash_profile

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;${PYENV_ROOT}bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bash_profile

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eval &quot;$(pyenv init -)&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bash_profile

&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 설치할 수 있는 환경 보여줌.&lt;/span&gt;
pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 위에서 환경 확인 후 원하는 버전 입력.&lt;/span&gt;
pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;버전 이름&amp;gt;

&lt;span class=&quot;c&quot;&gt;# system  과 &amp;lt;버전 이름&amp;gt; 두 환경이 존재.&lt;/span&gt;
pyenv versions

&lt;span class=&quot;c&quot;&gt;# &amp;lt;버전 이름&amp;gt;으로 default version 변경.&lt;/span&gt;
pyenv global &amp;lt;버전 이름&amp;gt;

pyenv versions


&lt;span class=&quot;c&quot;&gt;# tmp 폴더 에선 system 이라는 버전으로 사용.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tmp

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tmp

pyenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;system

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pyenv&lt;/strong&gt; 를 사용하면 특정 폴더에서는 python2 로 작동하고 그 외에는 python3 로 작동하게 할 수 있습니다!&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python/2018/09/27/python4mac/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/09/27/python4mac/</guid>
        
        <category>Setting</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Object Detection API</title>
        <description>&lt;p&gt;이번에 V.ais에서 TensorFlow Object Detection API 사용 매뉴얼을 작성해봤습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/V-AIS/tensorflow&quot;&gt;&lt;strong&gt;https://github.com/V-AIS/tensorflow&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아직 완벽하게 정리된건 아니지만…&lt;/p&gt;

&lt;p&gt;TensorFlow Object Detection API를 처음 접하시는 분이라면 쉽게 따라할 수 있도록 적어봤습니다.&lt;/p&gt;

&lt;p&gt;수정됬으면 하는 부분이 있으면 댓글 남겨주세요!&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/09/12/TFOD/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/09/12/TFOD/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>휴가</title>
        <description>&lt;p&gt;약 두 달정도 달려온 챌린지가 끝나고 처음으로 휴가를 얻었습니다.&lt;/p&gt;

&lt;p&gt;일단은 이번 주 쉬고 다음 주부터 다시 연구 시작..!&lt;/p&gt;

&lt;p&gt;쉬면서 TensorFlow Object Detection API 설명서나 써보렵니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/09/07/Vacation/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/09/07/Vacation/</guid>
        
        <category>Daily</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>LSTM 예제 코드</title>
        <description>&lt;h2 id=&quot;tensorflow-lstm-예제-코드&quot;&gt;TensorFlow LSTM 예제 코드&lt;/h2&gt;

&lt;p&gt;여기저기서 TensorFlow LSTM 코드를 찾다가 예제를 제가 보기 편하게 작성햇습니다.&lt;/p&gt;

&lt;h3 id=&quot;추후에-새로운-코드로-업데이트-할-예정입니다&quot;&gt;&lt;strong&gt;추후에 새로운 코드로 업데이트 할 예정입니다.&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;losses&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow.keras.utills&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_categorical&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Setting hyper parameter
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_hidden1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Loading Mnist Data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_categorical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_categorical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_random_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# LSTM cell 선언.
# RNN을 쓰고 싶으면 BasicRNNCell로 바꾸면 됨.
# Stacked LSTM을 하고 싶으면 cell2 선언.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnn_cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicLSTMCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_hidden1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#cell2 = tf.nn.rnn_cell.BasicLSTMCell(n_hidden1)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 선언된 LSTM cell, X를 이용하여 네트워크 생성.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;states_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic_rnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LSTM1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Stacked LSTM을 하고 싶으면 다음과 같이 선언.
#outputs_2, states_2 = tf.nn.dynamic_rnn(cell2, outputs_1, dtype=tf.float32, scope=&quot;LSTM2&quot;)
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# LSTM -&amp;gt; Fully Connected Layer -&amp;gt; Classification
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# outputs_1 : [ ? , num_step, num_hidden
#             -&amp;gt; [num_step, ? , num_hidden]
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Sequence의 마지막 출력값
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax_cross_entropy_with_logits_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdamOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# GPU 메모리 할당.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigProto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpu_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow_growth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;feed_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost_val&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Epoch : &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Avg cost : {:f}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Optimization Done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;is_correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_correct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test_batch_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test Accuracy : '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Aug 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/deeplearning/2018/08/16/LSTM/</link>
        <guid isPermaLink="true">http://localhost:4000/deeplearning/2018/08/16/LSTM/</guid>
        
        <category>TensorFlow</category>
        
        
        <category>DeepLearning</category>
        
      </item>
    
      <item>
        <title>라즈베리파이로 미니 PC 만들기!</title>
        <description>&lt;p&gt;근래에 라즈베리파이로 미니 PC를 만들었습니다!&lt;/p&gt;

&lt;p&gt;그래서 만드는 과정에 대해 글을 써보려고 합니다!&lt;/p&gt;

&lt;p&gt;제가 사용한 보드는….
https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/&lt;/p&gt;

&lt;p&gt;올해 출시한 라즈베리파이 3 B+ 입니다!(개인적으로 라즈베리를 처음 써봅니다…)&lt;/p&gt;

&lt;p&gt;방열판도 붙여줬지요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 사진은 제가 HDD를 장착 할 것이기 때문에….SATA 확장보드…그리고 케이스, 어댑터 구매 내역입니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;솔직히…부품들 뚝딱 뚝딱 제작(조립이 맞을 듯…)하는 것 보다 알리발 상품들 기다리는게 더 힘들었어요…. 쥬륵….&lt;/p&gt;

&lt;p&gt;7일 정도 기다린것 같네요…..&lt;/p&gt;

&lt;p&gt;박스 오자마자 정말 광속으로 뜯었습니다…..&lt;/p&gt;

&lt;p&gt;케이스
&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SATA 확장보드
&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전용 어댑터 (5V 4A)
&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;넘나…감동…&lt;/p&gt;

&lt;p&gt;금방 조립했습니다..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;조립하는데 집중해서 사진을 잘 안찍었어요…쥬륵…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아…저 맨 아래에 다리는 안달아도 되는거였어요….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;케이스를 분리하면 이렇게 생겼어요…(누가봐도 팬이 달릴 부분..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/09.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;달아줍니다..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/10.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;차례 차례 전원 연결…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/11.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뒷판을 조립하고!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/12.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브릿지? 를 연결!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/13.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어댑터 연결 후 켜시면 됩니다…
좀 더 정확한 크기 확인을 위해 사진을 좀 찍어봤어요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/14.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제 주먹이랑 한 컷…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/15.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 제 12인치 맥북이랑 한컷….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/pi/16.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음으로 라즈베리파이를 사용해보면서…정말 재밌고 신기하네요 ㅎㅎㅎ
(물론 가끔 설정하다가 뻑나면…짜증….)&lt;/p&gt;

&lt;p&gt;나중엔 캠을 달아서 사물인식 같은 걸 해볼까 합니다!&lt;/p&gt;

&lt;p&gt;너무….불친절한 글 같네요….&lt;/p&gt;

&lt;p&gt;나중에 또 뭔가 재미난걸 하면 올리겠습니다!&lt;/p&gt;

&lt;p&gt;감사합니다!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jul 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2018/07/10/Raspberry-Mini-PC/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2018/07/10/Raspberry-Mini-PC/</guid>
        
        <category>Hardware</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>데스크탑 조립기</title>
        <description>&lt;h1 id=&quot;building-desktop&quot;&gt;Building Desktop&lt;/h1&gt;

&lt;p&gt;학부생 연구원으로 연구실에서 공부와 연구를 하고 있지만..&lt;br /&gt;
개인용 데스크탑이 없어서 노트북이 굉장히 고생을 많이 했습니다..&lt;br /&gt;
1차 피해자 Dell Inspiron 15 7559..&lt;br /&gt;
현재는 다른 주인에게로 넘어간 상태..&lt;br /&gt;
2차 피해자 Lenovo yoga 2 pro..&lt;br /&gt;
근래에 고생하다가 친구한테 넘어감..&lt;/p&gt;

&lt;p&gt;결국!&lt;br /&gt;
어짜피 나중에 집에서 쓸 데스크탑을 맞춘다고 생각하고!&lt;br /&gt;
부품을 각각 사서 조립을 하기로 했습니다!!&lt;/p&gt;

&lt;p&gt;CPU : 인텔 i5-7600&lt;br /&gt;
메인보드 : 기가바이트 Z270N-WIFI 듀러블에디션&lt;br /&gt;
메모리 : 커세어 VENGEANCE PC4-21300 8G x 2&lt;br /&gt;
VGA : EVGA GeForce GTX 1050ti sc gaming&lt;br /&gt;
SSD : 삼성 850 EVO M.2 (256GB)&lt;br /&gt;
HDD : Toshiba 1TB MQ01ABD100&lt;br /&gt;
케이스 : Fractal Design node 202&lt;br /&gt;
파워 : 커세어 SF450 80PLUS GOLD&lt;/p&gt;

&lt;p&gt;오자마자 포스팅 생각없이 조립을 해버림…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/desktop/01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커세어의 위엄…..번쩍번쩍 램….이쁘다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/desktop/02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사이트에는 Fractal 로고가 위로 올라오게 해놨지만…&lt;/p&gt;

&lt;p&gt;그렇게하면 파워의 위치가 위가 되버려서 난 반대로 로고가 아래로 내려가게 했습니다.&lt;/p&gt;

&lt;p&gt;후기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데스크탑을 사용만 해봤지 조립은 처음이였음..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;괜히 작은 케이스로 해서 선정리가 힘들었음..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;살 수 있는건 중고나라를 이용해서 미개봉품을 싸게 삼.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;25만원 정도 절약함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내 눈에만 이쁘면 됬음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아.. ITX 케이스를 조립할 땐 대부분 SFX 규격을 쓰지만.. &lt;br /&gt;
같은 SFX라도 크기를 고려해야함 . .&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/living/2017/08/04/Desktop/</link>
        <guid isPermaLink="true">http://localhost:4000/living/2017/08/04/Desktop/</guid>
        
        <category>Hardware</category>
        
        
        <category>Living</category>
        
      </item>
    
      <item>
        <title>Ubuntu CUDA &amp; Cudnn 설치하기</title>
        <description>&lt;h1 id=&quot;환경-구축&quot;&gt;환경 구축….&lt;/h1&gt;

&lt;p&gt;Deep Learning을 하는데 GPU를 사용해야하니 CUDA와 cuDNN을 설치하기로 하죠.&lt;/p&gt;

&lt;h2 id=&quot;1-nvidia-그래픽-드라이버-설치&quot;&gt;1. NVIDIA 그래픽 드라이버 설치&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04 에선 그래픽 드라이버를 설치하는데 굉장히…&lt;br /&gt;
많은 고난과 역경을 겪었습니다…&lt;br /&gt;
(그래서 결국 설치 못해봄..)&lt;br /&gt;
하지만 16.04에선 어렵지 않음!!!!!!&lt;br /&gt;
(갈아탄 결정적인 이유…)&lt;br /&gt;
그렇다면 설치를 시작해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:graphics-drivers/ppa

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nvidia-364
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(제 노트북은 GTX 960m 이므로..)&lt;br /&gt;
그냥 터미널에 입력하시면 되요.&lt;br /&gt;
NVIDIA 사이트에서 GPU 버전이랑 맞는걸로!!&lt;br /&gt;
그게 나을 듯합니다.&lt;br /&gt;
그 후 로그아웃을 하고 다시 로그인을 하려고 하면 무한 로그인이 될 거에요.&lt;br /&gt;
(안그러면 좋고..)&lt;br /&gt;
Ctrl + Alt + F1을 눌러 tty1으로 들어가서 로그인 후 reboot을 실행해줍시다.&lt;br /&gt;
로그인 후 NVIDIA X Server Settings 를 켜면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/CUDA/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요래 설치 된걸 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-cuda-설치&quot;&gt;2. CUDA 설치&lt;/h2&gt;

&lt;p&gt;NVIDIA 드라이버를 설치 했으니 이제 CUDA를 설치해보도록 하죠.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;https://developer.nvidia.com/cuda-downloads&lt;/a&gt; 에 들어가시면 요로코롬 뜨는데요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/CUDA/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각자의 환경에 맞춰서 선택한 후 다운로드 하시면 됩니다.&lt;br /&gt;
run 파일을 다운을 받은 후에 터미널을 여시고 run 파일이 다운로드된 디렉토리로 이동합니다.&lt;br /&gt;
그리고 파일의 권한을 모든  사용자가 사용할 수 있도록 변경합니다.&lt;br /&gt;
그리고 실행!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Downloads
&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;a+r cuda_7.5.18_linux.run
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./cuda_7.5.18_linux.run &lt;span class=&quot;nt&quot;&gt;--override&lt;/span&gt;
or
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh cuda_7.5.18_linux.run &lt;span class=&quot;nt&quot;&gt;--override&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;16.04는 gcc, g++ 버전이 5.x 라 override 를 해줘야합니다..&lt;br /&gt;
실행하면 어쩌고 저쩌고 약관 내용..? 이 나오는데요…&lt;br /&gt;
살포시 q 를 눌러줍니다.&lt;br /&gt;
그러면…사용자 정의 설치라고 할까요??&lt;br /&gt;
이것 저것 물어봅니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Do you accept the previously &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;EULA? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;accept/decline/quit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: accept

You are attempting to &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;on an unsupported configuration. Do you wish to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;? &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; default is no &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;yes

&lt;/span&gt;Install NVIDIA Accelerated Graphics Driver &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Linux-x86_64 352.39? &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;uit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: no

Install the CUDA 7.5 Toolkit? &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;uit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;yes

&lt;/span&gt;Enter Toolkit Location &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; default is /usr/local/cuda-7.5 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;: 그냥 엔터

Do you want to &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;a symbolic &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;at /usr/local/cuda? &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;uit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;yes

&lt;/span&gt;Install the CUDA 7.5 Samples? &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;uit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 세팅을 해줍니다. &lt;br /&gt;
그리고 그저 기다리고 기다림…. &lt;br /&gt;
설치가 다 되었으면 뭐 따로 실행할 건 없습니다.&lt;br /&gt;
바로 cuDNN 설치를 하죠.&lt;br /&gt;
이건 설치….는 아니고 그냥 cuda 디렉토리에 파일을 파일 복사? 하는거에요.&lt;/p&gt;

&lt;h2 id=&quot;3-cudnn-설치&quot;&gt;3. cuDNN 설치&lt;/h2&gt;

&lt;p&gt;먼저 cuDNN 파일을 받으셔야하는데요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot;&gt;https://developer.nvidia.com/rdp/cudnn-download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여기에 들어가셔서 계정 만드시고….&lt;br /&gt;
사용 용도… 사용 할 라이브러리.. 등등 선택하시고 원하시는 버전 download 하시면 됩니다.&lt;br /&gt;
저는 4.0으로 했어요.&lt;br /&gt;
Tensorflow라는 라이브러리를 사용할 것이기 때문에…
그리고 나서 터미널을 켜고&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local
&lt;span class=&quot;nb&quot;&gt;sudo tar &lt;/span&gt;zxf ~/Downloads/cudnn-7.0-linux-x64-v4.0-prod.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하시거나 아니면&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cudnn 다운로드경로
&lt;span class=&quot;nb&quot;&gt;sudo tar &lt;/span&gt;zxf cudnn-7.0-linux-x64-v4.0-prod.tgz
&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;cuda/include/cudnn.h /usr/local/cuda/include
&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;cuda/lib64/libcudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/cuda/lib64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 해주시구요.&lt;br /&gt;
환경변수를 설정해줘야 합니다.
터미널을 껐다가 다시 켜주시고&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gedit ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그려면 어떤 메모장? 문서 파일이 열립니다.
매~~~~앤 아래 부분에&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/cuda-7.5/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/cuda-7.5/lib64:&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;를 추가해주세요.&lt;/p&gt;

&lt;p&gt;이렇게 GPU 설정이 끝났습니다…&lt;br /&gt;
이제 caffe와 tensorflow를 설치해야겠군요..&lt;br /&gt;
험난허다…&lt;br /&gt;
개강이라 죽겠는데..&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2016/09/08/CUDA/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2016/09/08/CUDA/</guid>
        
        <category>Setting</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Ubuntu 한글 설정</title>
        <description>&lt;p&gt;우분투를 설치를 했으나!!!!
한글 키보드를 설정을 해야합니다.
그럼 시작해볼까요.
(이번에도 사진 촤라라락..)&lt;/p&gt;

&lt;h1 id=&quot;1-시스템-한글-설정&quot;&gt;1. 시스템 한글 설정&lt;/h1&gt;

&lt;p&gt;부팅을 했습니다.
크으… 깔끔깔끔…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오른쪽 위에 전원 버튼 누르고 &lt;br /&gt;
System Settings로 들어가서 Language Support를 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 설치를 해야한다고 하네요.
묻지도 따지지도 말고 설치합시다.
(뒤에 사진찍은건 애교로 넘어갑시다…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인 비밀번호 입력하구요.
(여기도 있네…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 설치가 시작됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 끝나면 한국어라고 똿! 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래에 있는 한국어를 드래그해서 맨 위로 올려줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/07.png&quot; /&gt;
&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 ‘Apply System-wide’를 클릭!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/09.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;비밀번호 입력하시구요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Regional Formats는 설치할때 이미 Seoul로 해서 상관은 없지만 그냥 들어가서 ‘Apply system-wide’눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그아웃을 하고 다시 로그인 해주세요!!
그럼 다음과 같이 창이 뜨는데 저는 영문이 편해서 그냥 이름을 유지하기로 했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/12.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-한글-키보드-설정하기&quot;&gt;2. 한글 키보드 설정하기&lt;/h1&gt;

&lt;p&gt;키보드를 설정해보죠.&lt;br /&gt;
시스템 설정으로 들어갑니다.&lt;br /&gt;
그리고 텍스트 입력창을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 뜨는데요.
저기에 +를 눌러줍니다.
(정말 더럽게 못그리네..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쭉쭉쭈욱~ 내려서 ‘한국어 (Hangul)(IBus)’를 선택하고 ‘추가’버튼을 누릅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금은 키 변환이 Super+스페이스로 되어있네요.
이대로 쓰실분들은 쓰셔도 됩니다.
하지만!! 저는 한/영 키를 사용하고 싶기 때문에…
저 키를 바꿔보도록 하죠.
‘키보드 설정…‘을 누릅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자판입력 탭에서 구성키를 ‘오른쪽 Alt’로 바꾼 후에 ‘다음 입력 소스로 전환’ 키는 한/영으로 바꿉니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 텍스트 입력으로 돌아와서 한국어를 선택한 후 사진에 표시된 도구 버튼을 누릅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 나오는데요.&lt;br /&gt;
‘한글 모드로 시작’을 체크한 후 확인을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/setting/19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 한글에 대한 설정이 끝났습니다!&lt;br /&gt;
다시 로그아웃을 한 후 로그인을 하시면 한글을 쓰실 수 있습니다!!&lt;/p&gt;

&lt;p&gt;오늘은 포스팅 Day인듯합니다.
왜냐하면 오늘 우분투를 재설치 했기 때문이죠…
으하하하하하하하핳……
우분투 다시 셋팅하면서 포스팅중….
다음은 소프트웨어 관련 세팅 포스팅하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Aug 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2016/08/20/Setting/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2016/08/20/Setting/</guid>
        
        <category>Setting</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>Windows 10 &amp; Ubuntu 16.04 듀얼부팅</title>
        <description>&lt;p&gt;Deep Learning을 하기 위해 windows를 사용할 수도 있겠지만…&lt;br /&gt;
저는 Ubuntu를 사용하기로 했습니다. 왜냐하면 Ubuntu로 배웠으니..ㅎㅎ&lt;br /&gt;
자, 그럼 시작하겠습니다 .&lt;br /&gt;
제가 예전에 16.04를 다운받아서 설치한거라..&lt;br /&gt;
다운로드는 16.04.1로 되어있는데 설치는 16.04로 되어있습니다.&lt;br /&gt;
하지만 설치 방법은 똑같음!&lt;br /&gt;
그리고 듀얼부팅은 Windows가 먼저 설치되어야 한다는거 잊지마세요.&lt;/p&gt;

&lt;h2 id=&quot;1-설치-전에-확일-해야할-사항&quot;&gt;1. 설치 전에 확일 해야할 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;BIOS에서 secure booting disable&lt;/li&gt;
  &lt;li&gt;Windows 에서 빠른 시작 켜기 옵션 끄기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/01.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/02.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/03.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/04.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;11-설치-할-디스크-볼륨-만들기&quot;&gt;1.1 설치 할 디스크 볼륨 만들기&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/05.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저는 HDD에 설치할 거니까 HDD 주 파티션에서 마우스 오른쪽 클릭!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/06.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;볼륨을 축소합시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/07.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하시는 만큼 입력하세요.
102,400 MB는 예시일뿐…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/08.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;할당되지 않은 부분이 100GB 생겼네요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/09.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-ubuntu-설치-과정&quot;&gt;2. Ubuntu 설치 과정&lt;/h2&gt;

&lt;h4 id=&quot;21-ubuntu-16041-lts-image-download&quot;&gt;2.1 Ubuntu 16.04.1 LTS image Download&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ubuntu.com/download/desktop&quot;&gt;http://www.ubuntu.com/download/desktop&lt;/a&gt;에 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/10.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Download를 클릭하면 다음 사진과 같이 나오는데 흠…잘 모르겠습니다.&lt;br /&gt;
후원..같지만 ‘Not now, take me to the download’를 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/11.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운로드 창이 자동으로 나옵니다. &lt;br /&gt;
저장할 경로 지정해주세요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/12.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;22-ubuntu-16041-lts-부팅-디스크-만들기&quot;&gt;2.2 Ubuntu 16.04.1 LTS 부팅 디스크 만들기&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://rufus.akeo.ie&quot;&gt;https://rufus.akeo.ie&lt;/a&gt;에서 util을 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/13.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Util을 실행!&lt;br /&gt;
처음으로 부팅 디스크로 쓸 USB를 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/14.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OS image를 불러와야겠죠?&lt;br /&gt;
저~~기 아이콘 눌러주세요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/15.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ISO 파일이 있는 곳으로 가서 선택하고 열기!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/16.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 시작을 누릅니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/17.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;구구절절… 구구절절… ‘OK’ 눌러주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/18.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런 경고는…저에게 통하지 않습니다..&lt;br /&gt;
‘확인’을 눌러주세요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/19.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;진행이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/20.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;되고 있는…건가..?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/21.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6분 36초 정도 걸렸네요..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/22.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 설치를 해보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;23-ubuntu-설치하기&quot;&gt;2.3 Ubuntu 설치하기&lt;/h4&gt;

&lt;p&gt;BIOS 세팅에서 부팅 순서를 USB로 바꿔주시거나&lt;br /&gt;
Boot Option에서 USB를 선택해서 부팅합니다.&lt;br /&gt;
검은 화면이 나오면서 ‘Try Ubuntu without installing’, ‘Install 어쩌고…’ 등이 있는데요.&lt;br /&gt;
저는 스크린샷을 해야하므로 ‘Try Ubuntu without installing’ 을 선택했습니다.&lt;br /&gt;
‘또로롱’하면서 화면이 뜹니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/23.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;바탕화면에 ‘Install Ubuntu 16.04 LTS’ 실행합니다.  &lt;br /&gt;
디렉토리 이름이 영어인게 좋으니까 일단 English로 진행.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/24.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치하면서 업데이트, 다른 소프트웨어 설치 여부는..마음대로…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/25.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 방식에 대한 옵션이 나옵니다.&lt;br /&gt;
‘Something else’를 선택해주세요.&lt;br /&gt;
그래야 더 안심하고 설치하니까요…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/26.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;윈도우에서 파티션을 나눴었죠.&lt;br /&gt;
저는 SSD에 윈도우, HDD에 우분투를 설치할 것이니..&lt;br /&gt;
HDD 파티션을 나눠놨었습니다.&lt;br /&gt;
얼마나 나눌건지는..여러분 마음…
전 64GB 정도 나눴습니다. (100GB 뺐다가 다시 줄임…)
‘free space’를 선택하고 왼쪽 아래에 ‘+’버튼을 눌러주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/27.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 Swap 파티션부터 만들죠.&lt;br /&gt;
자신의 RAM 용량과 똑같이 맞추라는 분도 계시고&lt;br /&gt;
요즘은 RAM 용량이 다 커서 필요없다는 분도 계셔서&lt;br /&gt;
저는 그 중간인 8GB를 Swap으로 만들었습니다.&lt;br /&gt;
설정법은 아래 사진과 같이!&lt;br /&gt;
그리고 ‘OK’를 누릅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/28.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 사진과 같이 swap 영역이 unknown으로 만들어집니다.&lt;br /&gt;
이제 Ubuntu 파티션을 만들어보죠.&lt;br /&gt;
똑같이 ‘free space’ 를 선택하고 ‘+’ 버튼을 눌러줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/29.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘Size’에는 남은 용량을 다 씁니다.&lt;br /&gt;
나머지는 아래 사진과 같이 설정 !&lt;br /&gt;
그리고 ‘OK’를 누릅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/30.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Boot loader 경로를 지정해야하는데요.&lt;br /&gt;
아랫 부분에 ‘Device for boot loader installation’에서 &lt;br /&gt;
디스크를 선택하면 됩니다. &lt;br /&gt;
SSD에 지정을 하시기도 하지만 저는 HDD 지정을 했습니다.&lt;br /&gt;
그리고 ‘Install Now’을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/31.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;디스크가 변경됩니다. 뭐 이런 내용이 뜨는데&lt;br /&gt;
그냥. 조용히. 살포시.&lt;br /&gt;
‘Continue’ 를 눌러줍시다.&lt;br /&gt;
(불안하시면 다시 확인 하시구요..)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/32.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위치 설정하시구요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/33.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;키보드 설정은 그냥 영어로 놔두세요.  &lt;br /&gt;
나중에 설치 후에 설정 할겁니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/34.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계정 설정을 합니다!&lt;br /&gt;
저는 Jerry니까… 우분투 계정도 Jerry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/35.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 시작!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/36.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그저… 기다림…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/37.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/38.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 완료되었습니다!&lt;br /&gt;
과감히 바로 ‘Restart Now’를 클립했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jjerry-k.github.io/public/img/dualboot/39.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 포스팅이라 굉장히 난잡하고 스크롤이 촤라라라락하네요…&lt;br /&gt;
좀 더 정리해서 쓰는 습관을 들여야지…&lt;/p&gt;

&lt;p&gt;Ubuntu를 접하게 되면서 굉장히 다사다난한 경험을 하는 저와 제 노트북….&lt;br /&gt;
어쩌면 조만간 Windows 와 Ubuntu를 재설치 할 수도 있을 듯합니다..&lt;br /&gt;
다음 포스팅은 설치 후 세팅에 관련하여 하겠습니다!&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Aug 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ubuntu/2016/08/16/Dualboot/</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2016/08/16/Dualboot/</guid>
        
        <category>Setting</category>
        
        
        <category>Ubuntu</category>
        
      </item>
    
  </channel>
</rss>
